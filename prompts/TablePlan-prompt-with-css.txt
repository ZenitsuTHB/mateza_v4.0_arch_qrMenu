File Contents:

--- FloorPlan.js ---
// FloorPlan.js
import React, { useRef, useEffect, useState } from 'react';
import { useDrop } from 'react-dnd';
import './css/floorPlan.css';
import { ResizableBox } from 'react-resizable';
import 'react-resizable/css/styles.css';
import FloorPlanElement from './FloorPlanElement.js';
import useApi from '../../../Hooks/useApi.js'; // Ensure correct path

const FloorPlanGeneral = ({
  reservations,
  assignReservation,
  removeReservation,
  updateNotes,
}) => {
  const floorPlanRef = useRef(null);
  const [floorPlanSize, setFloorPlanSize] = useState({ width: 800, height: 600 });
  const [tables, setTables] = useState([]);

  const api = useApi(); // Initialize useApi hook

  // Update floor plan size on mount and when resized
  useEffect(() => {
    const updateSize = () => {
      if (floorPlanRef.current) {
        const { width, height } = floorPlanRef.current.getBoundingClientRect();
        setFloorPlanSize({ width, height });
      }
    };

    // Initial size
    updateSize();

    // Update size on window resize
    window.addEventListener('resize', updateSize);

    // Cleanup
    return () => window.removeEventListener('resize', updateSize);
  }, []);

  // Load tables from API on mount
  useEffect(() => {
    const fetchTables = async () => {
      try {
        const data = await api.get(window.baseDomain + 'api/tables', { noCache: true });
        // Ensure that data is an array
        if (Array.isArray(data)) {
          setTables(data);
        } else if (data && Array.isArray(data.tables)) {
          // If API returns { tables: [...] }
          setTables(data.tables);
        } else {
          setTables([]); // Fallback to empty array
        }
      } catch (error) {
        console.error('Error fetching tables:', error);
        setTables([]); // Fallback to empty array on error
      }
    };

    fetchTables();
  }, [api]);

  const [, drop] = useDrop({
    accept: 'GUEST',
    drop: (item, monitor) => {
      // Dropping on the floor plan background does nothing
      // You might want to implement additional functionality here if needed
    },
  });

  return (
    <ResizableBox
      width={800}
      height={600}
      minConstraints={[400, 300]}
      maxConstraints={[1600, 1200]}
      className="resizable-floor-plan"
      onResizeStop={(e, data) => {
        // Directly set the new size without snapping
        setFloorPlanSize({ width: data.size.width, height: data.size.height });
      }}
      resizeHandles={['se']} // Optional: specify resize handles if needed
    >
      <div
        id="floor-plan-container"
        className="floor-plan"
        ref={(node) => {
          drop(node);
          floorPlanRef.current = node;
        }}
        style={{ position: 'relative', width: '100%', height: '100%' }}
      >
        {tables.map((table) => (
          <FloorPlanElement
            key={table.id}
            table={table}
            reservations={reservations.filter((res) => res.tableId === table.id)}
            assignReservation={assignReservation}
            removeReservation={removeReservation}
            updateNotes={updateNotes}
            floorPlanSize={floorPlanSize}
          />
        ))}
      </div>
    </ResizableBox>
  );
};

export default FloorPlanGeneral;


--- FloorPlanElement.js ---
// FloorPlanElement.js
import React from 'react';
import { useDrop } from 'react-dnd';
import Table from './Table.js';

const FloorPlanElement = ({
  table,
  reservations,
  assignReservation,
  removeReservation,
  updateNotes,
  floorPlanSize,
}) => {
  const [{ isOver, canDrop }, drop] = useDrop({
    accept: 'GUEST',
    drop: (item) => {
      assignReservation(item.id, table.id);
    },
    canDrop: (item) => {
      // Check if table can accommodate the reservation
      const currentGuests = reservations.reduce((acc, res) => acc + res.numberOfGuests, 0);
      return currentGuests + item.numberOfGuests <= table.capacity;
    },
    collect: (monitor) => ({
      isOver: monitor.isOver(),
      canDrop: monitor.canDrop(),
    }),
  });

  const isActive = isOver && canDrop;

  return (
    <div
      ref={drop}
      style={{
        position: 'absolute',
        left: `${table.x}px`,
        top: `${table.y}px`,
        border: isActive ? '2px dashed #4CAF50' : 'none', // Visual feedback
        transition: 'border 0.2s ease',
      }}
    >
      <Table
        capacity={table.capacity}
        reservations={reservations}
        tableId={table.id}
        tableName={table.name} // Display the table's name
        removeReservation={removeReservation}
        updateNotes={updateNotes}
        isActive={isActive}
      />
    </div>
  );
};

export default FloorPlanElement;


--- Hooks/useReservations.js ---
// src/Components/Calendar/Hooks/useReservations.js

import { useState, useEffect } from 'react';
import useApi from '../../../../Hooks/useApi';

/**
 * Custom hook to fetch and manage reservations data.
 *
 * @returns {Array} An array of reservation objects.
 */
const useReservations = () => {
  const [reservations, setReservations] = useState([]);
  const api = useApi();

  useEffect(() => {
    /**
     * Fetches reservations from the backend API and processes them.
     */
    const fetchReservations = async () => {
      try {
        // Fetch raw data from the backend API
        const data = await api.get(`${window.baseDomain}api/auth-reservations`, { noCache: true });

        console.log('Raw data from backend:', data);

        // Check if data is an array
        if (!Array.isArray(data)) {
          console.error('Unexpected data format: Expected an array of reservations.');
          setReservations([]);
          return;
        }

        // Process and map each reservation to the frontend format
        const mappedReservations = data.map((reservation) => {
          // Extract the reservation ID
          const id = reservation._id?.$oid || reservation._id || `unknown-${Math.random()}`;

          // Parse the number of guests
          const guests = parseInt(reservation.guests?.$numberInt || reservation.guests, 10);
          const numberOfGuests = isNaN(guests) ? 1 : guests; // Default to 1 if parsing fails

          // Extract and trim extra information
          const notes = reservation.extraInfo?.trim() || '';

          // Return the mapped reservation object
          return {
            id,
            date: reservation.date, // Ensure this is in 'YYYY-MM-DD' format or adjust as needed
            time: reservation.time, // Ensure this is in 'HH:MM' format or adjust as needed
            firstName: reservation.firstName || 'Unknown',
            lastName: reservation.lastName || 'Guest',
            numberOfGuests,
            tableId: null, // Initialize as null; will be updated when assigned
            notes,
            email: reservation.email || '',
            phone: reservation.phone || '',
            reservationType: reservation.reservationType || 'common',
            // Add other fields if necessary
          };
        });

        setReservations(mappedReservations);
      } catch (error) {
        console.error('Error fetching reservations:', error);
        setReservations([]); // Fallback to an empty array on error
      }
    };

    fetchReservations();
  }, [api]);

  return reservations;
};

export default useReservations;


--- Sidebar.js ---
// Sidebar.js
import React, { useState, useMemo } from 'react';
import { useDrag } from 'react-dnd';
import './css/sidebar.css';

const Sidebar = ({ reservations }) => {
  const [searchTerm, setSearchTerm] = useState('');

  // Filter reservations based on search term and only show unassigned
  const filteredReservations = useMemo(() => {
    const lowerSearch = searchTerm.toLowerCase();
    return reservations.filter(
      (guest) =>
        guest.tableId === null &&
        (guest.firstName.toLowerCase().includes(lowerSearch) ||
          guest.lastName.toLowerCase().includes(lowerSearch) ||
          guest.numberOfGuests.toString().includes(lowerSearch) ||
          guest.time.includes(lowerSearch))
    );
  }, [searchTerm, reservations]);

  // Guest Block Component
  const GuestBlock = ({ guest }) => {
    const [{ isDragging }, drag] = useDrag(
      () => ({
        type: 'GUEST',
        item: { id: guest.id, ...guest },
        collect: (monitor) => ({
          isDragging: !!monitor.isDragging(),
        }),
      }),
      [guest]
    );

    return (
      <div
        className="guest-block"
        ref={drag}
        style={{ opacity: isDragging ? 0.5 : 1 }}
      >
        <p className="guest-name">
          {guest.firstName} {guest.lastName}
        </p>
        <p className="guest-details">
          {guest.numberOfGuests}p â€¢ {guest.time}
        </p>
      </div>
    );
  };

  return (
    <div className="sidebar">
      <div className="search-bar">
        <input
          type="text"
          placeholder="Zoek gasten..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          aria-label="Zoek gasten"
        />
      </div>
      <div className="guests-list">
        {filteredReservations.length > 0 ? (
          filteredReservations.map((guest) => (
            <GuestBlock key={guest.id} guest={guest} />
          ))
        ) : (
          <p className="no-results">Geen gasten gevonden.</p>
        )}
      </div>
    </div>
  );
};

export default Sidebar;


--- Table.js ---
// Table.js
import React from 'react';
import { useDrag } from 'react-dnd';
import './css/table.css';

const Table = ({
  capacity,
  reservations,
  tableId,
  tableName,
  removeReservation,
  updateNotes,
  isActive,
}) => {
  const isOccupied = reservations.length > 0;

  // Calculate table width based on capacity
  const tableWidth = 70 + (capacity > 4 ? (capacity - 4) * 10 : 0);
  const tableHeight = 70;

  const chairsPerSide = Math.ceil(capacity / 2);

  const topChairs = [];
  const bottomChairs = [];

  for (let i = 0; i < chairsPerSide; i++) {
    topChairs.push(i);
    bottomChairs.push(i);
  }

  return (
    <div
      className={`table-container ${isOccupied ? 'occupied' : ''} ${isActive ? 'active' : ''}`}
      style={{ width: `${tableWidth}px`, height: `${tableHeight + 80}px` }}
    >
      {/* Tooltip */}
      {isOccupied && (
        <div className="tooltip">
          {reservations.map((res) => (
            <div key={res.id} className="tooltip-content">
              <div className="reservation-summary">
                <span className="reservation-name">
                  {res.firstName} {res.lastName}
                </span>{' '}
                ({res.numberOfGuests}p) - {res.time}
              </div>
              <div className="reservation-notes">
                <input
                  type="text"
                  placeholder="Add a note..."
                  value={res.notes}
                  onChange={(e) => updateNotes(res.id, e.target.value)}
                  aria-label={`Add a note for reservation of ${res.firstName} ${res.lastName}`}
                />
              </div>
            </div>
          ))}
        </div>
      )}

      <div
        className="table-plan-component chairs top-chairs"
        style={{
          width: `${tableWidth}px`,
        }}
      >
        {topChairs.slice(0, Math.floor(capacity / 2)).map((chair, index) => (
          <div key={`top-${index}`} className="table-plan-component chair"></div>
        ))}
      </div>
      <div
        className={`table ${isOccupied ? 'table-occupied' : ''}`}
        style={{
          width: `${tableWidth}px`,
          height: `${tableHeight}px`,
        }}
      >
        {/* Display Reservations Assigned to This Table */}
        {reservations.map((res) => (
          <Reservation
            key={res.id}
            reservation={res}
            tableId={tableId}
            removeReservation={removeReservation}
          />
        ))}
        {/* Table Name */}
        <div className="table-number">{tableName}</div>
      </div>
      <div
        className="table-plan-component chairs bottom-chairs"
        style={{
          width: `${tableWidth}px`,
        }}
      >
        {bottomChairs.slice(0, Math.ceil(capacity / 2)).map((chair, index) => (
          <div key={`bottom-${index}`} className="table-plan-component chair"></div>
        ))}
      </div>
    </div>
  );
};

// Reservation Component
const Reservation = ({ reservation, tableId, removeReservation }) => {
  const [{ isDragging }, drag] = useDrag(
    () => ({
      type: 'GUEST',
      item: { id: reservation.id, ...reservation },
      collect: (monitor) => ({
        isDragging: !!monitor.isDragging(),
      }),
    }),
    [reservation]
  );

  return (
    <div
      className="reservation"
      ref={drag}
      style={{ opacity: isDragging ? 0.5 : 1, cursor: 'grab' }}
    >
      <span className="reservation-name">
        {reservation.firstName} {reservation.lastName}
      </span>{' '}
      ({reservation.numberOfGuests}p) - {reservation.time}
    </div>
  );
};

export default Table;


--- TableSlots.js ---
import React, { useRef, useEffect } from 'react';
import './css/tableslots.css';

const slotToTime = (slot) => {
  const totalMinutes = (slot - 14) * 30 + 420;
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;
  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
};

const getDateInDutch = (date) => {
  const day = date.getDate();
  const months = [
    'januari', 'februari', 'maart', 'april', 'mei', 'juni',
    'juli', 'augustus', 'september', 'oktober', 'november', 'december',
  ];
  const month = months[date.getMonth()];
  return `${day} ${month}`;
};

const TableSlots = ({ selectedSlot, onSelectSlot, currentDate, floorPlanWidth }) => {
  const slotsContainerRef = useRef(null);
  const dateInDutch = getDateInDutch(currentDate);

  const handleSlotClick = (slot) => {
    if (onSelectSlot) {
      onSelectSlot(slot);
    }
    centerSelectedSlot(slot - 14);
  };

  const centerSelectedSlot = (slotIndex) => {
    const slotsContainer = slotsContainerRef.current;
    const slotWidth = 120.85;
    const containerWidth = slotsContainer.offsetWidth;
    const newScrollPosition = slotIndex * slotWidth - (containerWidth / 2 - slotWidth / 2);
    slotsContainer.scrollTo({ left: newScrollPosition, behavior: 'smooth' });
  };

  useEffect(() => {
    if (selectedSlot) {
      centerSelectedSlot(selectedSlot - 14);
    }
  }, [selectedSlot]);

  return (
    <div
      className="timeline-container"
      ref={slotsContainerRef}
      style={{ width: `${floorPlanWidth}px` }}
    >
      <div className="timeline" style={{ width: `${34 * 120.85}px` }}>
        {Array.from({ length: 34 }, (_, i) => i + 14).map((slot) => (
          <div
            key={slot}
            className={`timeline-slot ${selectedSlot === slot ? 'selected' : ''}`}
            onClick={() => handleSlotClick(slot)}
          >
            <div className="slot-content">
              <div className="slot-subtitle">{dateInDutch}</div>
              <div className="slot-title">{slotToTime(slot)}</div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default TableSlots;


--- Walls.js ---
// Walls.js
import React from 'react';
import './css/walls.css';

const Walls = ({ length }) => {
  const wallWidth = (length - 1) * 20;
  const wallHeight = 20;

  return (
    <div
      className="walls-container"
      style={{ width: `${wallWidth}px`, height: `${wallHeight}px` }}
    >
      <div className="wall"></div>
    </div>
  );
};

export default Walls;


--- css/app.css ---
/* app.css */

.app-container {
  display: flex;
  flex-direction: row;
  height: 100vh;
}

.table-display-component {
  flex: 1;
  position: relative;
}

.sidebar {
  width: 300px;
  background-color: #f5f5f5;
  border-left: 1px solid #ddd;
  padding: 20px;
  overflow-y: auto;
}


--- css/floorPlan.css ---
/* floorPlan.css */

.table-display-component .floor-plan {
  position: relative;
  width: 100%;
  height: 100%;
  background-color: #ffffff;
  border: 2px solid #ccc;
  box-sizing: border-box;
  overflow: hidden;
  background-image:
    linear-gradient(to right, #ddd 1px, transparent 1px),
    linear-gradient(to bottom, #ddd 1px, transparent 1px);
  background-size: 50px 50px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  transition: width 0.2s, height 0.2s;
}

.table-display-component .resizable-floor-plan {
  position: relative;
  width: 100%;
  height: 100%;
}

.table-display-component .alignment-line {
  position: absolute;
  background-color: red;
  z-index: 100;
}


--- css/sidebar.css ---
/* css/sidebar.css */

.table-display-component .sidebar {
  width: 350px;
  position: fixed;
  height: calc(100% - 60px);
  right: 0;
  top: 60px;
  background-color: rgb(220, 220, 220);
  box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
  padding: 20px;
  overflow-y: auto;
  z-index: 1000;
  border-left: 1px solid #ccc;
}

.table-display-component .search-bar {
  margin-bottom: 20px;
}

.table-display-component .search-bar input {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #cccccc;
  border-radius: 4px;
  font-size: 14px;
}

.table-display-component .guests-list {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.table-display-component .guest-block {
  background-color: #ffffff;
  border: 1px solid #e0e0e0;
  padding: 10px 15px;
  border-radius: 6px;
  cursor: grab;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: background-color 0.2s, box-shadow 0.2s;
}

.table-display-component .guest-block:hover {
  background-color: #f9f9f9;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.table-display-component .guest-name {
  margin: 0;
  font-weight: bold;
  font-size: 16px;
  color: #333333;
}

.table-display-component .guest-details {
  margin: 5px 0 0 0;
  font-size: 14px;
  color: #555555;
}

.table-display-component .no-results {
  text-align: center;
  color: #888888;
  font-size: 16px;
  margin-top: 50px;
}


--- css/table.css ---
/* table.css */

.table-display-component .table-container {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 80px;
}

.table-display-component .table {
  background-color: rgba(245, 245, 220, 1); /* Light color with opacity */
  border: 2px solid #d2b48c;
  border-radius: 8px;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 2;
  overflow: hidden;
  padding: 5px;
  box-sizing: border-box;
  transition: background-color 0.3s, color 0.3s, border-color 0.3s;
}

.table-display-component .table-occupied {
  background-color: rgba(76, 175, 80, 1); /* Green with opacity */
  color: #ffffff; /* White text */
  border-color: #388e3c; /* Darker green border */
}

.table-display-component .chairs {
  display: flex;
  justify-content: center;
  gap: 10px;
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  z-index: 1;
}

.table-display-component .top-chairs {
  top: 0;
  transform: translate(-50%, 150%);
}

.table-display-component .bottom-chairs {
  bottom: 0;
  transform: translate(-50%, -150%);
}

.table-display-component .chair {
  width: 20px !important;
  height: 20px !important;
  background-color: rgba(245, 245, 220, 0.8); /* Light color with opacity */
  border: 2px solid #d2b48c;
  border-radius: 50%;
  transition: background-color 0.3s, border-color 0.3s;
}

.table-display-component .occupied .chair {
  background-color: rgba(76, 175, 80, 0.8); /* Green with opacity */
  border-color: #388e3c;
}

.table-display-component .reservation {
  background-color: transparent; /* Remove background to show table's color */
  border: none;
  color: #ffffff; /* White text */
  font-size: 12px;
  padding: 0;
  margin: 0;
  cursor: grab;
}

.table-display-component .reservation:hover {
  text-decoration: underline;
}

.table-display-component .reservation-name {
  font-weight: bold;
}

/* Tooltip Styles */
.table-display-component .tooltip {
  display: none; /* Hidden by default */
  position: absolute;
  top: -10px;
  left: 50%;
  transform: translate(-50%, -100%);
  background-color: rgba(255, 255, 255, 0.95);
  color: #333333;
  padding: 10px;
  border-radius: 8px;
  font-size: 14px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  z-index: 10;
  width: 250px;
  max-height: 300px;
  overflow-y: auto;
  transition: opacity 0.3s;
}

.table-display-component .table-container:hover .tooltip {
  display: block;
}

.table-display-component .tooltip-content {
  margin-bottom: 15px;
  border-bottom: 1px solid #eee;
  padding-bottom: 10px;
}

.table-display-component .tooltip-content:last-child {
  margin-bottom: 0;
  border-bottom: none;
  padding-bottom: 0;
}

.table-display-component .reservation-summary {
  font-weight: bold;
  margin-bottom: 5px;
}

.table-display-component .reservation-notes input {
  width: 100%;
  padding: 5px;
  border: 1px solid #ccc;
  border-radius: 4px;
  margin-bottom: 10px;
  box-sizing: border-box;
}


.table-display-component .table-number {
  position: absolute;
  bottom: 5px;
  right: 5px; /* Changed from left to right */
  background-color: rgba(255, 255, 255, 0.7);
  padding: 2px 4px;
  border-radius: 3px;
  font-size: 12px;
  color: #333;
  pointer-events: none; /* Ensure the number doesn't interfere with dragging */
  transition: transform 0.2s;
}


--- css/tableslots.css ---
.timeline-container {
	position: relative;
	overflow-x: auto;
	white-space: nowrap;
	margin: 20px 0;
	padding: 0 10px;
	height: 80px;
	-ms-overflow-style: none;  /* Internet Explorer 10+ */
	scrollbar-width: none;  /* Firefox */
  }
  
  .timeline-container::-webkit-scrollbar {
	display: none;  /* Safari and Chrome */
  }
  
  .timeline {
	display: inline-block;
  }
  
  
  .timeline-slot {
	display: inline-block;
	width: 100px;
	height: 70px;
	background-color: #f8f9fa;
	border-radius: 12px;
	margin: 0 10px;
	transition: transform 0.3s ease, background-color 0.3s ease, width 0.3s ease, height 0.3s ease;
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	cursor: pointer;
	text-align: center;
	vertical-align: middle;
	margin-top: 5px;
	user-select: none;
	line-height: 70px; /* Center text vertically */
  }
  
  .timeline-slot:hover {
	background-color: #e9ecef;
  }
  
  .timeline-slot.selected {
	background-color: #0073e6;
	color: white;
	border: 1px solid #005bb5;
	width: 150px; /* Expanded width */
	line-height: normal; /* Reset line-height */
  }
  
  .slot-content {
	text-align: center;
  }
  
  .slot-title {
	font-size: 18px;
	font-weight: bold;
	line-height: normal; /* Reset line-height */
  }
  
  .slot-subtitle {
	font-size: 14px;
	margin-top: 14px;
	color: #6c757d;
	line-height: normal; /* Reset line-height */
  }
  
  .timeline-slot.selected .slot-subtitle {
	color: white;
  }
  

--- css/walls.css ---
/* walls.css */

.table-plan-component .walls-container {
  display: flex;
  align-items: center;
  justify-content: center;
}

.table-plan-component .wall {
  width: 100%;
  height: 100%;
  background-color: #654321;
}


--- index.js ---
import React, { useState, useEffect } from 'react';
import FloorPlanGeneral from './FloorPlan.js';
import Sidebar from './Sidebar.js';
import { withHeader } from '../../../Components/Structural/Header/index.js';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import useReservations from './Hooks/useReservations.js';
import './css/app.css';
import TableSlots from './TableSlots.js';

const TablePlan = () => {
  const fetchedReservations = useReservations();

  const [reservations, setReservations] = useState([]);
  const [floorPlanWidth, setFloorPlanWidth] = useState(800);

  useEffect(() => {
    if (fetchedReservations.length > 0 && reservations.length === 0) {
      setReservations(fetchedReservations);
    }
  }, [fetchedReservations, reservations]);

  const assignReservation = (reservationId, targetTableId) => {
    setReservations((prevReservations) =>
      prevReservations.map((res) =>
        res.id === reservationId ? { ...res, tableId: targetTableId } : res
      )
    );
  };

  const removeReservation = (reservationId) => {
    setReservations((prevReservations) =>
      prevReservations.map((res) =>
        res.id === reservationId ? { ...res, tableId: null } : res
      )
    );
  };

  const updateNotes = (reservationId, newNotes) => {
    setReservations((prevReservations) =>
      prevReservations.map((res) =>
        res.id === reservationId ? { ...res, notes: newNotes } : res
      )
    );
  };

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="table-display-component">
        <TableSlots
          selectedSlot={null}
          onSelectSlot={null}
          currentDate={new Date()}
          floorPlanWidth={floorPlanWidth} // Pass floor plan width
        />
        <div className="app-container">
          <FloorPlanGeneral
            reservations={reservations}
            assignReservation={assignReservation}
            removeReservation={removeReservation}
            updateNotes={updateNotes}
          />
          <Sidebar reservations={reservations} />
        </div>
      </div>
    </DndProvider>
  );
};

export default withHeader(TablePlan);



Directory Structure for "/Users/thibaultvandesompele/Desktop/Mateza 4.0/Client/Dashboard/dashboard-general/src/Pages/Tables/TablePlan":

â”œâ”€â”€ FloorPlan.js
â”œâ”€â”€ FloorPlanElement.js
â”œâ”€â”€ Hooks
â”‚   â””â”€â”€ useReservations.js
â”œâ”€â”€ Sidebar.js
â”œâ”€â”€ Table.js
â”œâ”€â”€ TableSlots.js
â”œâ”€â”€ Walls.js
â”œâ”€â”€ css
â”‚   â”œâ”€â”€ app.css
â”‚   â”œâ”€â”€ floorPlan.css
â”‚   â”œâ”€â”€ sidebar.css
â”‚   â”œâ”€â”€ table.css
â”‚   â”œâ”€â”€ tableslots.css
â”‚   â””â”€â”€ walls.css
â””â”€â”€ index.js


List of Files:
FloorPlan.js
FloorPlanElement.js
Hooks/useReservations.js
Sidebar.js
Table.js
TableSlots.js
Walls.js
css/app.css
css/floorPlan.css
css/sidebar.css
css/table.css
css/tableslots.css
css/walls.css
index.js
