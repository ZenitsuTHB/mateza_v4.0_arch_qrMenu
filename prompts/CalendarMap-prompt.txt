File Contents:

--- BarChartView.js ---
// BarChartView.js

import React, { useEffect, useState } from 'react';
import './css/barChartView.css';
import { Bar } from 'react-chartjs-2';
import 'chart.js/auto';
import { maxCapacity } from './reservationData'; // Adjust the import path as needed

const BarChartView = ({
  currentDate,
  reservationsByDate,
  selectedShift,
  selectedViewMode,
  maxCapacity,
  predictionsByDate,
  weekOrMonthView, // New prop
}) => {
  const [chartData, setChartData] = useState({
    labels: [],
    datasets: [],
  });

  useEffect(() => {
    let startDate, endDate;
    const labels = [];
    let datasets = [];

    // Define time slot names and colors
    const timeSlotNames = ['Ochtend', 'Middag', 'Avond'];
    const timeSlotColors = ['#182825', '#016FB9', '#22AED1'];

    // Consistent getMonday function
    const getMonday = (date) => {
      const d = new Date(date);
      const day = d.getDay(); // 0 (Sun) to 6 (Sat)
      const diff = day === 0 ? -6 : 1 - day; // Adjust when day is Sunday
      d.setDate(d.getDate() + diff);
      d.setHours(0, 0, 0, 0); // Reset time to midnight
      return d;
    };

    // Determine the date range based on the current view
    if (weekOrMonthView === 'month') {
      startDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
      endDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    } else if (weekOrMonthView === 'week') {
      startDate = getMonday(currentDate);
      endDate = new Date(startDate);
      endDate.setDate(endDate.getDate() + 6);
    }

    // Generate an array of dates within the selected range without mutating the same date object
    const dateArray = [];
    for (
      let d = new Date(startDate);
      d <= endDate;
      d.setDate(d.getDate() + 1)
    ) {
      dateArray.push(new Date(d));
    }

    if (selectedViewMode === 'Algemeen' && selectedShift === 'Dag') {
      // Stacked bar chart for 'Algemeen' view with 'Dag' shift
      const dataByTimeSlot = [[], [], []]; // [Ochtend, Middag, Avond]

      dateArray.forEach((date) => {
        const dateString = date.toISOString().split('T')[0];
        if (weekOrMonthView === 'month') {
          labels.push(date.getDate());
        } else if (weekOrMonthView === 'week') {
          labels.push(date.toLocaleDateString('nl-NL', { weekday: 'short' }));
        }

        const reservations = reservationsByDate[dateString] || [];

        const totalGuestsByTimeSlot = [0, 0, 0]; // Ochtend, Middag, Avond

        reservations.forEach((res) => {
          totalGuestsByTimeSlot[res.timeSlot] += res.aantalGasten;
        });

        // Push the data for each time slot
        for (let timeSlot = 0; timeSlot < 3; timeSlot++) {
          dataByTimeSlot[timeSlot].push(totalGuestsByTimeSlot[timeSlot]);
        }
      });

      // Create datasets for each time slot
      datasets = timeSlotNames.map((name, index) => ({
        label: name,
        data: dataByTimeSlot[index],
        backgroundColor: timeSlotColors[index],
      }));
    } else {
      // Other view modes
      const data = [];

      dateArray.forEach((date) => {
        const dateString = date.toISOString().split('T')[0];
        if (weekOrMonthView === 'month') {
          labels.push(date.getDate());
        } else if (weekOrMonthView === 'week') {
          labels.push(date.toLocaleDateString('nl-NL', { weekday: 'short' }));
        }

        let totalGuests = 0;

        if (selectedViewMode === 'Voorspelling') {
          // Use predictions
          totalGuests = predictionsByDate[dateString] || 0;
        } else {
          const reservations = reservationsByDate[dateString] || [];
          // Calculate total guests based on selectedShift
          reservations.forEach((res) => {
            if (
              selectedShift === 'Dag' ||
              (selectedShift === 'Ochtend' && res.timeSlot === 0) ||
              (selectedShift === 'Middag' && res.timeSlot === 1) ||
              (selectedShift === 'Avond' && res.timeSlot === 2)
            ) {
              totalGuests += res.aantalGasten;
            }
          });
        }

        if (selectedViewMode === 'Bezettingspercentage') {
          // Calculate occupancy percentage
          const occupancyRate = (totalGuests / maxCapacity) * 100;
          data.push(parseFloat(occupancyRate.toFixed(1)));
        } else {
          data.push(totalGuests);
        }
      });

      // Determine background color based on selectedViewMode and selectedShift
      let backgroundColor = '';
      if (selectedViewMode === 'Bezettingspercentage') {
        backgroundColor = '#28a745'; // Green
      } else if (selectedViewMode === 'Bezettingsgraad') {
        if (selectedShift === 'Ochtend') {
          backgroundColor = '#182825';
        } else if (selectedShift === 'Middag') {
          backgroundColor = '#016FB9';
        } else if (selectedShift === 'Avond') {
          backgroundColor = '#22AED1';
        } else {
          backgroundColor = '#007bff';
        }
      } else if (selectedViewMode === 'Voorspelling') {
        backgroundColor = '#ff0000'; // Red for predictions
      } else {
        // 'Algemeen' view with specific shift
        if (selectedShift === 'Ochtend') {
          backgroundColor = '#182825';
        } else if (selectedShift === 'Middag') {
          backgroundColor = '#016FB9';
        } else if (selectedShift === 'Avond') {
          backgroundColor = '#22AED1';
        } else {
          backgroundColor = '#007bff';
        }
      }

      datasets = [
        {
          label:
            selectedViewMode === 'Bezettingspercentage'
              ? 'Bezettingsgraad (%)'
              : selectedViewMode === 'Voorspelling'
              ? 'Voorspelling Aantal Gasten'
              : 'Aantal Gasten',
          data: data,
          backgroundColor: Array.isArray(backgroundColor)
            ? backgroundColor
            : new Array(data.length).fill(backgroundColor),
        },
      ];
    }

    const chartData = {
      labels: labels,
      datasets: datasets,
    };

    setChartData(chartData);
  }, [
    currentDate,
    reservationsByDate,
    selectedShift,
    selectedViewMode,
    maxCapacity,
    predictionsByDate,
    weekOrMonthView, // Added to dependencies
  ]);

  const options = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: true,
        position: 'top',
      },
      tooltip: {
        callbacks: {
          label: function (context) {
            if (selectedViewMode === 'Bezettingspercentage') {
              return `${context.parsed.y}%`;
            } else {
              return `${context.parsed.y} gasten`;
            }
          },
        },
      },
    },
    scales: {
      y: {
        beginAtZero: true,
        max: selectedViewMode === 'Bezettingspercentage' ? 100 : undefined,
        title: {
          display: true,
          text:
            selectedViewMode === 'Bezettingspercentage'
              ? 'Bezettingsgraad (%)'
              : 'Aantal Gasten',
        },
        stacked: selectedViewMode === 'Algemeen' && selectedShift === 'Dag',
      },
      x: {
        title: {
          display: true,
          text:
            weekOrMonthView === 'week' ? 'Dag van de Week' : 'Dag van de Maand',
        },
        stacked: selectedViewMode === 'Algemeen' && selectedShift === 'Dag',
      },
    },
  };

  return (
    <div className="bar-chart-view">
      <Bar data={chartData} options={options} />
    </div>
  );
};

export default BarChartView;


--- CalendarDay.js ---
// CalendarDay.js

import React from 'react';
import TimeOfDayBox from './TimeOfDayBox';
import './css/calendarDay.css';
import { maxCapacity } from './reservationData';

const CalendarDay = ({
  date,
  currentMonth,
  reservationsByDate,
  onDateClick,
  maxOccupation,
  maxPrediction,
  selectedShift,
  selectedViewMode,
  predictionsByDate,
  isHovered,
  onMouseEnter,
  onMouseLeave,
  fadeOut,
}) => {
  const dateString = date.toISOString().split('T')[0];
  const reservations = reservationsByDate[dateString] || [];

  const totalGuestsByTimeSlot = [0, 0, 0]; // Morning, Afternoon, Evening

  reservations.forEach((reservation) => {
    if (
      selectedShift === 'Dag' ||
      (selectedShift === 'Ochtend' && reservation.timeSlot === 0) ||
      (selectedShift === 'Middag' && reservation.timeSlot === 1) ||
      (selectedShift === 'Avond' && reservation.timeSlot === 2)
    ) {
      totalGuestsByTimeSlot[reservation.timeSlot] += reservation.aantalGasten;
    }
  });

  const today = new Date();
  const isToday = date.toDateString() === today.toDateString();
  const isPastDate = date < today && !isToday;

  const handleClick = () => {
    if (reservations.length > 0) {
      onDateClick(date);
    }
  };

  let totalGuests = totalGuestsByTimeSlot.reduce((a, b) => a + b, 0);

  // Adjust background color and data based on selectedViewMode
  let backgroundColor = '';
  let content = null;

  if (selectedViewMode === 'Bezettingsgraad') {
    let heatmapIntensity = 0;
    if (maxOccupation > 0) {
      heatmapIntensity = totalGuests / maxOccupation;
    }

    // Adjust background color for shift
    let heatmapColor = 'rgba(0, 123, 255,'; // default blue
    let textColor = 'white';
    if (selectedShift === 'Ochtend') {
      heatmapColor = 'rgba(24, 40, 37,'; // '#182825'
      textColor = 'white';
    } else if (selectedShift === 'Middag') {
      heatmapColor = 'rgba(1, 111, 185,'; // '#016FB9'
      textColor = 'black';
    } else if (selectedShift === 'Avond') {
      heatmapColor = 'rgba(34, 174, 209,'; // '#22AED1'
      textColor = 'black';
    } else {
      heatmapColor = 'rgba(0, 123, 255,'; // default blue
      textColor = 'white';
    }

    backgroundColor = `${heatmapColor} ${heatmapIntensity})`;

    if (isHovered && totalGuests > 0) {
      content = (
        <div className="heatmap-total-guests" style={{ color: textColor }}>
          <strong>{totalGuests}</strong>
        </div>
      );
    }
  } else if (selectedViewMode === 'Bezettingspercentage') {
    let occupancyRate = 0;
    if (maxCapacity > 0) {
      occupancyRate = (totalGuests / maxCapacity) * 100;
    }
    backgroundColor = 'white'; // or any default color
    content = (
      <div className="occupancy-percentage">
        <strong>{occupancyRate.toFixed(1)}%</strong>
      </div>
    );
  } else if (selectedViewMode === 'Voorspelling') {
    const prediction = predictionsByDate[dateString] || 0;

    let predictionIntensity = 0;
    if (maxPrediction > 0) {
      predictionIntensity = prediction / maxPrediction;
    }

    let predictionColor = 'rgba(255, 0, 0,'; // shades of red
    backgroundColor = `${predictionColor} ${predictionIntensity})`;

    if (isHovered && prediction > 0) {
      content = (
        <div className="prediction-total-guests">
          <strong>{prediction.toFixed(1)}</strong>
        </div>
      );
    }
  }

  const opacity =
    isHovered
      ? 1
      : fadeOut
      ? 0.5
      : selectedViewMode === 'Bezettingsgraad' || selectedViewMode === 'Voorspelling'
      ? 1
      : isPastDate && !isHovered
      ? 0.5
      : 1;

  return (
    <div
      className={`calendar-day ${currentMonth ? '' : 'calendar-day--disabled'} ${
        isPastDate ? 'calendar-day--past' : ''
      } ${isToday ? 'calendar-day--today' : ''} ${
        selectedViewMode !== 'Algemeen' ? 'special-mode' : ''
      }`}
      onClick={handleClick}
      style={{
        backgroundColor,
        opacity,
      }}
      onMouseEnter={onMouseEnter}
      onMouseLeave={onMouseLeave}
    >
      <div className="calendar-day-number">{date.getDate()}</div>
      {content}
      {selectedViewMode === 'Algemeen' && (
        <div className="time-of-day-boxes">
          {totalGuestsByTimeSlot.map((totalGuests, index) => {
            if (totalGuests > 0) {
              if (
                selectedShift === 'Dag' ||
                (selectedShift === 'Ochtend' && index === 0) ||
                (selectedShift === 'Middag' && index === 1) ||
                (selectedShift === 'Avond' && index === 2)
              ) {
                return (
                  <TimeOfDayBox
                    key={index}
                    timeSlot={index}
                    totalGuests={totalGuests}
                    isPastDate={isPastDate}
                  />
                );
              }
            }
            return null;
          })}
        </div>
      )}
    </div>
  );
};

export default CalendarDay;


--- CalendarGrid.js ---
// CalendarGrid.js

import React, { useState, useEffect } from 'react';
import CalendarDay from './CalendarDay';
import './css/calendarGrid.css';
import { motion } from 'framer-motion';

const CalendarGrid = ({
  dates, // Receive dates from props
  currentDate,
  reservationsByDate,
  onDateClick,
  selectedShift,
  selectedViewMode,
  predictionsByDate,
  weekOrMonthView,
}) => {
  const [hoveredDayIndex, setHoveredDayIndex] = useState(null);
  const [maxOccupation, setMaxOccupation] = useState(0);
  const [maxPrediction, setMaxPrediction] = useState(0);

  // Calculate max occupation for Bezettingsgraad and prediction
  useEffect(() => {
    if (
      selectedViewMode === 'Bezettingsgraad' ||
      selectedViewMode === 'Bezettingspercentage' ||
      selectedViewMode === 'Voorspelling'
    ) {
      const occupations = dates.map(({ date }) => {
        const dateString = date.toISOString().split('T')[0];
        const reservations = reservationsByDate[dateString] || [];
        let totalGuests = 0;

        reservations.forEach((res) => {
          if (
            selectedShift === 'Dag' ||
            (selectedShift === 'Ochtend' && res.timeSlot === 0) ||
            (selectedShift === 'Middag' && res.timeSlot === 1) ||
            (selectedShift === 'Avond' && res.timeSlot === 2)
          ) {
            totalGuests += res.aantalGasten;
          }
        });

        return totalGuests;
      });
      setMaxOccupation(Math.max(...occupations));

      // For Voorspelling, set maxPrediction
      if (selectedViewMode === 'Voorspelling') {
        setMaxPrediction(Math.max(...Object.values(predictionsByDate)));
      } else {
        setMaxPrediction(0);
      }
    }
  }, [dates, reservationsByDate, selectedShift, selectedViewMode, predictionsByDate]);

  const dayNames = ['Ma', 'Di', 'Wo', 'Do', 'Vr', 'Za', 'Zo']; // Dutch day names

  // Animation variants
  const containerVariants = {
    hidden: {},
    visible: {
      transition: {
        staggerChildren: 0.02,
      },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1 },
  };

  return (
    <motion.div
      className="calendar-grid"
      initial="hidden"
      animate="visible"
      variants={containerVariants}
      key={`${currentDate.toString()}-${selectedViewMode}-${selectedShift}`}
    >
      {/* Calendar Header */}
      <div className="calendar-grid-header">
        {dayNames.map((day, index) => (
          <div key={index}>{day}</div>
        ))}
      </div>

      {/* Calendar Body */}
      <div className="calendar-grid-body">
        {dates.map(({ date, currentMonth }, index) => (
          <motion.div key={index} variants={itemVariants}>
            <CalendarDay
              date={date}
              currentMonth={currentMonth}
              reservationsByDate={reservationsByDate}
              onDateClick={onDateClick}
              maxOccupation={maxOccupation}
              maxPrediction={maxPrediction}
              selectedShift={selectedShift}
              selectedViewMode={selectedViewMode}
              predictionsByDate={predictionsByDate}
              isHovered={hoveredDayIndex === index}
              onMouseEnter={() => setHoveredDayIndex(index)}
              onMouseLeave={() => setHoveredDayIndex(null)}
              fadeOut={hoveredDayIndex !== null && hoveredDayIndex !== index}
            />
          </motion.div>
        ))}
      </div>
    </motion.div>
  );
};

export default CalendarGrid;


--- CalendarHeader.js ---
// CalendarHeader.js

import React, { useState, useRef, useEffect } from 'react';
import './css/calendarHeader.css';
import { FaChevronLeft, FaChevronRight, FaChartBar, FaChevronDown, FaFile } from 'react-icons/fa';
import ShiftSelector from './ShiftSelector';
import ViewModeSelector from './ViewModeSelector';

const CalendarHeader = ({
  currentDate,
  onPrev,
  onNext,
  selectedShift,
  setSelectedShift,
  selectedViewMode,
  setSelectedViewMode,
  isChartView,
  toggleChartView,
  weekOrMonthView,
  setWeekOrMonthView,
  onGenerateReport, // Added prop
}) => {
  const monthNames = [
    'januari',
    'februari',
    'maart',
    'april',
    'mei',
    'juni',
    'juli',
    'augustus',
    'september',
    'oktober',
    'november',
    'december',
  ];

  // Utility function to get the Monday of the week for a given date
  const getMonday = (date) => {
    const d = new Date(date);
    const day = d.getDay();
    const diff = day === 0 ? -6 : 1 - day;
    d.setDate(d.getDate() + diff);
    d.setHours(0, 0, 0, 0);
    return d;
  };

  const currentWeekStart = getMonday(currentDate);

  const [isViewOptionsOpen, setIsViewOptionsOpen] = useState(false);
  const viewOptionsRef = useRef(null);
  const viewButtonRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        viewOptionsRef.current &&
        !viewOptionsRef.current.contains(event.target) &&
        viewButtonRef.current &&
        !viewButtonRef.current.contains(event.target)
      ) {
        setIsViewOptionsOpen(false);
      }
    };

    if (isViewOptionsOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    } else {
      document.removeEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isViewOptionsOpen]);

  const getWeekTitle = () => {
    const start = new Date(currentWeekStart);
    const end = new Date(start);
    end.setDate(start.getDate() + 6); // End on Sunday

    const startDay = start.getDate();
    const endDay = end.getDate();
    const startMonth = monthNames[start.getMonth()];
    const endMonth = monthNames[end.getMonth()];
    const year = start.getFullYear();

    if (start.getMonth() === end.getMonth()) {
      return `${startDay} - ${endDay} ${startMonth} ${year}`;
    } else {
      return `${startDay} ${startMonth} - ${endDay} ${endMonth} ${year}`;
    }
  };

  const getMonthTitle = () => {
    const month = monthNames[currentDate.getMonth()];
    const year = currentDate.getFullYear();

    return `${month} ${year}`;
  };

  const handleViewOptionSelection = (option) => {
    setWeekOrMonthView(option);
    setIsViewOptionsOpen(false);
  };

  return (
    <div className="calendar-header">
      <div className="header-titles">
        <button className="nav-button" onClick={onPrev}>
          <FaChevronLeft size={24} />
        </button>
        <button
          className="nav-button"
          onClick={onNext}
          style={{ marginRight: '24px' }}
        >
          <FaChevronRight size={24} />
        </button>
        <div className="header-title-container">
          <h2>
            {weekOrMonthView === 'week'
              ? getWeekTitle()
              : getMonthTitle()}
          </h2>
          <button
            className="view-options-button"
            onClick={() => setIsViewOptionsOpen(!isViewOptionsOpen)}
            ref={viewButtonRef}
            aria-label="Toggle view options"
          >
            <FaChevronDown size={16} />
          </button>
          {isViewOptionsOpen && (
            <div className="view-options-container" ref={viewOptionsRef}>
              <div
                className="view-option"
                onClick={() => handleViewOptionSelection('week')}
              >
                Week
              </div>
              <div
                className="view-option"
                onClick={() => handleViewOptionSelection('month')}
              >
                Maand
              </div>
            </div>
          )}
        </div>
      </div>

      <div className="header-buttons">
        <button
          onClick={onGenerateReport} // Updated onClick handler
          className="standard-button blue toggle-button"
          title="Bekijk Rapport"
        >
          <FaFile size={16} />
        </button>

        <button
          onClick={toggleChartView}
          className="standard-button blue toggle-button"
          title={isChartView ? 'Terug naar Kalender' : 'Bekijk Bar Chart'}
        >
          <FaChartBar size={16} />
        </button>

        <ShiftSelector
          selectedShift={selectedShift}
          setSelectedShift={setSelectedShift}
        />
        <ViewModeSelector
          selectedViewMode={selectedViewMode}
          setSelectedViewMode={setSelectedViewMode}
        />
      </div>
    </div>
  );
};

export default CalendarHeader;


--- Hooks/usePredictions.js ---
// src/components/Calendar/Hooks/usePredictions.js

import { useState, useEffect } from 'react';
import { median, mean } from '../Utils/predictionUtils';
import { formatDate, getStartAndEndOfMonth, generateDatesArray } from '../Utils/dateUtils';
import reservations, { maxCapacity } from '../reservationData';

const usePredictions = (
  currentDate,
  reservationsByDate,
  selectedShift,
  selectedViewMode
) => {
  const [predictionsByDate, setPredictionsByDate] = useState({});

  // Parameters for prediction algorithm weights
  const WEIGHT_MEDIAN14 = 0;
  const WEIGHT_MEDIAN20 = 0;
  const WEIGHT_AVERAGE90 = 1;
  const WEIGHT_CURRENT_RESERVATIONS = 0.2;
  const MULTIPLIER_BASE_PREDICTION = 2;

  useEffect(() => {
    if (selectedViewMode !== 'Voorspelling') {
      setPredictionsByDate({});
      return;
    }

    const { start, end } = getStartAndEndOfMonth(currentDate);
    const datesArray = generateDatesArray(start, end);
    const predictions = {};
    const today = new Date();

    // Helper function to get reservations for a date
    const getReservationsForDate = (dateStr) => {
      const reservations = reservationsByDate[dateStr] || [];
      return reservations.filter((res) => {
        return (
          selectedShift === 'Dag' ||
          (selectedShift === 'Ochtend' && res.timeSlot === 0) ||
          (selectedShift === 'Middag' && res.timeSlot === 1) ||
          (selectedShift === 'Avond' && res.timeSlot === 2)
        );
      });
    };

    // Prepare historical data
    const historicalData = [];

    // Build historical data for all dates
    datesArray.forEach((date) => {
      const dateStr = formatDate(date);
      const reservationsForDate = getReservationsForDate(dateStr);
      const totalGuests = reservationsForDate.reduce((sum, res) => sum + res.aantalGasten, 0);
      historicalData.push({ date, totalGuests });
    });

    // Start predictions from tomorrow
    const startIndex = datesArray.findIndex((date) => date > today);
    if (startIndex === -1) {
      setPredictionsByDate({});
      return;
    }

    // Use a copy of historicalData to avoid mutating the original during prediction
    const extendedHistoricalData = [...historicalData];

    for (let i = startIndex; i < datesArray.length; i++) {
      const currentDate = datesArray[i];
      const currentDateStr = formatDate(currentDate);
      const currentReservations = getReservationsForDate(currentDateStr);
      const currentTotalGuests = currentReservations.reduce((sum, res) => sum + res.aantalGasten, 0);

      // Collect data for medians and average
      const past14Days = extendedHistoricalData.slice(Math.max(0, i - 14), i);
      const past20Days = extendedHistoricalData
        .slice(Math.max(0, i - 20), i)
        .filter((data) => data.totalGuests > 0);
      const past90DaysSameDay = extendedHistoricalData.filter((data, idx) => {
        return (
          data.date.getDay() === currentDate.getDay() &&
          idx < i &&
          (currentDate - data.date) / (1000 * 60 * 60 * 24) <= 90
        );
      });

      // Calculate medians and average
      const median14Values = past14Days.map((d) => d.totalGuests);
      const median14 = median14Values.length ? median(median14Values) : 0;

      const median20Values = past20Days.map((d) => d.totalGuests);
      const median20 = median20Values.length ? median(median20Values) : 0;

      const average90Values = past90DaysSameDay.map((d) => d.totalGuests);
      const average90 = average90Values.length ? mean(average90Values) : 0;

      // Calculate base prediction
      const factors = [];
      if (median14) factors.push(median14 * WEIGHT_MEDIAN14);
      if (median20) factors.push(median20 * WEIGHT_MEDIAN20);
      if (average90) factors.push(average90 * WEIGHT_AVERAGE90);

      const factorsCount = factors.length || 1;
      const basePrediction =
        (factors.reduce((a, b) => a + b, 0) / factorsCount) * MULTIPLIER_BASE_PREDICTION;

      const adjustedCurrentReservations = (currentTotalGuests / 5) * WEIGHT_CURRENT_RESERVATIONS;

      let prediction = basePrediction + adjustedCurrentReservations;

      // Use max between prediction and current reservations
      if (prediction < currentTotalGuests) {
        prediction = currentTotalGuests;
      }

      // Cap prediction at maxCapacity
      if (prediction > maxCapacity) {
        prediction = maxCapacity;
      }

      // Round prediction
      if (prediction < 1) {
        prediction = 0;
      }

      predictions[currentDateStr] = Math.round(prediction);

      // Update extendedHistoricalData with predicted value
      extendedHistoricalData.push({ date: currentDate, totalGuests: prediction });
    }

    setPredictionsByDate(predictions);
  }, [currentDate, reservationsByDate, selectedShift, selectedViewMode]);

  return predictionsByDate;
};

export default usePredictions;


--- Hooks/useReportData.js ---
// src/hooks/useReportData.js

import { useState, useEffect } from 'react';
import {
  calculateMedian,
  calculateAverage,
} from '../Utils/reportUtils';

/**
 * Custom hook to generate report data and calculate statistics.
 *
 * @param {Array} dates - Array of date objects.
 * @param {Object} reservationsByDate - Reservations mapped by date string.
 * @param {String} selectedShift - Selected shift ('Dag', 'Ochtend', 'Middag', 'Avond').
 * @param {Boolean} autoGenerate - Flag to auto-generate report.
 * @returns {Object} - Contains report data, statistics, and loading state.
 */
const useReportData = (dates, reservationsByDate, selectedShift, autoGenerate) => {
  const [reportGenerated, setReportGenerated] = useState(autoGenerate);
  const [loading, setLoading] = useState(false);
  const [stats, setStats] = useState({});
  const [totalGuests, setTotalGuests] = useState(0); // Total guests over the period

  useEffect(() => {
    if (autoGenerate) {
      generateReportData();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [dates, reservationsByDate, selectedShift, autoGenerate]);

  const handleGenerateReport = () => {
    setLoading(true);
    setTimeout(() => {
      generateReportData();
      setLoading(false);
      setReportGenerated(true);
    }, 2000); // Simulate 2 seconds loading time
  };

  const generateReportData = () => {
    let totals = [0, 0, 0]; // [Morning, Afternoon, Evening]
    let dailyTotalsTemp = []; // To store total guests per day
    let totalGuestsTemp = 0; // Total guests over the period

    dates.forEach(({ date }) => {
      const dateString = date.toISOString().split('T')[0];
      const reservations = reservationsByDate[dateString] || [];
      let dayTotal = 0;
      let shiftTotals = [0, 0, 0];

      reservations.forEach((reservation) => {
        if (
          selectedShift === 'Dag' ||
          (selectedShift === 'Ochtend' && reservation.timeSlot === 0) ||
          (selectedShift === 'Middag' && reservation.timeSlot === 1) ||
          (selectedShift === 'Avond' && reservation.timeSlot === 2)
        ) {
          totals[reservation.timeSlot] += reservation.aantalGasten;
          shiftTotals[reservation.timeSlot] += reservation.aantalGasten;
          dayTotal += reservation.aantalGasten;
        }
      });

      totalGuestsTemp += dayTotal;

      dailyTotalsTemp.push({
        date,
        total: dayTotal,
        shiftTotals,
      });
    });

    setTotalGuests(totalGuestsTemp);

    // Calculate statistical data
    if (dailyTotalsTemp.length > 0) {
      const guestCounts = dailyTotalsTemp.map((day) => day.total);
      const min = Math.min(...guestCounts);
      const max = Math.max(...guestCounts);
      const median = calculateMedian(guestCounts);
      const average = calculateAverage(guestCounts);
      const highest = dailyTotalsTemp.find((day) => day.total === max);
      const lowest = dailyTotalsTemp.find((day) => day.total === min);

      setStats({
        minGuests: min,
        maxGuests: max,
        medianGuests: median,
        averageGuests: average.toFixed(2),
        lowestDay: lowest ? lowest.date : null,
        highestDay: highest ? highest.date : null,
      });
    }

    setReportGenerated(true);
  };

  return {
    reportGenerated,
    loading,
    handleGenerateReport,
    stats,
    totalGuests,
    setReportGenerated, // In case you need to reset or control from the component
  };
};

export default useReportData;


--- Hooks/useReservations.js ---
// /src/Components/Calendar/Hooks/useReservations.js

import { useState, useEffect } from 'react';
import reservations from '../reservationData';

const useReservations = () => {
  const [reservationsByDate, setReservationsByDate] = useState({});

  useEffect(() => {
    const resByDate = {};
    reservations.forEach((reservation) => {
      const date = reservation.date;
      if (!resByDate[date]) {
        resByDate[date] = [];
      }
      resByDate[date].push(reservation);
    });
    setReservationsByDate(resByDate);
  }, []);

  return reservationsByDate;
};

export default useReservations;


--- MonthReport.js ---
// src/components/MonthReport.js

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FaChevronDown } from 'react-icons/fa';
import useReportData from './Hooks/useReportData';
import {
  groupDatesIntoWeeks,
  getDutchDateString,
  getDutchDayName, // Ensure this is imported from reportUtils.js
  statLabels,
} from './Utils/reportUtils';

// CollapsibleBlock Component remains unchanged
const CollapsibleBlock = ({ weekNumber, dates, reservationsByDate, selectedShift }) => {
  const [isExpanded, setIsExpanded] = useState(false);

  // Generate week label
  const weekLabel = `Week ${weekNumber}`;

  // Function to calculate total guests per day
  const calculateDailyGuests = (date) => {
    const dateString = date.toISOString().split('T')[0];
    const reservations = reservationsByDate[dateString] || [];
    let totalGuests = 0;

    reservations.forEach((reservation) => {
      if (
        selectedShift === 'Dag' ||
        (selectedShift === 'Ochtend' && reservation.timeSlot === 0) ||
        (selectedShift === 'Middag' && reservation.timeSlot === 1) ||
        (selectedShift === 'Avond' && reservation.timeSlot === 2)
      ) {
        totalGuests += reservation.aantalGasten;
      }
    });

    return totalGuests;
  };

  // Calculate total guests for the week
  const totalGuestsForWeek = dates.reduce((total, day) => {
    return total + calculateDailyGuests(day.date);
  }, 0);

  return (
    <div className="collapsible-block">
      <div
        className="block-header"
        onClick={() => setIsExpanded(!isExpanded)}
      >
        <div className="block-title">{weekLabel}</div>
        <FaChevronDown
          className={`chevron-icon ${isExpanded ? 'expanded' : ''}`}
        />
      </div>
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            className="block-content"
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
          >
            <table className="week-table">
              <thead>
                <tr>
                  <th>Datum</th>
                  <th>Dag</th>
                  <th>Aantal Gasten</th>
                </tr>
              </thead>
              <tbody>
                {dates.map((day, index) => (
                  <tr key={index}>
                    <td>{getDutchDateString(day.date)}</td>
                    <td>{getDutchDayName(day.date)}</td>
                    <td>{calculateDailyGuests(day.date)}</td>
                  </tr>
                ))}
                <tr className="totals-styled">
                  <td><strong>Totaal</strong></td>
                  <td></td>
                  <td><strong>{totalGuestsForWeek}</strong></td>
                </tr>
              </tbody>
            </table>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

const MonthReport = ({ dates, reservationsByDate, selectedShift, autoGenerate = false }) => {
  const [weeks, setWeeks] = useState([]); // Array of weeks, each week is an array of dates

  const {
    reportGenerated,
    loading,
    handleGenerateReport,
    stats,
    totalGuests,
  } = useReportData(dates, reservationsByDate, selectedShift, autoGenerate);

  useEffect(() => {
    // Group dates into weeks
    const groupedWeeks = groupDatesIntoWeeks(dates);
    setWeeks(groupedWeeks);
  }, [dates]);

  // Animation variants
  const containerVariants = {
    hidden: {},
    visible: {
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const rowVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1 },
  };

  return (
    <div className="month-report">
      {!reportGenerated && !loading && !autoGenerate && (
        <div
          className="generate-report-text"
          onClick={handleGenerateReport}
          style={{ color: 'var(--color-blue)', cursor: 'pointer' }}
        >
          Genereer rapport
        </div>
      )}

      {loading && (
        <div className="loading-container">
          <div className="spinner"></div>
          <div className="progress-bar"></div>
          <div>Laden...</div>
        </div>
      )}

      {(reportGenerated || autoGenerate) && (
        <motion.div
          className="calendar-report-table"
          initial="hidden"
          animate="visible"
          variants={containerVariants}
        >
          {/* Updated Title Section */}
          <div className="calendar-report-title">
            Maandrapport {selectedShift !== 'Dag' && `- ${selectedShift}`}
          </div>

          {/* Render collapsible blocks for each week */}
          <div className="weeks-container">
            {weeks.map((weekDates, weekIndex) => (
              <CollapsibleBlock
                key={weekIndex}
                weekNumber={weekIndex + 1}
                dates={weekDates}
                reservationsByDate={reservationsByDate}
                selectedShift={selectedShift}
              />
            ))}
          </div>

          {/* Add margin between weeks and statistics */}
          <div className="statistics-separator"></div>

          {/* Render statistical data for the entire month */}
          <div className="statistical-data">
            <table>
              <thead>
                <tr>
                  <th>Statistiek</th>
                  <th>Waarde</th>
                </tr>
              </thead>
              <tbody>
                {Object.entries(stats).map(([key, value], index) => (
                  <motion.tr key={index} variants={rowVariants}>
                    <td>{statLabels[key]}</td>
                    <td>
                      {key.includes('Day') && value
                        ? getDutchDayName(value)
                        : value}
                    </td>
                  </motion.tr>
                ))}
                <motion.tr variants={rowVariants} className="totals-styled">
                  <td><strong>Totaal aantal gasten</strong></td>
                  <td>{totalGuests}</td>
                </motion.tr>
              </tbody>
            </table>
          </div>
        </motion.div>
      )}
    </div>
  );
};

export default MonthReport;


--- ReservationDetailsModal.js ---
// ReservationDetailsModal.js

import React, { useState } from 'react';
import ModalWithoutTabs from '../../Components/Structural/Modal/Standard'; // Adjust the import path as needed
import { motion, AnimatePresence } from 'framer-motion';
import { FaChevronDown } from 'react-icons/fa';
import './css/reservationDetailsModal.css';
import { format } from 'date-fns';
import { nl } from 'date-fns/locale';

const ReservationDetailsModal = ({ reservationsData, onClose }) => {
  const { date, reservations } = reservationsData;
  const formattedDate = format(new Date(date), 'd MMMM yyyy', { locale: nl });

  return (
    <ModalWithoutTabs
      onClose={onClose}
      content={
        <div className="reservation-modal-content">
          <h2>Reservaties - {formattedDate}</h2>
          <div className="reservation-table">
            {reservations.map((reservation, index) => (
              <ReservationRow key={index} reservation={reservation} />
            ))}
          </div>
        </div>
      }
    />
  );
};

const ReservationRow = ({ reservation }) => {
  const [isExpanded, setIsExpanded] = useState(false);

  return (
    <div className="reservation-row">
      <div className="reservation-main-info" onClick={() => setIsExpanded(!isExpanded)}>
        <FaChevronDown className={`arrow-icon ${isExpanded ? 'expanded' : ''}`} />
        <span>
          <strong>{reservation.aantalGasten} gasten - {reservation.time}</strong> - {reservation.fullName}
        </span>
      </div>
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            className="reservation-details"
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
          >
            <div>Email: {reservation.email}</div>
            <div>Telefoon: {reservation.phone}</div>
            {reservation.extra && <div>Extra: {reservation.extra}</div>}
            <div className="reservation-buttons">
              <button className="standard-button red">Verwijderen</button>
              <button className="standard-button blue">Bewerken</button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default ReservationDetailsModal;


--- ShiftSelector.js ---
// ShiftSelector.js

import React, { useRef, useEffect } from 'react';
import { FaList } from 'react-icons/fa';
import './css/shiftSelector.css';

const ShiftSelector = ({
  selectedShift,
  setSelectedShift,
}) => {
  const [isShiftOptionsOpen, setIsShiftOptionsOpen] = React.useState(false);
  const shiftButtonRef = useRef(null);
  const shiftOptionsRef = useRef(null);

  const shifts = ['Dag', 'Ochtend', 'Middag', 'Avond'];

  // Handle Click Outside for Shift Options
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        shiftOptionsRef.current &&
        !shiftOptionsRef.current.contains(event.target) &&
        shiftButtonRef.current &&
        !shiftButtonRef.current.contains(event.target)
      ) {
        setIsShiftOptionsOpen(false);
      }
    };

    if (isShiftOptionsOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    } else {
      document.removeEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isShiftOptionsOpen]);

  const handleShiftSelection = (shift) => {
    setSelectedShift(shift);
    setIsShiftOptionsOpen(false);
  };

  const toggleShiftOptions = () => {
    setIsShiftOptionsOpen(!isShiftOptionsOpen);
  };

  return (
	<div className="shift-selector-calendar-map">
    <div className="shift-selector">
      <button
        onClick={toggleShiftOptions}
        className="standard-button blue shift-button"
        ref={shiftButtonRef}
      >
        <FaList className="shift-button-icon" />
        {selectedShift}
      </button>

      {isShiftOptionsOpen && (
        <div className="shift-options-container" ref={shiftOptionsRef}>
          {shifts.map((shift) => (
            <div
              key={shift}
              className="shift-option"
              onClick={() => handleShiftSelection(shift)}
            >
              {shift}
            </div>
          ))}
        </div>
      )}
    </div>
	</div>
  );
};

export default ShiftSelector;


--- TimeOfDayBox.js ---
// TimeOfDayBox.js

import React from 'react';
import './css/timeOfDay.css';

const TimeOfDayBox = ({ timeSlot, totalGuests, isPastDate }) => {
  const timeSlotNames = ['Ochtend', 'Middag', 'Avond'];
  const timeSlotColors = ['#182825', '#016FB9', '#22AED1'];
  const backgroundColor = timeSlotColors[timeSlot];
  const opacity = isPastDate ? 0.5 : 1;

  return (
    <div
      className="time-of-day-box"
      style={{ backgroundColor, opacity }}
    >
      <span>{timeSlotNames[timeSlot]}: {totalGuests}</span>
    </div>
  );
};

export default TimeOfDayBox;


--- Utils/dateUtils.js ---
// /src/Components/Calendar/Utils/dateUtils.js

export const formatDate = (date) => date.toISOString().split('T')[0];

export const getStartAndEndOfMonth = (date) => {
  const start = new Date(date.getFullYear(), date.getMonth(), 1);
  const end = new Date(date.getFullYear(), date.getMonth() + 1, 0);
  return { start, end };
};

export const generateDatesArray = (start, end) => {
  const dates = [];
  for (let i = 1; i <= end.getDate(); i++) {
    dates.push(new Date(start.getFullYear(), start.getMonth(), i));
  }
  return dates;
};


--- Utils/predictionUtils.js ---
// /src/Components/Calendar/Utils/predictionUtils.js

export const median = (values) => {
	if (values.length === 0) return 0;
	const sorted = [...values].sort((a, b) => a - b);
	const half = Math.floor(sorted.length / 2);
	if (sorted.length % 2) return sorted[half];
	return (sorted[half - 1] + sorted[half]) / 2.0;
  };
  
  export const mean = (values) => {
	if (values.length === 0) return 0;
	return values.reduce((a, b) => a + b, 0) / values.length;
  };
  

--- Utils/reportUtils.js ---
// src/utils/reportUtils.js

// Helper functions for statistical calculations
export const calculateMedian = (numbers) => {
	const sorted = [...numbers].sort((a, b) => a - b);
	const mid = Math.floor(sorted.length / 2);
	return sorted.length % 2 !== 0
	  ? sorted[mid]
	  : (sorted[mid - 1] + sorted[mid]) / 2;
  };
  
  export const calculateAverage = (numbers) =>
	numbers.reduce((acc, val) => acc + val, 0) / numbers.length;
  
  export const calculateVariance = (numbers, mean) => {
	const squaredDiffs = numbers.map((val) => (val - mean) ** 2);
	return squaredDiffs.reduce((acc, val) => acc + val, 0) / numbers.length;
  };
  
  // Helper functions for date formatting
  export const getDutchDateString = (date) =>
	date.toLocaleDateString('nl-NL', { day: 'numeric', month: 'long' });
  
  export const getDutchDayName = (date) =>
	date.toLocaleDateString('nl-NL', { weekday: 'long' });
  
  // Function to group dates into weeks
  export const groupDatesIntoWeeks = (dates) => {
	const weeks = [];
	for (let i = 0; i < dates.length; i += 7) {
	  weeks.push(dates.slice(i, i + 7));
	}
	return weeks;
  };
  
  // Labels for statistics
  export const statLabels = {
	minGuests: 'Minimaal aantal gasten',
	maxGuests: 'Maximaal aantal gasten',
	medianGuests: 'Mediaan aantal gasten',
	averageGuests: 'Gemiddeld aantal gasten',
	varianceGuests: 'Variantie aantal gasten',
	lowestDay: 'Laagste dag',
	highestDay: 'Hoogste dag',
  };
  

--- ViewModeSelector.js ---
// ViewModeSelector.js

import React, { useRef, useEffect } from 'react';
import { FaLayerGroup } from 'react-icons/fa';
import './css/viewModeSelector.css';

const ViewModeSelector = ({
  selectedViewMode,
  setSelectedViewMode,
}) => {
  const [isViewModeOptionsOpen, setIsViewModeOptionsOpen] = React.useState(false);
  const viewModeButtonRef = useRef(null);
  const viewModeOptionsRef = useRef(null);

  const viewModes = ['Algemeen', 'Bezettingsgraad', 'Bezettingspercentage', 'Voorspelling'];

  // Handle Click Outside for View Mode Options
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        viewModeOptionsRef.current &&
        !viewModeOptionsRef.current.contains(event.target) &&
        viewModeButtonRef.current &&
        !viewModeButtonRef.current.contains(event.target)
      ) {
        setIsViewModeOptionsOpen(false);
      }
    };

    if (isViewModeOptionsOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    } else {
      document.removeEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isViewModeOptionsOpen]);

  const handleViewModeSelection = (mode) => {
    setSelectedViewMode(mode);
    setIsViewModeOptionsOpen(false);
  };

  const toggleViewModeOptions = () => {
    setIsViewModeOptionsOpen(!isViewModeOptionsOpen);
  };

  return (
    <div className="view-mode-selector">
      <button
        onClick={toggleViewModeOptions}
        className="standard-button blue view-mode-button"
        ref={viewModeButtonRef}
      >
        <FaLayerGroup className="view-mode-button-icon" />
        {selectedViewMode}
      </button>

      {isViewModeOptionsOpen && (
        <div className="view-mode-options-container" ref={viewModeOptionsRef}>
          {viewModes.map((mode) => (
            <div
              key={mode}
              className="view-mode-option"
              onClick={() => handleViewModeSelection(mode)}
            >
              {mode}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default ViewModeSelector;


--- WeekReport.js ---
// src/components/WeekReport.js

import React from 'react';
import './css/weekReport.css';
import { motion } from 'framer-motion';
import useReportData from './Hooks/useReportData';
import { getDutchDayName, statLabels } from './Utils/reportUtils';

// Define the available shifts
const shifts = [
  { label: 'Ochtend', timeSlot: 0 },
  { label: 'Middag', timeSlot: 1 },
  { label: 'Avond', timeSlot: 2 },
];

const WeekReport = ({ dates, reservationsByDate, selectedShift, autoGenerate = false }) => {
  const {
    reportGenerated,
    loading,
    handleGenerateReport,
    stats,
    totalGuests,
  } = useReportData(dates, reservationsByDate, selectedShift, autoGenerate);

  // Define which shifts to display based on selectedShift
  const visibleShifts = selectedShift === 'Dag'
    ? shifts
    : shifts.filter(shift => shift.label === selectedShift);

  // Calculate total guests by shift
  const totalGuestsByShift = [0, 0, 0]; // [Morning, Afternoon, Evening]
  dates.forEach(({ date }) => {
    const dateString = date.toISOString().split('T')[0];
    const reservations = reservationsByDate[dateString] || [];

    reservations.forEach((reservation) => {
      if (
        selectedShift === 'Dag' ||
        (selectedShift === 'Ochtend' && reservation.timeSlot === 0) ||
        (selectedShift === 'Middag' && reservation.timeSlot === 1) ||
        (selectedShift === 'Avond' && reservation.timeSlot === 2)
      ) {
        totalGuestsByShift[reservation.timeSlot] += reservation.aantalGasten;
      }
    });
  });

  // Calculate total guests for all visible shifts
  const totalGuestsAllShifts = visibleShifts.reduce(
    (sum, shift) => sum + totalGuestsByShift[shift.timeSlot],
    0
  );

  // Animation variants
  const containerVariants = {
    hidden: {},
    visible: {
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const rowVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1 },
  };

  return (
    <div className="week-report">
      {!reportGenerated && !loading && !autoGenerate && (
        <div
          className="generate-report-text"
          onClick={handleGenerateReport}
          style={{ color: 'var(--color-blue)', cursor: 'pointer' }}
        >
          Genereer rapport
        </div>
      )}

      {loading && (
        <div className="loading-container">
          <div className="spinner"></div>
          <div className="progress-bar"></div>
          <div>Laden...</div>
        </div>
      )}

      {(reportGenerated || autoGenerate) && (
        <motion.div
          className="calendar-report-table"
          initial="hidden"
          animate="visible"
          variants={containerVariants}
        >
          {/* Updated Title Section */}
          <div className="calendar-report-title">
            Weekrapport {selectedShift !== 'Dag' && `- ${selectedShift}`}
          </div>

          <table>
            <thead>
              <tr>
                <th>Dag</th>
                {visibleShifts.map((shift) => (
                  <th key={shift.timeSlot}>{shift.label}</th>
                ))}
                <th>Totaal</th>
              </tr>
            </thead>
            <tbody>
              {dates.map(({ date }, index) => {
                const dateString = date.toISOString().split('T')[0];
                const reservations = reservationsByDate[dateString] || [];
                let dayTotal = 0;
                let shiftTotals = [0, 0, 0];

                reservations.forEach((reservation) => {
                  if (
                    selectedShift === 'Dag' ||
                    (selectedShift === 'Ochtend' && reservation.timeSlot === 0) ||
                    (selectedShift === 'Middag' && reservation.timeSlot === 1) ||
                    (selectedShift === 'Avond' && reservation.timeSlot === 2)
                  ) {
                    shiftTotals[reservation.timeSlot] += reservation.aantalGasten;
                    dayTotal += reservation.aantalGasten;
                  }
                });

                return (
                  <motion.tr key={index} variants={rowVariants}>
                    <td>{getDutchDayName(date)}</td>
                    {visibleShifts.map((shift) => (
                      <td key={shift.timeSlot}>{shiftTotals[shift.timeSlot]}</td>
                    ))}
                    <td>{dayTotal}</td>
                  </motion.tr>
                );
              })}
              <motion.tr variants={rowVariants} className='totals-styled'>
                <td>
                  <strong>Totaal</strong>
                </td>
                {visibleShifts.map((shift) => (
                  <td key={shift.timeSlot}>
                    {totalGuestsByShift[shift.timeSlot]}
                  </td>
                ))}
                <td>
                  <strong>{totalGuestsAllShifts}</strong>
                </td>
              </motion.tr>
            </tbody>
          </table>

          {/* Statistical data */}
          <motion.div className="statistical-data" variants={containerVariants}>
            <table>
              <thead>
                <tr>
                  <th>Statistiek</th>
                  <th>Waarde</th>
                </tr>
              </thead>
              <tbody>
                {Object.entries(stats).map(([key, value], index) => (
                  <motion.tr key={index} variants={rowVariants}>
                    <td>{statLabels[key]}</td>
                    <td>
                      {key.includes('Day') && value
                        ? getDutchDayName(value)
                        : value}
                    </td>
                  </motion.tr>
                ))}
              </tbody>
            </table>
          </motion.div>
        </motion.div>
      )}
    </div>
  );
};

export default WeekReport;


--- css/barChartView.css ---
/* ./css/barChartView.css */

.calendar-component .bar-chart-view {
	width: 100%;
	max-width: 800px;
	height: 600px; /* Same height as calendar grid */
	margin: 0 auto;
  }
  

--- css/calendarComponent.css ---
/* ./css/calendarComponent.css */

.calendar-component {
	display: flex;
	flex-direction: column;
	align-items: center;
	width: 100%;
	max-width: 800px;
	margin: 20px auto; /* Added top margin */
  }
  

--- css/calendarDay.css ---
/* ./css/calendarDay.css */

.calendar-component .calendar-day {
	min-height: 100px;
	padding: 5px;
	box-sizing: border-box;
	cursor: pointer;
	position: relative;
	transition: transform 0.2s ease, opacity 0.2s ease;
  }
  
  .calendar-component .calendar-day.special-mode {
	border: none;
  }
  
  .calendar-component .calendar-day:hover {
	transform: scale(1.05);
  }
  
  .calendar-component .calendar-grid-body .calendar-day {
	opacity: 1;
	transition: opacity 0.3s ease;
  }
  
  .calendar-component .calendar-grid-body .calendar-day.fade-out {
	opacity: 0.5;
  }
  
  .calendar-component .calendar-day-number {
	position: absolute;
	top: 5px;
	right: 5px;
  }
  
  .calendar-component .calendar-day--disabled {
	background-color: #e0e0e0;
  }
  
  .calendar-component .calendar-day--past {
	opacity: 0.5;
  }
  
  .calendar-component .calendar-day--today {
	background-color: lightblue;
	border: 2px solid var(--color-blue);
  }
  
  .calendar-component .time-of-day-boxes {
	margin-top: 25px; /* Increased margin between date number and boxes */
  }
  
  .calendar-component .heatmap-total-guests,
  .calendar-component .occupancy-percentage,
  .calendar-component .prediction-total-guests {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	font-size: 18px;
	font-weight: bold;
	opacity: 0;
	transition: opacity 0.3s ease;
  }
  
  .calendar-component .calendar-day:hover .heatmap-total-guests,
  .calendar-component .calendar-day:hover .prediction-total-guests {
	opacity: 1;
  }
  
  .calendar-component .calendar-day .occupancy-percentage {
	opacity: 1;
	color: black;
  }
  

--- css/calendarGrid.css ---
/* ./css/calendarGrid.css */

.calendar-component .calendar-grid {
    display: flex;
    flex-direction: column;
    width: 100%;
    max-width: 800px;
    margin-top: 10px;
    border: 1px solid #ccc;
}

.calendar-component .calendar-grid-header,
.calendar-component .calendar-grid-body {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
}

.calendar-component .calendar-grid-header div {
    text-align: center;
    font-weight: bold;
    padding: 5px 0;
    background-color: #f0f0f0;
}

.calendar-component .calendar-grid-header {
    border-bottom: none;
    border-radius: 10px 10px 0px 0px;
}





--- css/calendarHeader.css ---
/* ./css/calendarHeader.css */

.calendar-component .calendar-header {
	display: flex;
	align-items: center;
	justify-content: space-between;
	margin-bottom: 10px;
	width: 100%;
	max-width: 800px;
  }
  
  .calendar-component .calendar-header h2 {
	margin: 0;
	text-align: center;
	flex-grow: 1;
  }
  
  .calendar-component .calendar-header .nav-button {
	background: none;
	border: none;
	cursor: pointer;
	color: #000;
  }
  
  .calendar-component .calendar-header .nav-button:hover {
	color: var(--color-blue);
  }
  
  .calendar-component .calendar-header .header-buttons {
	display: flex;
	align-items: center;
  }

  .calendar-component .calendar-header .header-titles {
	display: flex;
	align-items: center;
	justify-content: center;
	margin: auto;
  }
  
  .calendar-component .toggle-button {
	margin-right: 10px;
	display: flex;
	align-items: center;
	justify-content: center;
	height: 38px;
  }

.calendar-component .nav-button {
	background: none;
	border: none;
	cursor: pointer;
	padding: 8px;
	border-radius: 4px;
	transition: background-color 0.3s ease;
  }
  
  .calendar-component .nav-button:hover {
	background-color: #e0e0e0;
  }
  
  .calendar-component .header-title-container {
	display: flex;
	align-items: center;
	position: relative;
  }
  
  .calendar-component .header-title-container h2 {
	margin: 0;
	font-size: 1.5rem;
  }
  
  .calendar-component .view-options-button {
	background: none;
	border: none;
	cursor: pointer;
	margin-left: 8px;
	display: flex;
	align-items: center;
	padding: 4px;
	border-radius: 4px;
	opacity: 0.5;
	transition: all 0.3s ease;
  }
  
  .calendar-component .view-options-button:hover {
	opacity: 1;
  }
  
  .calendar-component .view-options-container {
	position: absolute;
	top: 40px;
	left: 100px;
	background-color: #ffffff;
	border: 1px solid #ccc;
	border-radius: 8px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
	z-index: 1000;
	width: 120px;
	padding: 10px 0;
  }
  
  .calendar-component .view-option {
	padding: 10px 20px;
	cursor: pointer;
	transition: background-color 0.3s ease;
  }
  
  .calendar-component .view-option:hover {
	background-color: #f1f1f1;
  }
  
  .calendar-component .view-option.selected {
	background-color: #e0e0e0;
  }
  
  .calendar-component .header-buttons {
	display: flex;
	align-items: center;
  }


--- css/reservationDetailsModal.css ---
/* ./css/reservationDetailsModal.css */

.calendar-component .reservation-modal-content h2 {
	text-align: center;
	margin: 20px 0;
  }
  
  .calendar-component .reservation-table {
	margin-top: 20px;
  }
  
  .calendar-component .reservation-row {
	border-bottom: 1px solid #ccc;
	padding: 10px 0;
	font-size: 15px; /* Increased font size by 1px */
  }
  
  .calendar-component .reservation-main-info {
	display: flex;
	align-items: center;
	cursor: pointer;
	margin-bottom: 10px; /* Increased margin between items */
  }
  
  .calendar-component .reservation-main-info .arrow-icon {
	margin-right: 10px;
	transition: transform 0.3s;
  }
  
  .calendar-component .reservation-main-info .arrow-icon.expanded {
	transform: rotate(180deg);
  }
  
  .calendar-component .reservation-details {
	padding-left: 30px;
	overflow: hidden;
  }
  
  .calendar-component .reservation-details > div {
	margin-bottom: 5px;
  }
  
  .calendar-component .reservation-buttons {
	display: flex;
	gap: 10px;
	margin-top: 10px;
  }
  
  .calendar-component .reservation-buttons .standard-button {
	font-size: 12px;
	padding: 5px 10px;
  }
  
  .calendar-component .reservation-buttons .standard-button.red {
	background-color: var(--color-red);
	color: #fff;
  }
  
  .calendar-component .reservation-buttons .standard-button.blue {
	background-color: var(--color-blue);
	color: #fff;
  }
  

--- css/shiftSelector.css ---
/* ./css/shiftSelector.css */

.calendar-component .shift-selector-calendar-map .shift-selector {
	position: relative;
	display: inline-block;
	margin-right: 10px; /* Added margin to separate from heatmap button */
  }
  
  .calendar-component .shift-selector-calendar-map .shift-button {
	display: flex;
	align-items: center;
  }
  
  .calendar-component .shift-selector-calendar-map .shift-button-icon {
	margin-right: 5px;
  }
  
  .calendar-component .shift-selector-calendar-map .shift-options-container {
	position: absolute;
	top: 40px;
	right: 0;
	background-color: #ffffff;
	border: 1px solid #ccc;
	border-radius: 8px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
	z-index: 1000;
	width: 150px;
	padding: 10px 0;
  }
  
  .calendar-component .shift-selector-calendar-map .shift-option {
	padding: 10px 20px;
	cursor: pointer;
	transition: background-color 0.3s ease;
  }
  
  .calendar-component .shift-selector-calendar-map .shift-option:hover {
	background-color: #f1f1f1;
  }
  

--- css/timeOfDay.css ---
/* ./css/timeOfDay.css */

  .calendar-component .time-of-day-box {
	width: 100%;
	border-radius: 5px;
	color: #fff;
	padding: 8px 5px;
	margin-bottom: 5px;
	text-align: left;
	font-size: 13px;
	font-weight: 500;
  }
  

--- css/viewModeSelector.css ---
/* ./css/viewModeSelector.css */

.calendar-component .view-mode-selector {
	position: relative;
	display: inline-block;
	margin-right: 10px;
  }
  
  .calendar-component .view-mode-button {
	display: flex;
	align-items: center;
  }
  
  .calendar-component .view-mode-button-icon {
	margin-right: 5px;
  }
  
  .calendar-component .view-mode-options-container {
	position: absolute;
	top: 50px;
	right: 0;
	background-color: #ffffff;
	border: 1px solid #ccc;
	border-radius: 8px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
	z-index: 1000;
	width: 220px;
	padding: 10px 0;
  }
  
  .calendar-component .view-mode-option {
	padding: 10px 20px;
	cursor: pointer;
	transition: background-color 0.3s ease;
  }
  
  .calendar-component .view-mode-option:hover {
	background-color: #f1f1f1;
  }
  

--- css/weekReport.css ---
/* weekReport.css */


.calendar-report-table {
    width: 100%;
    border-collapse: collapse;
    background-color: #ffffff;
    padding: 20px 30px;
    border-radius: 15px;
}

.calendar-report-table th,
.calendar-report-table td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
}

.calendar-report-table th {
    background-color: #f0f0f0;
    font-weight: bold;
    color: #333;
}

.calendar-report-table td {
    color: #555;
}

.calendar-report-title {
    font-weight: bold;
    font-size: 1.2em;
    text-align: center;
    color: #333;
}


.week-report .generate-report-text {
	color: var(--color-blue);
	cursor: pointer;
  }
  
  .week-report {
	width: 100%;
  }
  
  .loading-container {
	display: flex;
	flex-direction: column;
	align-items: center;
  }
  

  /* Additional styles for report */
  .calendar-report-table {
	margin-top: 20px;
	width: 100%; /* Make the table span the full width */
  }
  
  .calendar-report-table table {
	width: 100%; /* Make the table span the full width */
	border-collapse: collapse;
  }
  
  .calendar-report-table th,
  .calendar-report-table td {
	border: 1px solid var(--color-gray);
	padding: 8px;
	text-align: center;
  }
  
  .calendar-report-title {
	font-size: 1.5em;
	margin-bottom: 20px;
  }
  
  .statistical-data {
	margin-top: 20px;
	width: 100%; /* Make the table span the full width */
  }
  
  .statistical-data table {
	width: 100%; /* Make the table span the full width */
	border-collapse: collapse;
  }
  
  .statistical-data th,
  .statistical-data td {
	border: 1px solid var(--color-gray);
	padding: 8px;
	text-align: left;
  }
  
  .totals-styled {
	font-weight: bold;
  }

  .collapsible-block {
	border: 1px solid var(--color-gray);
	border-radius: 8px;
	margin-bottom: 15px;
	overflow: hidden;
	background-color: #f9f9f9;
  }
  
  .block-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 12px 16px;
	background-color: #e0e0e0;
	cursor: pointer;
  }
  
  .block-title {
	font-weight: bold;
	color: #333;
  }
  
  .chevron-icon {
	transition: transform 0.3s ease;
  }
  
  .chevron-icon.expanded {
	transform: rotate(180deg);
  }
  
  .block-content {
	background-color: #ffffff;
  }
  

--- index.js ---
// CalendarComponent.js

import React, { useState } from 'react';
import CalendarHeader from './CalendarHeader';
import CalendarGrid from './CalendarGrid';
import BarChartView from './BarChartView';
import ReservationDetailsModal from './ReservationDetailsModal';
import './css/calendarComponent.css';
import { withHeader } from '../../Components/Structural/Header';
import useReservations from './Hooks/useReservations';
import usePredictions from './Hooks/usePredictions';
import WeekReport from './WeekReport';
import MonthReport from './MonthReport'; // Import MonthReport
import ModalWithoutTabs from '../../Components/Structural/Modal/Standard'; // Import ModalWithoutTabs
import { maxCapacity } from './reservationData'; // Adjust the path as necessary

const CalendarComponent = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedDateReservations, setSelectedDateReservations] = useState(null);
  const [selectedShift, setSelectedShift] = useState('Dag');
  const [selectedViewMode, setSelectedViewMode] = useState('Algemeen');
  const [isChartView, setIsChartView] = useState(false);
  const [weekOrMonthView, setWeekOrMonthView] = useState('month');
  const [isReportModalOpen, setIsReportModalOpen] = useState(false); // State for report modal

  const reservationsByDate = useReservations();
  const predictionsByDate = usePredictions(
    currentDate,
    reservationsByDate,
    selectedShift,
    selectedViewMode
  );

  const getMonday = (date) => {
    const d = new Date(date);
    const day = d.getDay(); // 0 (Sun) to 6 (Sat)
    const diff = day === 0 ? -6 : 1 - day; // Adjust when day is Sunday
    d.setDate(d.getDate() + diff);
    d.setHours(0, 0, 0, 0); // Reset time to midnight
    return d;
  };

  // Generate dates based on the view
  const generateDates = () => {
    let dates = [];

    if (weekOrMonthView === 'month') {
      const startDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
      const endDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
      const numDays = endDate.getDate();

      const prevMonthDays = (startDate.getDay() + 6) % 7; // Adjusted for Dutch week starting on Monday

      // Fill in dates from previous month
      for (let i = prevMonthDays - 1; i >= 0; i--) {
        const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), -i);
        dates.push({ date, currentMonth: false });
      }

      // Dates in current month
      for (let i = 1; i <= numDays; i++) {
        const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), i);
        dates.push({ date, currentMonth: true });
      }

      // Fill in dates for next month to complete the grid
      while (dates.length % 7 !== 0) {
        const date = new Date(
          currentDate.getFullYear(),
          currentDate.getMonth() + 1,
          dates.length - numDays - prevMonthDays + 1
        );
        dates.push({ date, currentMonth: false });
      }
    } else if (weekOrMonthView === 'week') {
      const currentWeekStart = getMonday(currentDate);
      for (let i = 0; i < 7; i++) {
        const date = new Date(currentWeekStart);
        date.setDate(currentWeekStart.getDate() + i);
        const currentMonth = date.getMonth() === currentDate.getMonth();
        dates.push({ date, currentMonth });
      }
    }

    return dates;
  };

  const dates = generateDates(); // Get dates

  const handlePrev = () => {
    if (weekOrMonthView === 'week') {
      setCurrentDate((prev) => {
        const newDate = new Date(prev);
        newDate.setDate(prev.getDate() - 7);
        return newDate;
      });
    } else {
      setCurrentDate(
        new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1)
      );
    }
  };

  const handleNext = () => {
    if (weekOrMonthView === 'week') {
      setCurrentDate((prev) => {
        const newDate = new Date(prev);
        newDate.setDate(prev.getDate() + 7);
        return newDate;
      });
    } else {
      setCurrentDate(
        new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1)
      );
    }
  };

  const handleDateClick = (date) => {
    const dateString = date.toISOString().split('T')[0];
    if (reservationsByDate[dateString]) {
      setSelectedDateReservations({
        date: dateString,
        reservations: reservationsByDate[dateString],
      });
    } else {
      setSelectedDateReservations({
        date: dateString,
        reservations: [],
      });
    }
  };

  const handleCloseModal = () => {
    setSelectedDateReservations(null);
  };

  const toggleChartView = () => {
    setIsChartView(!isChartView);
  };

  const openReportModal = () => {
    setIsReportModalOpen(true);
  };

  const closeReportModal = () => {
    setIsReportModalOpen(false);
  };

  return (
    <div className="calendar-component">
      <CalendarHeader
        currentDate={currentDate}
        onPrev={handlePrev}
        onNext={handleNext}
        selectedShift={selectedShift}
        setSelectedShift={setSelectedShift}
        selectedViewMode={selectedViewMode}
        setSelectedViewMode={setSelectedViewMode}
        isChartView={isChartView}
        toggleChartView={toggleChartView}
        weekOrMonthView={weekOrMonthView}
        setWeekOrMonthView={setWeekOrMonthView}
        onGenerateReport={openReportModal} // Pass the function
      />
      {isChartView ? (
        <BarChartView
          currentDate={currentDate}
          reservationsByDate={reservationsByDate}
          selectedShift={selectedShift}
          selectedViewMode={selectedViewMode}
          predictionsByDate={predictionsByDate}
          weekOrMonthView={weekOrMonthView} // Pass this prop
          maxCapacity={maxCapacity} // Pass maxCapacity if needed
        />
      ) : (
        <CalendarGrid
          dates={dates} // Pass dates to CalendarGrid
          currentDate={currentDate}
          reservationsByDate={reservationsByDate}
          onDateClick={handleDateClick}
          selectedShift={selectedShift}
          selectedViewMode={selectedViewMode}
          predictionsByDate={predictionsByDate}
          weekOrMonthView={weekOrMonthView}
        />
      )}
      {selectedDateReservations && (
        <ReservationDetailsModal
          reservationsData={selectedDateReservations}
          onClose={handleCloseModal}
        />
      )}

      {isReportModalOpen && (
        <ModalWithoutTabs
          content={
            weekOrMonthView === 'week' ? (
              <WeekReport
                dates={dates}
                reservationsByDate={reservationsByDate}
                selectedShift={selectedShift}
                autoGenerate={true} // Automatically generate the report
              />
            ) : (
              <MonthReport
                dates={dates}
                reservationsByDate={reservationsByDate}
                selectedShift={selectedShift}
                autoGenerate={true} // Automatically generate the report
              />
            )
          }
          onClose={closeReportModal}
        />
      )}
    </div>
  );
};

export default withHeader(CalendarComponent);


--- reservationData.js ---
// reservationData.js

export const maxCapacity = 50; // Define the maximum capacity

const firstNames = [
  'Jan', 'Maria', 'Peter', 'Linda', 'Mark',
  'Sophie', 'Thomas', 'Laura', 'Robert', 'Emma',
  'Lucas', 'Olivia', 'Liam', 'Ava', 'Noah',
  'Isabella', 'Ethan', 'Mia', 'Mason', 'Charlotte'
];
const lastNames = [
  'Jansen', 'De Vries', 'Bakker', 'Visser', 'Smit',
  'Meijer', 'Mulder', 'De Boer', 'Bos', 'Vos',
  'Peters', 'Hendriksen', 'Kuiper', 'Dekker', 'Verhoeven',
  'Martens', 'Laurens', 'Van Dijk', 'Van den Berg', 'De Groot'
];

const extraOptions = [
  'Vegetarisch menu', 'Extra broodjes', 'Babystoel nodig',
  'Geen extra', 'Geen extra', 'Geen extra',
  'Geen extra', 'Geen extra', 'Geen extra', null
];

const reservations = [];

const now = new Date();

for (let i = 1; i <= 500; i++) {
  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
  const fullName = `${firstName} ${lastName}`;
  const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}@example.com`;
  const phone = `06${Math.floor(10000000 + Math.random() * 90000000)}`;
  const aantalGasten = Math.floor(Math.random() * 4) + 2;

  // Random date within +/- 1 month from current date
  const reservationDate = new Date(now);
  const daysOffset = Math.floor(Math.random() * 60) - 30;
  reservationDate.setDate(now.getDate() + daysOffset);

  const year = reservationDate.getFullYear();
  const month = String(reservationDate.getMonth() + 1).padStart(2, '0');
  const day = String(reservationDate.getDate()).padStart(2, '0');
  const formattedDate = `${year}-${month}-${day}`;

  // Random time slot
  const timeSlot = Math.floor(Math.random() * 3);
  let hour;
  switch (timeSlot) {
    case 0: // Morning
      hour = Math.floor(Math.random() * 6) + 6; // 6 - 11
      break;
    case 1: // Afternoon
      hour = Math.floor(Math.random() * 6) + 12; // 12 - 17
      break;
    case 2: // Evening
      hour = Math.floor(Math.random() * 6) + 18; // 18 - 23
      break;
  }
  const minute = Math.random() < 0.5 ? '00' : '30';
  const tijdstip = `${hour.toString().padStart(2, '0')}:${minute}`;

  let extra = extraOptions[Math.floor(Math.random() * extraOptions.length)];

  if (extra === 'Geen extra') {
    extra = null;
  }

  reservations.push({
    id: i,
    date: formattedDate,
    time: tijdstip,
    fullName,
    email,
    phone,
    aantalGasten,
    extra,
    timeSlot: timeSlot, // 0: Morning, 1: Afternoon, 2: Evening
  });
}

export default reservations;



Directory Structure for "/Users/thibaultvandesompele/Desktop/Mateza 4.0/Client/Dashboard/dashboard-general/src/Pages/CalendarMap":

├── BarChartView.js
├── CalendarDay.js
├── CalendarGrid.js
├── CalendarHeader.js
├── Hooks
│   ├── usePredictions.js
│   ├── useReportData.js
│   └── useReservations.js
├── MonthReport.js
├── ReservationDetailsModal.js
├── ShiftSelector.js
├── TimeOfDayBox.js
├── Utils
│   ├── dateUtils.js
│   ├── predictionUtils.js
│   └── reportUtils.js
├── ViewModeSelector.js
├── WeekReport.js
├── css
│   ├── barChartView.css
│   ├── calendarComponent.css
│   ├── calendarDay.css
│   ├── calendarGrid.css
│   ├── calendarHeader.css
│   ├── reservationDetailsModal.css
│   ├── shiftSelector.css
│   ├── timeOfDay.css
│   ├── viewModeSelector.css
│   └── weekReport.css
├── index.js
└── reservationData.js


List of Files:
BarChartView.js
CalendarDay.js
CalendarGrid.js
CalendarHeader.js
Hooks/usePredictions.js
Hooks/useReportData.js
Hooks/useReservations.js
MonthReport.js
ReservationDetailsModal.js
ShiftSelector.js
TimeOfDayBox.js
Utils/dateUtils.js
Utils/predictionUtils.js
Utils/reportUtils.js
ViewModeSelector.js
WeekReport.js
css/barChartView.css
css/calendarComponent.css
css/calendarDay.css
css/calendarGrid.css
css/calendarHeader.css
css/reservationDetailsModal.css
css/shiftSelector.css
css/timeOfDay.css
css/viewModeSelector.css
css/weekReport.css
index.js
reservationData.js

**Instruction:**
1. Please encapsulate the main component in index.js inside the `.component-name-component` class.
2. Prefix all CSS classes with the `.component-name-component` class.

**Examples:**

*Encapsulation in index.js:*
```jsx
<div className="profile-component">
    <h2 className="account-manage-title">Admin Reservaties</h2>
    <div className="account-manage-container">
        {/* ... */}
        onClose={() => setIsModalOpen(false)}
    </div>
</div>
```

*Prefixed CSS Classes:*
```css
.component-name-component .account-manage-container {
    justify-content: center;
    align-items: center;
    flex-direction: column;
    position: relative;
    width: 100%;
    max-width: 600px;
    text-align: center;
    background-color: white;
}

.component-name-component .modal-title {
    text-align: center;
    width: 100%;
    margin-top: 20px;
    margin-bottom: 40px;
}
```Sometimes the encapsulation is already done, and we don't need to do it twice. Don't write any comments. Delete all comments and don't write any extra comments.Only print the code with changes. Print the codes in full. Don't skip anything print them full.Mark all changed files with CHANGED before printing the file else mark them with --unchanged and don't print them.Only print every file once.