File Contents:

--- EditMededelingModal.js ---
// src/Pages/Mededeling/EditMededelingModal.js

import React, { useState } from 'react';
import ModalWithoutTabs from '../../Components/Structural/Modal/Standard';
import './css/mededeling.css';

const EditMededelingModal = ({
  isVisible,
  mededeling,
  api,
  triggerNotification,
  refreshMededelingen,
  onClose,
}) => {
  const [formData, setFormData] = useState({
    mededeling: mededeling.mededeling || '',
    startDate: mededeling.startDate || '',
    endDate: mededeling.endDate || '',
    startTime: mededeling.startTime || '',
    endTime: mededeling.endTime || '',
    daysOfWeek: mededeling.daysOfWeek || [],
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;

    if (type === 'checkbox') {
      const day = value;
      setFormData((prev) => {
        let daysOfWeek = [...prev.daysOfWeek];
        if (checked) {
          daysOfWeek.push(day);
        } else {
          daysOfWeek = daysOfWeek.filter((d) => d !== day);
        }
        return { ...prev, daysOfWeek };
      });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    setErrors({ ...errors, [name]: '' });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const validationErrors = {};
    if (!formData.mededeling.trim()) validationErrors.mededeling = 'Mededeling is verplicht.';
    if (!formData.startDate) validationErrors.startDate = 'Startdatum is verplicht.';
    if (!formData.endDate) validationErrors.endDate = 'Einddatum is verplicht.';
    if (!formData.startTime) validationErrors.startTime = 'Starttijd is verplicht.';
    if (!formData.endTime) validationErrors.endTime = 'Eindtijd is verplicht.';
    if (formData.daysOfWeek.length === 0) validationErrors.daysOfWeek = 'Selecteer minstens één dag.';

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    const payload = {
      ...formData,
    };

    try {
      const response = await api.put(`${window.baseDomain}api/mededeling/${mededeling._id}`, payload);
      if (response) {
        triggerNotification('Mededeling succesvol bijgewerkt', 'success');
        refreshMededelingen();
        onClose();
      } else {
        triggerNotification('Fout bij het bijwerken van de mededeling', 'error');
      }
    } catch (error) {
      console.error('Error updating mededeling:', error);
      triggerNotification('Fout bij het bijwerken van de mededeling', 'error');
    }
  };

  if (!isVisible) return null;

  return (
    <ModalWithoutTabs
      onClose={onClose}
      content={
        <div className="mededeling-component__edit-modal">
          <form className="mededeling-component__form" onSubmit={handleSubmit}>
            <div className="mededeling-component__form-group">
              <label>Mededeling</label>
              <input
                type="text"
                name="mededeling"
                value={formData.mededeling}
                onChange={handleChange}
                className="mededeling-component__input"
              />
              {errors.mededeling && <p className="mededeling-component__error">{errors.mededeling}</p>}
            </div>

            <div className="mededeling-component__form-group">
              <label>Start Datum</label>
              <input
                type="date"
                name="startDate"
                value={formData.startDate}
                onChange={handleChange}
                className="mededeling-component__input"
              />
              {errors.startDate && <p className="mededeling-component__error">{errors.startDate}</p>}
            </div>

            <div className="mededeling-component__form-group">
              <label>Eind Datum</label>
              <input
                type="date"
                name="endDate"
                value={formData.endDate}
                onChange={handleChange}
                className="mededeling-component__input"
              />
              {errors.endDate && <p className="mededeling-component__error">{errors.endDate}</p>}
            </div>

            <div className="mededeling-component__form-group">
              <label>Start Tijd</label>
              <input
                type="time"
                name="startTime"
                value={formData.startTime}
                onChange={handleChange}
                className="mededeling-component__input"
              />
              {errors.startTime && <p className="mededeling-component__error">{errors.startTime}</p>}
            </div>

            <div className="mededeling-component__form-group">
              <label>Eind Tijd</label>
              <input
                type="time"
                name="endTime"
                value={formData.endTime}
                onChange={handleChange}
                className="mededeling-component__input"
              />
              {errors.endTime && <p className="mededeling-component__error">{errors.endTime}</p>}
            </div>

            <div className="mededeling-component__form-group">
              <label>Dagen van de week</label>
              <div className="mededeling-component__checkbox-group">
                {['maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag', 'zondag'].map(
                  (day) => (
                    <label key={day} className="mededeling-component__checkbox-label">
                      <input
                        type="checkbox"
                        name="daysOfWeek"
                        value={day}
                        checked={formData.daysOfWeek.includes(day)}
                        onChange={handleChange}
                        className="mededeling-component__checkbox"
                      />
                      {day.charAt(0).toUpperCase() + day.slice(1)}
                    </label>
                  )
                )}
              </div>
              {errors.daysOfWeek && <p className="mededeling-component__error">{errors.daysOfWeek}</p>}
            </div>

            <button type="submit" className="button-style-3">
              Mededeling Bijwerken
            </button>
          </form>
        </div>
      }
    />
  );
};

export default EditMededelingModal;


--- MededelingForm.js ---
// src/Pages/Mededeling/MededelingForm.js

import React, { useState } from 'react';
import './css/mededeling.css';

const MededelingForm = ({ api, triggerNotification, refreshMededelingen }) => {
  const [formData, setFormData] = useState({
    mededeling: '',
    startDate: '',
    endDate: '',
    startTime: '',
    endTime: '',
    daysOfWeek: [],
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;

    if (type === 'checkbox') {
      const day = value;
      setFormData((prevFormData) => {
        let daysOfWeek = [...prevFormData.daysOfWeek];
        if (checked) {
          daysOfWeek.push(day);
        } else {
          daysOfWeek = daysOfWeek.filter((d) => d !== day);
        }
        return { ...prevFormData, daysOfWeek };
      });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    setErrors({ ...errors, [name]: '' });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const validationErrors = {};
    if (!formData.mededeling.trim()) validationErrors.mededeling = 'Mededeling is verplicht.';
    if (!formData.startDate) validationErrors.startDate = 'Startdatum is verplicht.';
    if (!formData.endDate) validationErrors.endDate = 'Einddatum is verplicht.';
    if (!formData.startTime) validationErrors.startTime = 'Starttijd is verplicht.';
    if (!formData.endTime) validationErrors.endTime = 'Eindtijd is verplicht.';
    if (formData.daysOfWeek.length === 0) validationErrors.daysOfWeek = 'Selecteer minstens één dag.';

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    const payload = {
      mededeling: formData.mededeling,
      startDate: formData.startDate,
      endDate: formData.endDate,
      startTime: formData.startTime,
      endTime: formData.endTime,
      daysOfWeek: formData.daysOfWeek,
    };

    try {
      const response = await api.post(`${window.baseDomain}api/mededeling`, payload);
      if (response) {
        setFormData({
          mededeling: '',
          startDate: '',
          endDate: '',
          startTime: '',
          endTime: '',
          daysOfWeek: [],
        });
        setErrors({});
        triggerNotification('Mededeling succesvol toegevoegd', 'success');
        refreshMededelingen();
      } else {
        triggerNotification('Fout bij het toevoegen van de mededeling', 'error');
      }
    } catch (error) {
      console.error('Error adding mededeling:', error);
      triggerNotification('Fout bij het toevoegen van de mededeling', 'error');
    }
  };

  return (
    <form className="mededeling-component__form" onSubmit={handleSubmit}>
      <div className="mededeling-component__form-group">
        <label>Mededeling</label>
        <input
          type="text"
          name="mededeling"
          value={formData.mededeling}
          onChange={handleChange}
          placeholder="Mededeling"
          className="mededeling-component__input"
        />
        {errors.mededeling && <p className="mededeling-component__error">{errors.mededeling}</p>}
      </div>

      <div className="mededeling-component__form-group">
        <label>Start Datum</label>
        <input
          type="date"
          name="startDate"
          value={formData.startDate}
          onChange={handleChange}
          className="mededeling-component__input"
        />
        {errors.startDate && <p className="mededeling-component__error">{errors.startDate}</p>}
      </div>

      <div className="mededeling-component__form-group">
        <label>Eind Datum</label>
        <input
          type="date"
          name="endDate"
          value={formData.endDate}
          onChange={handleChange}
          className="mededeling-component__input"
        />
        {errors.endDate && <p className="mededeling-component__error">{errors.endDate}</p>}
      </div>

      <div className="mededeling-component__form-group">
        <label>Start Tijd</label>
        <input
          type="time"
          name="startTime"
          value={formData.startTime}
          onChange={handleChange}
          className="mededeling-component__input"
        />
        {errors.startTime && <p className="mededeling-component__error">{errors.startTime}</p>}
      </div>

      <div className="mededeling-component__form-group">
        <label>Eind Tijd</label>
        <input
          type="time"
          name="endTime"
          value={formData.endTime}
          onChange={handleChange}
          className="mededeling-component__input"
        />
        {errors.endTime && <p className="mededeling-component__error">{errors.endTime}</p>}
      </div>

      <div className="mededeling-component__form-group">
        <label>Dagen van de week</label>
        <div className="mededeling-component__checkbox-group">
          {['maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag', 'zondag'].map(
            (day) => (
              <label key={day} className="mededeling-component__checkbox-label">
                <input
                  type="checkbox"
                  name="daysOfWeek"
                  value={day}
                  checked={formData.daysOfWeek.includes(day)}
                  onChange={handleChange}
                  className="mededeling-component__checkbox"
                />
                {day.charAt(0).toUpperCase() + day.slice(1)}
              </label>
            )
          )}
        </div>
        {errors.daysOfWeek && <p className="mededeling-component__error">{errors.daysOfWeek}</p>}
      </div>

      <button type="submit" className="button-style-3">
        Mededeling Toevoegen
      </button>
    </form>
  );
};

export default MededelingForm;


--- MededelingItem.js ---
// src/Pages/Mededeling/MededelingItem.js

import React, { useState } from 'react';
import './css/mededeling.css';
import { FaEllipsisV, FaPencilAlt, FaTrashAlt } from 'react-icons/fa';
import ConfirmationModal from '../../Components/Structural/Modal/Delete';
import EditMededelingModal from './EditMededelingModal';

const MededelingItem = ({ mededeling, api, triggerNotification, refreshMededelingen }) => {
  const [isTooltipOpen, setIsTooltipOpen] = useState(false);
  const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
  const [isEditModalVisible, setIsEditModalVisible] = useState(false);

  const handleEllipsisClick = () => {
    setIsTooltipOpen(!isTooltipOpen);
  };

  const handleDeleteClick = () => {
    setIsDeleteModalVisible(true);
    setIsTooltipOpen(false);
  };

  const handleEditClick = () => {
    setIsEditModalVisible(true);
    setIsTooltipOpen(false);
  };

  const handleConfirmDelete = async () => {
    setIsDeleteModalVisible(false);
    try {
      await api.delete(`${window.baseDomain}api/mededeling/${mededeling._id}`);
      triggerNotification('Mededeling succesvol verwijderd', 'success');
      refreshMededelingen();
    } catch (error) {
      console.error('Error deleting mededeling:', error);
      triggerNotification('Fout bij het verwijderen van de mededeling', 'error');
    }
  };

  const handleCancelDelete = () => {
    setIsDeleteModalVisible(false);
  };

  return (
    <div className="mededeling-component__mededeling-item">
      <div className="mededeling-component__mededeling-content">
        <h4>{mededeling.mededeling}</h4>
        <p>
          Geldig van {mededeling.startDate} tot {mededeling.endDate}
        </p>
        <p>
          Van {mededeling.startTime} tot {mededeling.endTime}
        </p>
        <p>Dagen: {mededeling.daysOfWeek.join(', ')}</p>
      </div>
      <div className="mededeling-component__mededeling-actions">
        <FaEllipsisV onClick={handleEllipsisClick} className="mededeling-component__ellipsis-icon" />
        {isTooltipOpen && (
          <div className="tooltip-container">
            <div className="tooltip-item" onClick={handleEditClick}>
              <FaPencilAlt className="tooltip-icon" />
              Bewerken
            </div>
            <div className="tooltip-separator"></div>
            <div className="tooltip-item delete-item" onClick={handleDeleteClick}>
              <FaTrashAlt className="tooltip-icon" />
              Verwijderen
            </div>
          </div>
        )}
      </div>
      {isDeleteModalVisible && (
        <ConfirmationModal
          isVisible={isDeleteModalVisible}
          title="Mededeling Verwijderen"
          message="Weet u zeker dat u deze mededeling wilt verwijderen?"
          onConfirm={handleConfirmDelete}
          onCancel={handleCancelDelete}
          confirmText="Verwijderen"
          cancelText="Annuleren"
          confirmButtonClass="discard-button red"
          cancelButtonClass="cancel-button"
        />
      )}
      {isEditModalVisible && (
        <EditMededelingModal
          isVisible={isEditModalVisible}
          mededeling={mededeling}
          api={api}
          triggerNotification={triggerNotification}
          refreshMededelingen={refreshMededelingen}
          onClose={() => setIsEditModalVisible(false)}
        />
      )}
    </div>
  );
};

export default MededelingItem;


--- MededelingList.js ---
// src/Pages/Mededeling/MededelingList.js

import React from 'react';
import './css/mededeling.css';
import MededelingItem from './MededelingItem';

const MededelingList = ({ mededelingen, api, triggerNotification, refreshMededelingen }) => {
  return (
    <div className="mededeling-component__list">
      <h3>Mededelingen</h3>
      {mededelingen.length > 0 ? (
        <div className="mededeling-component__mededeling-list">
          {mededelingen.map((mededeling) => (
            <MededelingItem
              key={mededeling._id}
              mededeling={mededeling}
              api={api}
              triggerNotification={triggerNotification}
              refreshMededelingen={refreshMededelingen}
            />
          ))}
        </div>
      ) : (
        <p>Geen mededelingen gevonden.</p>
      )}
    </div>
  );
};

export default MededelingList;


--- css/mededeling.css ---
/* src/Pages/Mededeling/css/mededeling.css */

.mededeling-component {
	display: flex;
	flex-direction: column;
	gap: 20px;
	margin-top: 30px;
	padding-bottom: 80px;
  }
  
  .mededeling-component__title {
	font-size: 2rem;
	text-align: center;
  }
  
  .mededeling-component__container {
	display: flex;
	flex-direction: row;
	gap: 20px;
	flex-wrap: wrap;
  }
  
  .mededeling-component__form {
	flex: 1;
	display: flex;
	flex-direction: column;
	gap: 15px;
	max-width: 100%;
  }
  
  .mededeling-component__form-group {
	display: flex;
	flex-direction: column;
  }
  
  .mededeling-component__form-group label {
	margin-bottom: 5px;
	font-weight: 500;
  }
  
  .mededeling-component__input {
	width: 100%;
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: 5px;
	font-size: 1rem;
  }
  
  .mededeling-component__checkbox-group {
	display: flex;
	flex-wrap: wrap;
	gap: 10px;
  }
  
  .mededeling-component__checkbox-label {
	display: flex;
	align-items: center;
  }
  
  .mededeling-component__checkbox {
	margin-right: 5px;
  }
  
  .mededeling-component__submit-button {
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	transition: background-color 0.3s ease;
	align-self: flex-start;
  }
  
  .mededeling-component__submit-button:hover {
	background-color: #0056b3;
  }
  
  .mededeling-component__error {
	color: red;
	font-size: 0.9rem;
  }
  
  .mededeling-component__list {
	flex: 1;
  }
  
  .mededeling-component__mededeling-list {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  .mededeling-component__mededeling-item {
	border: 1px solid #ccc;
	border-radius: 8px;
	padding: 15px;
	position: relative;
	display: flex;
	justify-content: space-between;
	align-items: center;
  }
  
  .mededeling-component__mededeling-content h4 {
	margin: 0 0 5px 0;
  }
  
  .mededeling-component__mededeling-actions {
	position: relative;
  }
  
  .mededeling-component__ellipsis-icon {
	cursor: pointer;
	font-size: 18px;
	color: #555;
  }
  
  .tooltip-container {
	position: absolute;
	bottom: 100%;
	right: 0;
	transform: translateY(-10px);
	background-color: white;
	border: 1px solid lightgray;
	border-radius: 5px;
	padding: 5px 0;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
	z-index: 1000;
  }
  
  .tooltip-item {
	display: flex;
	align-items: center;
	padding: 8px 15px;
	cursor: pointer;
  }
  
  .tooltip-item:hover {
	background-color: #f0f0f0;
  }
  
  .tooltip-icon {
	margin-right: 8px;
  }
  
  .tooltip-item.delete-item {
	color: red;
  }
  
  .tooltip-item.delete-item .tooltip-icon {
	color: red;
  }
  
  .tooltip-separator {
	height: 1px;
	background-color: lightgray;
	margin: 5px 0;
  }
  
  @media (max-width: 900px) {
	.mededeling-component__container {
	  flex-direction: column;
	  padding: 10px;
	}
  
	.mededeling-component__mededeling-item {
	  flex-direction: column;
	  align-items: flex-start;
	}
  
	.mededeling-component__mededeling-actions {
	  position: absolute;
	  top: 15px;
	  right: 15px;
	}
  }
  
  /* Existing Mededeling Form Styles */
  
  .mededeling-component__form {
	display: flex;
	flex-direction: column;
	gap: 20px;
  }
  
  .mededeling-component__form-group {
	display: flex;
	flex-direction: column;
  }
  
  .mededeling-component__label-with-tooltip {
	display: flex;
	align-items: center;
	margin-bottom: 5px;
  }
  
  .mededeling-component__input-container {
	display: flex;
	flex-wrap: wrap;
	gap: 20px;
  }
  
  .mededeling-component__date-time-group {
	display: flex;
	gap: 20px;
	width: 100%;
  }
  
  .mededeling-component__date-picker-wrapper,
  .mededeling-component__time-picker-wrapper {
	flex: 1;
	display: flex;
	flex-direction: column;
  }
  
  .mededeling-component__checkbox-group {
	display: flex;
	flex-wrap: wrap;
	gap: 10px;
	margin-top: 10px; /* Added margin for spacing */
  }
  
  .mededeling-component__checkbox-label {
	display: flex;
	align-items: center;
  }
  
  .mededeling-component__checkbox {
	margin-right: 5px;
  }
  
  .mededeling-component__submit-button {
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	transition: background-color 0.3s ease;
	align-self: flex-start;
  }
  
  .mededeling-component__submit-button:hover {
	background-color: #0056b3;
  }
  
  .mededeling-component__error {
	color: red;
	font-size: 0.9rem;
  }
  
  /* Header with Icon */
  .mededeling-component__header {
	display: flex;
	align-items: center;
	gap: 10px;
	margin-bottom: 20px;
  }
  
  .mededeling-icon {
	font-size: 24px;
	color: var(--color-blue);
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
	.mededeling-component__date-time-group {
	  flex-direction: column;
	}
  }
  

--- index.js ---
// src/Pages/Mededeling/index.js

import React, { useState, useEffect } from 'react';
import { withHeader } from '../../Components/Structural/Header/index.js';
import './css/mededeling.css';
import useApi from '../../Hooks/useApi';
import useNotification from '../../Components/Notification';
import MededelingForm from './MededelingForm';
import MededelingList from './MededelingList';

const Mededeling = () => {
  const api = useApi();
  const { triggerNotification, NotificationComponent } = useNotification();

  // State for the list of mededelingen
  const [mededelingen, setMededelingen] = useState([]);

  // Fetch the mededelingen at component mount
  useEffect(() => {
    const fetchMededelingen = async () => {
      try {
        const data = await api.get(`${window.baseDomain}api/mededeling`, { noCache: true });
        if (Array.isArray(data)) {
          setMededelingen(data);
        } else {
          setMededelingen([]);
        }
      } catch (error) {
        console.error('Error fetching mededelingen:', error);
        setMededelingen([]);
        triggerNotification('Fout bij het ophalen van mededelingen.', 'error');
      }
    };
    fetchMededelingen();
  }, [api, triggerNotification]);

  // Handler to refresh mededelingen
  const refreshMededelingen = async () => {
    try {
      const data = await api.get(`${window.baseDomain}api/mededeling`, { noCache: true });
      if (Array.isArray(data)) {
        setMededelingen(data);
      } else {
        setMededelingen([]);
      }
    } catch (error) {
      console.error('Error fetching mededelingen:', error);
      setMededelingen([]);
      triggerNotification('Fout bij het ophalen van mededelingen.', 'error');
    }
  };

  return (
    <div className="mededeling-component">
      <NotificationComponent />
      <div className="mededeling-component__container">
        <MededelingForm
          api={api}
          triggerNotification={triggerNotification}
          refreshMededelingen={refreshMededelingen}
        />
        <MededelingList
          mededelingen={mededelingen}
          api={api}
          triggerNotification={triggerNotification}
          refreshMededelingen={refreshMededelingen}
        />
      </div>
    </div>
  );
};

export default withHeader(Mededeling);



Directory Structure for "/Users/thibaultvandesompele/Desktop/Mateza 4.0/Client/Dashboard/dashboard-general/src/Pages/Mededeling":

├── EditMededelingModal.js
├── MededelingForm.js
├── MededelingItem.js
├── MededelingList.js
├── css
│   └── mededeling.css
└── index.js


List of Files:
EditMededelingModal.js
MededelingForm.js
MededelingItem.js
MededelingList.js
css/mededeling.css
index.js
