File Contents:

--- EditMenuModal.js ---
import React, { useState } from 'react';
import ModalWithoutTabs from '../../Components/Structural/Modal/Standard';
import './css/menu.css';

const EditMenuModal = ({
  isVisible,
  menu,
  api,
  triggerNotification,
  refreshMenus,
  onClose,
}) => {
  const [formData, setFormData] = useState({
    name: menu.name || '',
    startDate: menu.startDate || '',
    endDate: menu.endDate || '',
    startHour: menu.startHour || '',
    endHour: menu.endHour || '',
    daysOfWeek: menu.daysOfWeek || [],
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;

    if (type === 'checkbox') {
      const day = value;
      setFormData((prev) => {
        let daysOfWeek = [...prev.daysOfWeek];
        if (checked) {
          daysOfWeek.push(day);
        } else {
          daysOfWeek = daysOfWeek.filter((d) => d !== day);
        }
        return { ...prev, daysOfWeek };
      });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    setErrors({ ...errors, [name]: '' });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const validationErrors = {};
    if (!formData.name.trim()) validationErrors.name = 'Menu naam is verplicht.';
    if (!formData.startDate) validationErrors.startDate = 'Startdatum is verplicht.';
    if (!formData.endDate) validationErrors.endDate = 'Einddatum is verplicht.';
    if (!formData.startHour) validationErrors.startHour = 'Startuur is verplicht.';
    if (!formData.endHour) validationErrors.endHour = 'Einduur is verplicht.';
    if (formData.daysOfWeek.length === 0) validationErrors.daysOfWeek = 'Selecteer minstens één dag.';

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    const payload = {
      ...formData,
    };

    try {
      const response = await api.put(`${window.baseDomain}api/menu/${menu._id}`, payload);
      if (response) {
        triggerNotification('Menu succesvol bijgewerkt', 'success');
        refreshMenus();
        onClose();
      } else {
        triggerNotification('Fout bij het bijwerken van het menu', 'error');
      }
    } catch (error) {
      console.error('Error updating menu:', error);
      triggerNotification('Fout bij het bijwerken van het menu', 'error');
    }
  };

  if (!isVisible) return null;

  return (
    <ModalWithoutTabs
      onClose={onClose}
      content={
        <div className="menu-component__edit-modal">
          <form className="menu-component__form" onSubmit={handleSubmit}>
            <div className="menu-component__form-group">
              <label>Menu Naam</label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className="menu-component__input"
              />
              {errors.name && <p className="menu-component__error">{errors.name}</p>}
            </div>

            <div className="menu-component__form-group">
              <label>Start Datum</label>
              <input
                type="date"
                name="startDate"
                value={formData.startDate}
                onChange={handleChange}
                className="menu-component__input"
              />
              {errors.startDate && <p className="menu-component__error">{errors.startDate}</p>}
            </div>

            <div className="menu-component__form-group">
              <label>Eind Datum</label>
              <input
                type="date"
                name="endDate"
                value={formData.endDate}
                onChange={handleChange}
                className="menu-component__input"
              />
              {errors.endDate && <p className="menu-component__error">{errors.endDate}</p>}
            </div>

            <div className="menu-component__form-group">
              <label>Start Uur</label>
              <input
                type="time"
                name="startHour"
                value={formData.startHour}
                onChange={handleChange}
                className="menu-component__input"
              />
              {errors.startHour && <p className="menu-component__error">{errors.startHour}</p>}
            </div>

            <div className="menu-component__form-group">
              <label>Eind Uur</label>
              <input
                type="time"
                name="endHour"
                value={formData.endHour}
                onChange={handleChange}
                className="menu-component__input"
              />
              {errors.endHour && <p className="menu-component__error">{errors.endHour}</p>}
            </div>

            <div className="menu-component__form-group">
              <label>Dagen van de week</label>
              <div className="menu-component__checkbox-group">
                {['maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag', 'zondag'].map(
                  (day) => (
                    <label key={day} className="menu-component__checkbox-label">
                      <input
                        type="checkbox"
                        name="daysOfWeek"
                        value={day}
                        checked={formData.daysOfWeek.includes(day)}
                        onChange={handleChange}
                        className="menu-component__checkbox"
                      />
                      {day}
                    </label>
                  )
                )}
              </div>
              {errors.daysOfWeek && <p className="menu-component__error">{errors.daysOfWeek}</p>}
            </div>

            <button type="submit" className="button-style-3">
              Menu Bijwerken
            </button>
          </form>
        </div>
      }
    />
  );
};

export default EditMenuModal;


--- MenuForm.js ---
import React, { useState } from 'react';
import './css/menu.css';

const MenuForm = ({ api, triggerNotification, refreshMenus }) => {
  const [formData, setFormData] = useState({
    name: '',
    startDate: '',
    endDate: '',
    startHour: '',
    endHour: '',
    daysOfWeek: [],
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;

    if (type === 'checkbox') {
      const day = value;
      setFormData((prevFormData) => {
        let daysOfWeek = [...prevFormData.daysOfWeek];
        if (checked) {
          daysOfWeek.push(day);
        } else {
          daysOfWeek = daysOfWeek.filter((d) => d !== day);
        }
        return { ...prevFormData, daysOfWeek };
      });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    setErrors({ ...errors, [name]: '' });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const validationErrors = {};
    if (!formData.name.trim()) validationErrors.name = 'Menu naam is verplicht.';
    if (!formData.startDate) validationErrors.startDate = 'Startdatum is verplicht.';
    if (!formData.endDate) validationErrors.endDate = 'Einddatum is verplicht.';
    if (!formData.startHour) validationErrors.startHour = 'Startuur is verplicht.';
    if (!formData.endHour) validationErrors.endHour = 'Einduur is verplicht.';
    if (formData.daysOfWeek.length === 0) validationErrors.daysOfWeek = 'Selecteer minstens één dag.';

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    const payload = {
      name: formData.name,
      startDate: formData.startDate,
      endDate: formData.endDate,
      startHour: formData.startHour,
      endHour: formData.endHour,
      daysOfWeek: formData.daysOfWeek,
    };

    try {
      const response = await api.post(`${window.baseDomain}api/menu`, payload);
      if (response) {
        setFormData({
          name: '',
          startDate: '',
          endDate: '',
          startHour: '',
          endHour: '',
          daysOfWeek: [],
        });
        setErrors({});
        triggerNotification('Menu succesvol toegevoegd', 'success');
        refreshMenus();
      } else {
        triggerNotification('Fout bij het toevoegen van het menu', 'error');
      }
    } catch (error) {
      console.error('Error adding menu:', error);
      triggerNotification('Fout bij het toevoegen van het menu', 'error');
    }
  };

  return (
    <form className="menu-component__form" onSubmit={handleSubmit}>
      <div className="menu-component__form-group">
        <label>Menu Naam</label>
        <input
          type="text"
          name="name"
          value={formData.name}
          onChange={handleChange}
          placeholder="Menu Naam"
          className="menu-component__input"
        />
        {errors.name && <p className="menu-component__error">{errors.name}</p>}
      </div>

      <div className="menu-component__form-group">
        <label>Start Datum</label>
        <input
          type="date"
          name="startDate"
          value={formData.startDate}
          onChange={handleChange}
          className="menu-component__input"
        />
        {errors.startDate && <p className="menu-component__error">{errors.startDate}</p>}
      </div>

      <div className="menu-component__form-group">
        <label>Eind Datum</label>
        <input
          type="date"
          name="endDate"
          value={formData.endDate}
          onChange={handleChange}
          className="menu-component__input"
        />
        {errors.endDate && <p className="menu-component__error">{errors.endDate}</p>}
      </div>

      <div className="menu-component__form-group">
        <label>Start Uur</label>
        <input
          type="time"
          name="startHour"
          value={formData.startHour}
          onChange={handleChange}
          className="menu-component__input"
        />
        {errors.startHour && <p className="menu-component__error">{errors.startHour}</p>}
      </div>

      <div className="menu-component__form-group">
        <label>Eind Uur</label>
        <input
          type="time"
          name="endHour"
          value={formData.endHour}
          onChange={handleChange}
          className="menu-component__input"
        />
        {errors.endHour && <p className="menu-component__error">{errors.endHour}</p>}
      </div>

      <div className="menu-component__form-group">
        <label>Dagen van de week</label>
        <div className="menu-component__checkbox-group">
          {['maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag', 'zondag'].map(
            (day) => (
              <label key={day} className="menu-component__checkbox-label">
                <input
                  type="checkbox"
                  name="daysOfWeek"
                  value={day}
                  checked={formData.daysOfWeek.includes(day)}
                  onChange={handleChange}
                  className="menu-component__checkbox"
                />
                {day.charAt(0).toUpperCase() + day.slice(1)}
              </label>
            )
          )}
        </div>
        {errors.daysOfWeek && <p className="menu-component__error">{errors.daysOfWeek}</p>}
      </div>

      <button type="submit" className="button-style-3">
        Menu Toevoegen
      </button>
    </form>
  );
};

export default MenuForm;


--- MenuItem.js ---
import React, { useState } from 'react';
import './css/menu.css';
import { FaEllipsisV, FaPencilAlt, FaTrashAlt } from 'react-icons/fa'; // Import additional icons
import ConfirmationModal from '../../Components/Structural/Modal/Delete'; // Adjust the path if necessary
import EditMenuModal from './EditMenuModal';

const MenuItem = ({ menu, api, triggerNotification, refreshMenus }) => {
  const [isTooltipOpen, setIsTooltipOpen] = useState(false);
  const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
  const [isEditModalVisible, setIsEditModalVisible] = useState(false);

  const handleEllipsisClick = () => {
    setIsTooltipOpen(!isTooltipOpen);
  };

  const handleDeleteClick = () => {
    setIsDeleteModalVisible(true);
    setIsTooltipOpen(false);
  };

  const handleEditClick = () => {
    setIsEditModalVisible(true);
    setIsTooltipOpen(false);
  };

  const handleConfirmDelete = async () => {
    setIsDeleteModalVisible(false);
    try {
      await api.delete(`${window.baseDomain}api/menu/${menu._id}`);
      triggerNotification('Menu succesvol verwijderd', 'success');
      refreshMenus();
    } catch (error) {
      console.error('Error deleting menu:', error);
      triggerNotification('Fout bij het verwijderen van het menu', 'error');
    }
  };

  const handleCancelDelete = () => {
    setIsDeleteModalVisible(false);
  };

  return (
    <div className="menu-component__menu-item">
      <div className="menu-component__menu-content">
        <h4>{menu.name}</h4>
        <p>
          Geldig van {menu.startDate} tot {menu.endDate}
        </p>
        <p>
          Van {menu.startHour} tot {menu.endHour}
        </p>
        <p>Dagen: {menu.daysOfWeek.join(', ')}</p>
      </div>
      <div className="menu-component__menu-actions">
        <FaEllipsisV onClick={handleEllipsisClick} className="menu-component__ellipsis-icon" />
        {isTooltipOpen && (
          <div className="tooltip-container">
            <div className="tooltip-item" onClick={handleEditClick}>
              <FaPencilAlt className="tooltip-icon" />
              Bewerken
            </div>
            <div className="tooltip-separator"></div>
            <div className="tooltip-item delete-item" onClick={handleDeleteClick}>
              <FaTrashAlt className="tooltip-icon" />
              Verwijderen
            </div>
          </div>
        )}
      </div>
      {isDeleteModalVisible && (
        <ConfirmationModal
          isVisible={isDeleteModalVisible}
          title="Menu Verwijderen"
          message="Weet u zeker dat u dit menu wilt verwijderen?"
          onConfirm={handleConfirmDelete}
          onCancel={handleCancelDelete}
          confirmText="Verwijderen"
          cancelText="Annuleren"
          confirmButtonClass="discard-button red"
          cancelButtonClass="cancel-button"
        />
      )}
      {isEditModalVisible && (
        <EditMenuModal
          isVisible={isEditModalVisible}
          menu={menu}
          api={api}
          triggerNotification={triggerNotification}
          refreshMenus={refreshMenus}
          onClose={() => setIsEditModalVisible(false)}
        />
      )}
    </div>
  );
};

export default MenuItem;


--- MenuList.js ---
// src/Pages/Menu/MenuList.js

import React from 'react';
import './css/menu.css';
import MenuItem from './MenuItem';

const MenuList = ({ menus, api, triggerNotification, refreshMenus }) => {
  return (
    <div className="menu-component__list">
      <h3>Menu's</h3>
      {menus.length > 0 ? (
        <div className="menu-component__menu-list">
          {menus.map((menu) => (
            <MenuItem
              key={menu._id}
              menu={menu}
              api={api}
              triggerNotification={triggerNotification}
              refreshMenus={refreshMenus}
            />
          ))}
        </div>
      ) : (
        <p>Geen menu's gevonden.</p>
      )}
    </div>
  );
};

export default MenuList;


--- css/menu.css ---
.menu-component {
	display: flex;
	flex-direction: column;
	gap: 20px;
	margin-top: 30px;
	padding-bottom: 80px;

  }
  
  .menu-component__title {
	font-size: 2rem;
	text-align: center;
  }
  
  .menu-component__container {
	display: flex;
	flex-direction: row;
	gap: 20px;
	flex-wrap: wrap;
  }
  
  .menu-component__form {
	flex: 1;
	display: flex;
	flex-direction: column;
	gap: 15px;
	max-width: 100%;
  }
  
  .menu-component__form-group {
	display: flex;
	flex-direction: column;
  }
  
  .menu-component__form-group label {
	margin-bottom: 5px;
	font-weight: 500;
  }
  
  .menu-component__input {
	width: 100%;
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: 5px;
	font-size: 1rem;
  }
  
  .menu-component__checkbox-group {
	display: flex;
	flex-wrap: wrap;
	gap: 10px;
  }
  
  .menu-component__checkbox-label {
	display: flex;
	align-items: center;
  }
  
  .menu-component__checkbox {
	margin-right: 5px;
  }
  
  .menu-component__submit-button {
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	transition: background-color 0.3s ease;
  }
  
  .menu-component__submit-button:hover {
	background-color: #0056b3;
  }
  
  .menu-component__error {
	color: var(--color-red);
	font-size: 0.9rem;
  }
  
  .menu-component__list {
	flex: 1;
  }
  
  .menu-component__menu-list {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  .menu-component__menu-item {
	border: 1px solid #ccc;
	border-radius: 8px;
	padding: 15px;
	position: relative;
	display: flex;
	justify-content: space-between;
	align-items: center;
  }
  
  .menu-component__menu-content h4 {
	margin: 0 0 5px 0;
  }
  
  .menu-component__menu-actions {
	position: relative;
  }
  
  .menu-component__ellipsis-icon {
	cursor: pointer;
	font-size: 18px;
	color: #555;
  }

  
  .menu-component__tooltip-item {
	padding: 8px 15px;
	cursor: pointer;
	display: flex;
	align-items: center;
	gap: 8px;
  }
  
  .menu-component__tooltip-item:hover {
	background-color: #f0f0f0;
  }
  
  .menu-component__tooltip-item.delete-item {
	color: red;
  }
  
  .menu-component__tooltip-item.delete-item:hover {
	background-color: #ffe6e6;
  }
  
  .menu-component__modal-title {
	text-align: center;
	margin-bottom: 20px;
  }
  
  .menu-component__edit-modal {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  /* Remove existing tooltip styles from menu.css */
  /* The following tooltip-related styles have been removed:
  .menu-component .label-with-tooltip {
	display: flex;
	align-items: center;
  }
  
  .menu-component .label-with-tooltip label {
	margin-right: 5px;
  }
  
  .menu-component .button-with-tooltip {
	position: relative;
	display: inline-block;
  }
  
  .menu-component .button-with-tooltip .tooltip {
	display: none; /* Initially hidden */
  /*   ... */
  /* }
  .menu-component .button-with-tooltip svg {
	cursor: pointer;
	color: #555;
	font-size: 16px;
  }
  .menu-component .button-with-tooltip svg:hover {
	color: #000;
  }
  */
  
  @media (max-width: 900px) {
	.menu-component__container {
	  flex-direction: column;
	  padding: 10px;

	}
  
	.menu-component__menu-item {
	  flex-direction: column;
	  align-items: flex-start;
	}
  
	.menu-component__menu-actions {
	  position: absolute;
	  top: 15px;
	  right: 15px;
	}
  }
  

  /* Existing Menu Form Styles */

.menu-component__form {
	display: flex;
	flex-direction: column;
	gap: 20px;
  }
  
  .menu-component__form-group {
	display: flex;
	flex-direction: column;
  }
  
  .menu-component__label-with-tooltip {
	display: flex;
	align-items: center;
	margin-bottom: 5px;
  }
  
  .menu-component__input-container {
	display: flex;
	flex-wrap: wrap;
	gap: 20px;
  }
  
  .menu-component__date-time-group {
	display: flex;
	gap: 20px;
	width: 100%;
  }
  
  .menu-component__date-picker-wrapper,
  .menu-component__time-picker-wrapper {
	flex: 1;
	display: flex;
	flex-direction: column;
  }
  
  .menu-component__checkbox-group {
	display: flex;
	flex-wrap: wrap;
	gap: 10px;
	margin-top: 10px; /* Added margin for spacing */
  }
  
  .menu-component__checkbox-label {
	display: flex;
	align-items: center;
  }
  
  .menu-component__checkbox {
	margin-right: 5px;
  }
  
  .menu-component__submit-button {
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	transition: background-color 0.3s ease;
	align-self: flex-start;
  }
  
  .menu-component__submit-button:hover {
	background-color: #0056b3;
  }
  
  .menu-component__error {
	color: red;
	font-size: 0.9rem;
  }
  
  /* Tooltip styles for Actions (Bewerken & Verwijderen) */
  .tooltip-container {
	position: absolute;
	bottom: 100%;
	right: 0;
	transform: translateY(-10px);
	background-color: white;
	border: 1px solid lightgray;
	border-radius: 5px;
	padding: 5px 0;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
	z-index: 1000;
  }
  
  .tooltip-item {
	display: flex;
	align-items: center;
	padding: 8px 15px;
	cursor: pointer;
  }
  
  .tooltip-item:hover {
	background-color: #f0f0f0;
  }
  
  .tooltip-icon {
	margin-right: 8px;
  }
  
  .tooltip-item.delete-item {
	color: red;
  }
  
  .tooltip-item.delete-item .tooltip-icon {
	color: red;
  }
  
  .tooltip-separator {
	height: 1px;
	background-color: lightgray;
	margin: 5px 0;
  }
  
  /* Header with Icon */
  .menu-component__header {
	display: flex;
	align-items: center;
	gap: 10px;
	margin-bottom: 20px;
  }
  
  .menu-icon {
	font-size: 24px;
	color: var(--color-blue);
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
	.menu-component__date-time-group {
	  flex-direction: column;
	}
  }
  

--- index.js ---
// src/Pages/Menu/index.js

import React, { useState, useEffect } from 'react';
import { withHeader } from '../../Components/Structural/Header/index.js';
import './css/menu.css';
import useApi from '../../Hooks/useApi';
import useNotification from '../../Components/Notification';
import MenuForm from './MenuForm';
import MenuList from './MenuList';

const Menu = () => {
  const api = useApi();
  const { triggerNotification, NotificationComponent } = useNotification();

  // State for the list of menus
  const [menus, setMenus] = useState([]);

  // Fetch the menus at component mount
  useEffect(() => {
    const fetchMenus = async () => {
      try {
        const data = await api.get(window.baseDomain + 'api/menu', { noCache: true });
        if (Array.isArray(data)) {
          setMenus(data);
        } else {
          setMenus([]);
        }
      } catch (error) {
        console.error('Error fetching menus:', error);
        setMenus([]);
        triggerNotification('Fout bij het ophalen van menu\'s.', 'error');
      }
    };
    fetchMenus();
  }, [api, triggerNotification]);

  // Handler to refresh menus
  const refreshMenus = async () => {
    try {
      const data = await api.get(window.baseDomain + 'api/menu', { noCache: true });
      if (Array.isArray(data)) {
        setMenus(data);
      } else {
        setMenus([]);
      }
    } catch (error) {
      console.error('Error fetching menus:', error);
      setMenus([]);
      triggerNotification('Fout bij het ophalen van menu\'s.', 'error');
    }
  };

  return (
    <div className="menu-component">
      <NotificationComponent />
      <div className="menu-component__container">
        <MenuForm
          api={api}
          triggerNotification={triggerNotification}
          refreshMenus={refreshMenus}
        />
        <MenuList
          menus={menus}
          api={api}
          triggerNotification={triggerNotification}
          refreshMenus={refreshMenus}
        />
      </div>
    </div>
  );
};

export default withHeader(Menu);



Directory Structure for "/Users/thibaultvandesompele/Desktop/Mateza 4.0/Client/Dashboard/dashboard-general/src/Pages/Menu":

├── EditMenuModal.js
├── MenuForm.js
├── MenuItem.js
├── MenuList.js
├── css
│   └── menu.css
└── index.js


List of Files:
EditMenuModal.js
MenuForm.js
MenuItem.js
MenuList.js
css/menu.css
index.js

Look at the style of this menu component. I want to create another component that uses an identical layout, but uses different names for the classes and has different content.

This component should be called Uitzonderingen.

In the Uitzondering form, we see selection boxes for the following:
- Title (String)
- Type (selection box with options Opening, Sluiting, Sluitingsdag, Uitzondering)
- Toepassing (selection box with options Volledige Dag, Ontbijt, Lunch, Diner)

When selected Sluiting show the following:
- Start Datum (Date)
- Einde Datum (Date)

When selected Opening show the following:
- Start Datum (Date)
- Einde Datum (Date)
- Start Uur (Time)
- Eind Uur (Time)
- Max. Zitplaatsen (Number)

When selected Uitzondering show the following:
- Start Datum (Date)
- Einde Datum (Date)
- Start Uur (Time)
- Eind Uur (Time)
- Max. Zitplaatsen (Number)

When Sluitingsdag is selected as Type skip the Toepassing and consider it as if the Toepassing Volledige Dag was selected in the data submission, show the same fields as in Sluiting. We show these fields:
- Start Datum (Date)
- Einde Datum (Date)

Show at the end the dagen van de week for Opening, Sluiting, Sluitingsdag and Uitzondering and select all dagen van de week by default.

At the end of the form we have the Opslaan button.

The data is shown in UitzonderingenList with as title the title.

Make sure that we consider that the data is different for the different toepassingen.

Use the endpoint api/uitzonderingen and handle the adding, deleting and changing of data exactly the same way as in Menu but instead with other data.

Use english names to store the data as in menu like startDate, startHour, daysOfWeek...

Print the code in full. Maintain the same layout as in menu but give the classes unique names that fit the Uitzonderingen.

Print the code in full. Be complete. Use the same layout. Prefix all styling classes with .exceptions-page .other-classes. and have .exceptions-page as the parent class in index.js. 