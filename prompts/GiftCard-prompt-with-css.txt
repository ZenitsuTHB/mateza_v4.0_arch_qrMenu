File Contents:

--- AddGiftcardSection/ValueSelector.js ---
import React, { useState } from 'react';
import './css/valueSelector.css';

const ValueSelector = ({ value, onChange }) => {
  const predefinedValues = [25, 50, 75, 100];
  const [customValue, setCustomValue] = useState(value || '');

  const handlePredefinedValueClick = (val) => {
    setCustomValue(val);
    onChange({ target: { name: 'value', value: val } });
  };

  const handleSliderChange = (e) => {
    const val = e.target.value;
    setCustomValue(val);
    onChange({ target: { name: 'value', value: val } });
  };

  const handleInputChange = (e) => {
    const val = e.target.value;
    setCustomValue(val);
    onChange({ target: { name: 'value', value: val } });
  };

  return (
    <div className="value-selector">
      <div className="predefined-values">
        {predefinedValues.map((val) => (
          <button
            key={val}
            type="button"
            className={`predefined-value-button ${parseFloat(customValue) === val ? 'active' : ''}`}
            onClick={() => handlePredefinedValueClick(val)}
          >
            â‚¬{val}
          </button>
        ))}
      </div>
      <div className="slider-container">
        <input
          type="range"
          min="5"
          max="500"
          step="5"
          value={customValue}
          onChange={handleSliderChange}
          className="slider"
        />
        <input
          type="number"
          name="value"
          value={customValue}
          onChange={handleInputChange}
          className="value-input"
          min="1"
          step="0.01"
        />
      </div>
    </div>
  );
};

export default ValueSelector;


--- AddGiftcardSection/css/addGiftCardSection.css ---
/* src/components/GiftCard/css/addGiftCardSection.css */

.gift-card-page .add-gift-card-section {
	display: flex;
	flex-direction: column;
	gap: 20px;
  }
  
  .gift-card-page .add-gift-card-section__title {
	margin-bottom: 20px;
  }
  
  .gift-card-page .add-gift-card-section__form {
	display: flex;
	flex-direction: column;
	gap: 15px; /* Reduced gap between inputs */
  }
  
  .gift-card-page .form-group {
	display: flex;
	flex-direction: column;
  }
  
  .gift-card-page .name-fields {
	display: flex;
	flex-wrap: nowrap;
	flex-direction: row;
	gap: 10px;
  }
  
  .gift-card-page .name-fields .input-container {
	flex: 1;
	width: 40%;
  }
  
  .gift-card-page .input-container {
	position: relative;
  }
  
  .gift-card-page .input-icon {
	position: absolute;
	top: 50%;
	left: 10px;
	transform: translateY(-50%);
	color: var(--color-gray);
	pointer-events: none;
  }
  
  .gift-card-page .input-container input,
  .gift-card-page .input-container select {
	width: 100%;
	padding: 10px 10px 10px 35px;
	border: 1px solid #ccc;
	border-radius: var(--border-radius);
	font-size: 1rem;
	transition: border-color 0.3s ease;
  }

  .gift-card-page #design {
	height: 46px;
  }
  
  .gift-card-page .input-container input:focus,
  .gift-card-page .input-container select:focus {
	border-color: var(--color-blue);
	outline: none;
  }
  
  .gift-card-page .input-container select {
	appearance: none;
	background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg xmlns='http://www.w3.org/2000/svg' width='4' height='5' viewBox='0 0 4 5'%3E%3Cpath fill='%236c757d' d='M2 0L0 2h4L2 0zM2 5L0 3h4l-2 2z'/%3E%3C/svg%3E");
	background-repeat: no-repeat;
	background-position: right 10px center;
	background-size: 8px 10px;
	cursor: pointer;
  }
  
  .gift-card-page .form-error {
	color: var(--color-red);
	font-size: 0.9rem;
	margin-top: 5px;
	display: flex;
	align-items: center;
	gap: 5px;
  }
  
  .gift-card-page .form-success {
	color: var(--color-green);
	font-size: 0.9rem;
	margin-top: 5px;
	display: flex;
	align-items: center;
	gap: 5px;
  }

  @media (max-width: 768px) {
	.gift-card-page .name-fields {
	  flex-direction: column;
	}
  
	.gift-card-page .add-gift-card-section__form {
	  gap: 10px;
	}
  }
  

--- AddGiftcardSection/css/valueSelector.css ---
.gift-card-page .value-selector {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  .gift-card-page .predefined-values {
	display: flex;
	gap: 10px;
  }
  
  .gift-card-page .predefined-value-button {
	flex: 1;
	padding: 12px;
	border: 1px solid #ccc;
	border-radius: var(--border-radius);
	background-color: var(--color-white);
	cursor: pointer;
	font-size: 1rem;
	transition: background-color 0.3s ease;
  }
  
  .gift-card-page .predefined-value-button.active,
  .gift-card-page .predefined-value-button:hover {
	background-color: var(--color-blue);
	color: var(--color-white);
  }
  
  .gift-card-page .slider-container {
	display: flex;
	align-items: center;
	gap: 15px;
  }
  
  .gift-card-page .slider {
	flex: 1;
	-webkit-appearance: none;
	height: 5px;
	background: #ddd;
	border-radius: 5px;
	outline: none;
  }
  
  .gift-card-page .slider::-webkit-slider-thumb {
	-webkit-appearance: none;
	appearance: none;
	width: 20px;
	height: 20px;
	background: var(--color-blue);
	cursor: pointer;
	border-radius: 50%;
  }
  
  .gift-card-page .value-input {
	width: 80px;
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: var(--border-radius);
	font-size: 1rem;
  }
  

--- AddGiftcardSection/index.js ---
import React, { useState } from 'react';
import './css/addGiftCardSection.css';
import { FaUser, FaEnvelope, FaImage, FaPlus } from 'react-icons/fa';
import ValueSelector from './ValueSelector';
import useApi from '../../../../Hooks/useApi';

const AddGiftCardSection = () => {
  const api = useApi();

  const [formData, setFormData] = useState({
    value: '',
    firstName: '',
    lastName: '',
    email: '',
    design: '',
  });

  const [errors, setErrors] = useState({});
  const [successMessage, setSuccessMessage] = useState('');

  const giftCardDesigns = [
    { value: '', label: 'Selecteer Ontwerp' },
    { value: 'design1', label: 'Klassiek' },
    { value: 'design2', label: 'Modern' },
    { value: 'design3', label: 'Feestelijk' },
  ];

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
    setErrors({ ...errors, [name]: '' });
    setSuccessMessage('');
  };

  const validate = () => {
    const newErrors = {};

    if (!formData.value || isNaN(formData.value) || parseFloat(formData.value) <= 0) {
      newErrors.value = 'Voer een geldig bedrag in Euro in.';
    }

    if (!formData.firstName.trim()) {
      newErrors.firstName = 'Voornaam is verplicht.';
    }

    if (!formData.lastName.trim()) {
      newErrors.lastName = 'Achternaam is verplicht.';
    }

    if (!formData.email.trim()) {
      newErrors.email = 'E-mailadres is verplicht.';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Voer een geldig e-mailadres in.';
    }

    if (!formData.design) {
      newErrors.design = 'Selecteer een ontwerp voor de kaart.';
    }

    return newErrors;
  };

  const generateUniqueCode = () => {
    // Simple code generation logic (you can make it more complex if needed)
    return Math.random().toString(36).substr(2, 8).toUpperCase();
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const validationErrors = validate();

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
    } else {
      try {
        const uniqueCode = generateUniqueCode(); // Generate the unique code here

        // Get current date in CEST and format as YYYY-MM-DD
        const creationDate = new Date();
        const options = {
          timeZone: 'Europe/Amsterdam', // CEST timezone
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
        };
        const formatter = new Intl.DateTimeFormat('nl-NL', options);
        const formattedDate = formatter.format(creationDate); // Gives DD-MM-YYYY

        // Reformat to YYYY-MM-DD
        const [day, month, year] = formattedDate.split('-');
        const formattedCreationDate = `${year}-${month}-${day}`;

        const giftCardData = {
          code: uniqueCode, // Include the code in the data sent to the server
          value: parseFloat(formData.value),
          firstName: formData.firstName.trim(),
          lastName: formData.lastName.trim(),
          email: formData.email.trim(),
          design: formData.design,
          status: 'Admin Cadeaubon', // Set the status to "Admin Cadeaubon"
          creationDate: formattedCreationDate, // Include the creation date
        };

        const response = await api.post(window.baseDomain + 'api/giftcards', giftCardData);

        if (response) {
          setSuccessMessage(`Cadeaubon succesvol aangemaakt! Uw code is: ${uniqueCode}`);
          setFormData({
            value: '',
            firstName: '',
            lastName: '',
            email: '',
            design: '',
          });
          setErrors({});
        } else {
          setErrors({ server: 'Er is een fout opgetreden bij het aanmaken van de cadeaubon.' });
        }
      } catch (error) {
        console.error(error);
        setErrors({ server: 'Er is een fout opgetreden bij het aanmaken van de cadeaubon.' });
      }
    }
  };

  return (
    <div className="add-gift-card-section">
      <h2 className="add-gift-card-section__title">Cadeaubon Toevoegen</h2>
      <form className="add-gift-card-section__form" onSubmit={handleSubmit} noValidate>
        <div className="form-group">
          <ValueSelector value={formData.value} onChange={handleChange} />
          {errors.value && <p className="form-error">{errors.value}</p>}
        </div>

        <div className="form-group">
          <div className="input-container">
            <FaUser className="input-icon" />
            <input
              type="text"
              id="firstName"
              name="firstName"
              placeholder="Voornaam Ontvanger"
              value={formData.firstName}
              onChange={handleChange}
            />
          </div>
          {errors.firstName && <p className="form-error">{errors.firstName}</p>}
        </div>

        <div className="form-group">
          <div className="input-container">
            <FaUser className="input-icon" />
            <input
              type="text"
              id="lastName"
              name="lastName"
              placeholder="Achternaam Ontvanger"
              value={formData.lastName}
              onChange={handleChange}
            />
          </div>
          {errors.lastName && <p className="form-error">{errors.lastName}</p>}
        </div>

        <div className="form-group">
          <div className="input-container">
            <FaEnvelope className="input-icon" />
            <input
              type="email"
              id="email"
              name="email"
              placeholder="email@voorbeeld.com"
              value={formData.email}
              onChange={handleChange}
            />
          </div>
          {errors.email && <p className="form-error">{errors.email}</p>}
        </div>

        <div className="form-group">
          <div className="input-container select-container">
            <FaImage className="input-icon" />
            <select
              id="design"
              name="design"
              value={formData.design}
              onChange={handleChange}
            >
              {giftCardDesigns.map((design) => (
                <option key={design.value} value={design.value}>
                  {design.label}
                </option>
              ))}
            </select>
          </div>
          {errors.design && <p className="form-error">{errors.design}</p>}
        </div>

        {successMessage && (
          <p className="form-success">
            <FaPlus /> {successMessage}
          </p>
        )}

        <button type="submit" className="button-style-3">
          Aanmaken
        </button>
      </form>
    </div>
  );
};

export default AddGiftCardSection;


--- OverviewSection/SearchBar.js ---
// SearchBar.js

import React from 'react';

const SearchBar = ({ value, onChange, placeholder, className }) => {
  return (
    <input
      type="text"
      placeholder={placeholder}
      value={value}
      onChange={onChange}
      className={className}
    />
  );
};

export default SearchBar;


--- OverviewSection/css/overviewSection.css ---
/* src/components/GiftCard/OverviewSection/css/overviewSection.css */

.gift-card-page .overview-section {
    display: flex;
    flex-direction: column;
    padding: 20px;
}

.gift-card-page .bubble-style {
    font-size: 0.8rem;
    color: var(--color-blue);
    text-align: center;
    border: var(--color-blue) 1px solid;
    border-radius: 200px;
    margin-bottom: 10px;
    padding: 6px 12px; /* Optional: more padding for better display */
    background-color: #f0f8ff; /* Optional: light background color for contrast */
}

.gift-card-page .bold-customer-name {
    font-weight: bold;
}

.gift-card-page .overview-section__controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 20px;
}

.gift-card-page .overview-section__search {
    flex: 1;
    min-width: 200px;
    width: 200px;
    padding: 10px;
    border: 1px solid var(--input-border);
    border-radius: var(--border-radius);
    font-size: var(--font-size);
    transition: border-color 0.3s ease;
}

.gift-card-page .overview-section__search:focus {
    border-color: var(--input-focus-border);
    outline: none;
}

.gift-card-page .overview-section__table-container {
    width: 100%;
    overflow-x: auto;
}

.gift-card-page .overview-section__table {
    width: 100%;
    border-collapse: collapse;
    box-shadow: var(--box-shadow);
    table-layout: fixed; /* Ensures fixed layout */
}

.gift-card-page .overview-section__table th,
.gift-card-page .overview-section__table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
    width: 12.5%; /* 100% / 8 columns */
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.gift-card-page .overview-section__table th {
    background-color: var(--table-header-bg);
    cursor: pointer;
    user-select: none;
    font-weight: bold;
    font-size: var(--font-size);
    position: relative; /* For sort icons positioning */
}

.gift-card-page .overview-section__table th .sort-icon {
    margin-left: 5px;
    display: inline-block;
}

.gift-card-page .overview-section__table tr:hover {
    background-color: var(--color-light-gray);
}

.gift-card-page .status {
    padding: 4px 8px;
    border-radius: 4px;
    color: white;
    font-weight: bold;
    text-align: center;
    display: inline-block;
}

.gift-card-page .status--used {
    background-color: var(--color-red);
}

.gift-card-page .status--unused {
    background-color: var(--color-green);
}

.gift-card-page .no-data {
    text-align: center;
    padding: 20px;
    color: var(--color-gray);
    font-size: var(--font-size);
}

.gift-card-page .overview-section__pagination {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 20px;
}

.gift-card-page .pagination__info {
    font-size: var(--font-size);
    color: var(--color-gray);
}

.gift-card-page .pagination__controls {
    display: flex;
    align-items: center;
    gap: 8px;
}

.gift-card-page .pagination__button {
    background-color: var(--color-blue);
    color: var(--color-white);
    border: none;
    border-radius: 5px;
    padding: 8px 12px;
    cursor: pointer;
    font-size: 0.9rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease;
}

.gift-card-page .pagination__button:disabled {
    background-color: var(--color-blue);
    opacity: 0.5;
    cursor: not-allowed;
}

.gift-card-page .pagination__button:hover:not(:disabled) {
    background-color: var(--button-hover-blue);
}

.gift-card-page .overview-section__export:hover {
    background-color: var(--color-green);
}

.gift-card-page .overview-section .search-bars-container {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
    margin-top: 25px;
    gap: 10px;
    padding: 0;
    background-color: var(--color-bg);
}

.gift-card-page .overview-section .search-bar {
    flex: 1;
    font-size: 15px;
    height: 40px;
    padding: 0 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: var(--color-bg);
}

/* Optional: Responsive adjustments */
@media (max-width: 768px) {
    .gift-card-page .overview-section__table th,
    .gift-card-page .overview-section__table td {
        padding: 8px 10px;
        font-size: 0.9rem;
    }
}


--- OverviewSection/index.js ---
import React, { useState, useEffect } from 'react';
import './css/overviewSection.css';
import SearchBar from './SearchBar';
import {
  FaSortUp,
  FaSortDown,
  FaSort,
  FaChevronLeft,
  FaChevronRight,
  FaAngleDoubleLeft,
  FaAngleDoubleRight,
} from 'react-icons/fa';
import useApi from '../../../../Hooks/useApi';

const OverviewSectionFlex = () => {
  const api = useApi();

  const [giftCards, setGiftCards] = useState([]);
  const [customerSearch, setCustomerSearch] = useState('');
  const [emailSearch, setEmailSearch] = useState('');
  const [amountSearch, setAmountSearch] = useState('');
  const [sortedColumn, setSortedColumn] = useState(null);
  const [sortDirection, setSortDirection] = useState('asc');
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  useEffect(() => {
    const fetchGiftCards = async () => {
      try {
        console.log("Giftcards GET");
        const data = await api.get(window.baseDomain + 'api/giftcards', { noCache: true });

        if (Array.isArray(data)) {
          setGiftCards(data);
        } else {
          console.error('Expected an array of gift cards, but received:', data);
          setGiftCards([]);
        }
      } catch (error) {
        console.error('Error fetching gift cards:', error);
        setGiftCards([]); // Set to empty array on error
      }
    };
    fetchGiftCards();
  }, [api]);

  // Handle sorting
  const handleSort = (column) => {
    if (sortedColumn === column) {
      // Toggle sort direction
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortedColumn(column);
      setSortDirection('asc');
    }
  };

  // Sort gift cards based on sortedColumn and sortDirection
  const getSortedGiftCards = (cards) => {
    if (!Array.isArray(cards)) return [];

    if (!sortedColumn) return cards;

    return [...cards].sort((a, b) => {
      let aVal = a[sortedColumn];
      let bVal = b[sortedColumn];

      // Handle undefined values
      if (aVal === undefined || aVal === null) aVal = '';
      if (bVal === undefined || bVal === null) bVal = '';

      // Numeric comparison for specific columns
      if (sortedColumn === 'value' || sortedColumn === 'availableBalance') {
        aVal = parseFloat(aVal) || 0;
        bVal = parseFloat(bVal) || 0;
      } else if (sortedColumn === 'creationDate' || sortedColumn === 'expirationDate') {
        // Date comparison
        aVal = new Date(aVal);
        bVal = new Date(bVal);
      } else {
        // String comparison
        aVal = aVal.toString().toLowerCase();
        bVal = bVal.toString().toLowerCase();
      }

      if (aVal < bVal) return sortDirection === 'asc' ? -1 : 1;
      if (aVal > bVal) return sortDirection === 'asc' ? 1 : -1;
      return 0;
    });
  };

  // Filter gift cards based on search queries
  const getFilteredGiftCards = (cards) => {
    if (!Array.isArray(cards)) return [];

    return cards.filter((card) => {
      const firstName = card.firstName || '';
      const lastName = card.lastName || '';
      const email = card.email || '';
      const value = card.value !== undefined ? card.value.toString() : '';

      const customerName = `${firstName} ${lastName}`.toLowerCase();
      const matchesCustomer = customerName.includes(customerSearch.toLowerCase());
      const matchesEmail = email.toLowerCase().includes(emailSearch.toLowerCase());
      const matchesAmount =
        amountSearch === '' || value.includes(amountSearch);

      return matchesCustomer && matchesEmail && matchesAmount;
    });
  };

  // Get the processed gift cards
  const sortedGiftCards = getSortedGiftCards(giftCards);
  const processedGiftCards = getFilteredGiftCards(sortedGiftCards);

  // Pagination calculations
  const totalPages = Math.ceil(processedGiftCards.length / itemsPerPage) || 1;
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentGiftCards = processedGiftCards.slice(indexOfFirstItem, indexOfLastItem);

  // Handle page navigation
  const goToFirstPage = () => setCurrentPage(1);
  const goToPreviousPage = () => setCurrentPage((prev) => Math.max(prev - 1, 1));
  const goToNextPage = () => setCurrentPage((prev) => Math.min(prev + 1, totalPages));
  const goToLastPage = () => setCurrentPage(totalPages);

  // Handle Export to CSV
  const handleExport = () => {
    const headers = [
      'Status',
      'Voornaam',
      'Achternaam',
      'Bedrag (â‚¬)',
      'Saldo (â‚¬)',
      'Aanmaak',
      'Verval',
      'Email'
    ];
    const rows = processedGiftCards.map((card) => {
      // Calculate expiration date by adding one year to creationDate
      let expirationDate = 'N.v.t.';
      if (card.creationDate) {
        // Parse creationDate and add one year
        const [year, month, day] = card.creationDate.split('-').map(Number);
        const creationDateObj = new Date(year, month - 1, day);
        creationDateObj.setFullYear(creationDateObj.getFullYear() + 1);
        // Format expiration date as YYYY-MM-DD
        const options = {
          timeZone: 'Europe/Amsterdam',
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
        };
        const formatter = new Intl.DateTimeFormat('nl-NL', options);
        const formattedExpirationDate = formatter.format(creationDateObj);
        const [expDay, expMonth, expYear] = formattedExpirationDate.split('-');
        expirationDate = `${expYear}-${expMonth}-${expDay}`;
      }

      return [
        statusMapping[card.status] || card.status,
        card.firstName || '',
        card.lastName || '',
        card.value || '',
        card.availableBalance || '',
        card.creationDate || 'N.v.t.',
        expirationDate,
        card.email || '',
      ];
    });

    const csvContent =
      'data:text/csv;charset=utf-8,' +
      [headers, ...rows].map((e) => e.join(',')).join('\n');

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement('a');
    link.setAttribute('href', encodedUri);
    link.setAttribute('download', 'cadeaubonnen.csv');
    document.body.appendChild(link);

    link.click();
    document.body.removeChild(link);
  };

  // Render sort icon based on current sort state
  const renderSortIcon = (column) => {
    if (sortedColumn !== column) {
      return <FaSort />;
    }
    return sortDirection === 'asc' ? <FaSortUp /> : <FaSortDown />;
  };

  // Status mapping
  const statusMapping = {
    Used: 'Gebruikt',
    Unused: 'Niet Gebruikt',
    'Admin Cadeaubon': 'Admin Cadeaubon',
    // Add more mappings if necessary
  };

  return (
    <div className="overview-section">
      <h2 className="overview-section__title">Cadeaubon Lijst</h2>

      {/* Search Bars */}
      <div className="search-bars-container">
        <SearchBar
          placeholder="Zoeken op klant"
          value={customerSearch}
          onChange={(e) => setCustomerSearch(e.target.value)}
          className="search-bar"
        />
        <SearchBar
          placeholder="Zoeken op email"
          value={emailSearch}
          onChange={(e) => setEmailSearch(e.target.value)}
          className="search-bar"
        />
        <SearchBar
          placeholder="Zoeken op bedrag"
          value={amountSearch}
          onChange={(e) => setAmountSearch(e.target.value)}
          className="search-bar"
        />
      </div>

      <div className="overview-section__table-container">
        <table className="overview-section__table">
          <thead>
            <tr className="table-header-row">
              <th
                onClick={() => handleSort('status')}
                style={{ width: '15%' }}
              >
                Status {renderSortIcon('status')}
              </th>
              <th onClick={() => handleSort('firstName')}>
                Voornaam {renderSortIcon('firstName')}
              </th>
              <th onClick={() => handleSort('lastName')}>
                Achternaam {renderSortIcon('lastName')}
              </th>
              <th onClick={() => handleSort('value')}>
                Bedrag (â‚¬) {renderSortIcon('value')}
              </th>
              <th onClick={() => handleSort('availableBalance')}>
                Beschikbaar Saldo (â‚¬) {renderSortIcon('availableBalance')}
              </th>
              <th onClick={() => handleSort('creationDate')}>
                Aanmaakdatum {renderSortIcon('creationDate')}
              </th>
              <th onClick={() => handleSort('expirationDate')}>
                Vervaldatum {renderSortIcon('expirationDate')}
              </th>
              <th onClick={() => handleSort('email')}>
                E-mailadres {renderSortIcon('email')}
              </th>
            </tr>
          </thead>
          <tbody>
            {currentGiftCards.length > 0 ? (
              currentGiftCards.map((card) => {
                // Calculate expiration date by adding one year to creationDate
                let expirationDate = 'N.v.t.';
                if (card.creationDate) {
                  // Parse creationDate and add one year
                  const [year, month, day] = card.creationDate.split('-').map(Number);
                  const creationDateObj = new Date(year, month - 1, day);
                  creationDateObj.setFullYear(creationDateObj.getFullYear() + 1);
                  // Format expiration date as YYYY-MM-DD
                  const options = {
                    timeZone: 'Europe/Amsterdam',
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                  };
                  const formatter = new Intl.DateTimeFormat('nl-NL', options);
                  const formattedExpirationDate = formatter.format(creationDateObj);
                  const [expDay, expMonth, expYear] = formattedExpirationDate.split('-');
                  expirationDate = `${expYear}-${expMonth}-${expDay}`;
                }

                return (
                  <tr key={card._id} className="table-body-row">
                    <td>
                      <span className="bubble-style">
                        {statusMapping[card.status] || card.status}
                      </span>
                    </td>
                    <td>{card.firstName || ''}</td>
                    <td>{card.lastName || ''}</td>
                    <td>â‚¬{parseFloat(card.value || 0).toFixed(2)}</td>
                    <td>â‚¬{parseFloat(card.availableBalance || 0).toFixed(2)}</td>
                    <td>{card.creationDate || 'N.v.t.'}</td>
                    <td>{expirationDate}</td>
                    <td>{card.email || ''}</td>
                  </tr>
                );
              })
            ) : (
              <tr className="no-data-row">
                <td colSpan="8" className="no-data">
                  Geen cadeaubonnen gevonden.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
      <div className="overview-section__pagination">
        <div className="pagination__info">
          Pagina {currentPage} van {totalPages}
        </div>
        <div className="pagination__controls">
          <button
            onClick={goToFirstPage}
            disabled={currentPage === 1}
            className="pagination__button"
            title="Eerste Pagina"
          >
            <FaAngleDoubleLeft />
          </button>
          <button
            onClick={goToPreviousPage}
            disabled={currentPage === 1}
            className="pagination__button"
            title="Vorige Pagina"
          >
            <FaChevronLeft />
          </button>
          <button
            onClick={goToNextPage}
            disabled={currentPage === totalPages}
            className="pagination__button"
            title="Volgende Pagina"
          >
            <FaChevronRight />
          </button>
          <button
            onClick={goToLastPage}
            disabled={currentPage === totalPages}
            className="pagination__button"
            title="Laatste Pagina"
          >
            <FaAngleDoubleRight />
          </button>
        </div>
        <div className="export-button-container">
          <button
            className="button-style-3 button-export"
            onClick={handleExport}
          >
            Exporteer naar CSV
          </button>
        </div>
      </div>
    </div>
  );
};

export default OverviewSectionFlex;


--- ValidationSection/ValidationPopup.js ---
// src/components/GiftCard/ValidationPopup/index.js

import React from 'react';
import './css/validationPopup.css';
import { FaTimesCircle } from 'react-icons/fa';

const ValidationPopup = ({
  giftCardData,
  code, // Nieuwe prop toegevoegd
  onClose,
  deductValue,
  setDeductValue,
  deductError,
  handleDeduct,
}) => {
  return (
    <div className="validation-popup__container">
      <div className="validation-popup__header">
        <h2 className="secondary-title center">Cadeaubon Details</h2>
        <div className='validation-popup__data-bubble'>Code {code}</div> {/* Dynamische weergave van de code */}
      </div>
      
      <div className="validation-popup__info">
        <div className="validation-popup__labels">
          <p>Status:</p>
          <p>Initieel Bedrag:</p>
          <p>Beschikbaar Saldo:</p>
          <p>Vervaldatum:</p>
          <p>Geldig voor maanden:</p>
          <p>Aanmaakdatum:</p>
        </div>
        <div className="validation-popup__values">
          <p>{giftCardData.status}</p>
          <p>{giftCardData.initialValue}</p>
          <p>â‚¬{giftCardData.availableBalance}</p>
          <p>{giftCardData.expirationDate}</p>
          <p>{giftCardData.monthsValid} maanden</p>
          <p>{giftCardData.reservationDate}</p>
        </div>
      </div>
      <div className="validation-popup__deduct">
        <label htmlFor="deduct">Cadeaubon Verminderen</label>
        <input
          type="number"
          id="deduct"
          value={deductValue}
          onChange={(e) => setDeductValue(e.target.value)}
          placeholder="Voer bedrag in"
        />
        {deductError && (
          <p className="validation-popup__deduct-error">
            <FaTimesCircle /> {deductError}
          </p>
        )}
      </div>
      <button
        className="button-style-3"
        onClick={handleDeduct}
      >
        Bedrag Afschrijven Cadeaubon
      </button>
    </div>
  );
};

export default ValidationPopup;


--- ValidationSection/css/validationPopup.css ---
/* src/components/GiftCard/ValidationPopup/css/validationPopup.css */

.gift-card-page .validation-popup__container {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  .gift-card-page .validation-popup__header {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
  }
  
  .gift-card-page .validation-popup__data-bubble {
	font-size: 0.8rem;
	color: var(--color-blue);
	text-align: center;
	border: var(--color-blue) 1px solid;
	border-radius: 200px;
	margin-bottom: 10px;
	padding: 6px 12px;
	background-color: #f0f8ff;
  }
  
  .gift-card-page .validation-popup__info {
	display: grid;
	grid-template-columns: 1fr 1fr;
	row-gap: 10px;
	column-gap: 20px;
  }
  
  .gift-card-page .validation-popup__info p {
	margin: 5px 0;
  }
  
  .gift-card-page .validation-popup__deduct {
	display: flex;
	flex-direction: column;
	gap: 5px;
  }
  
  .gift-card-page .validation-popup__deduct input {
	padding: 8px;
	border: 1px solid #ccc;
	border-radius: 8px;
	font-size: 1rem;
  }
  
  .gift-card-page .validation-popup__deduct-error {
	color: var(--color-red);
	font-size: 0.9rem;
	display: flex;
	align-items: center;
	gap: 5px;
  }
  
  @media (max-width: 768px) {
	.gift-card-page .validation-popup__info {
	  grid-template-columns: 1fr;
	}
  }
  
  .gift-card-page .validation-popup__validate-icon {
	margin-right: 5px;
  }
  

--- ValidationSection/css/validationSection.css ---
/* Main Validation Section */
.gift-card-page .validation-section {
	display: flex;
	flex-direction: column;
	gap: 15px;
}


.gift-card-page .validation-section__description {
	font-size: 0.9rem;
	font-style: italic;
	color: #6c757d;
	margin-top: -8px;
}

.gift-card-page .validation-section__input {
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: 8px;
	font-size: 1rem;
}

.gift-card-page .validation-section__error {
	color: var(--color-red);
	font-size: 0.9rem;
	display: flex;
	align-items: center;
	gap: 5px;
}



.validation-popup__content {
	position: absolute;
	top: 50%;
	left: 50%;
	width: 90%;
	max-width: 500px;
	background-color: #ffffff;
	border-radius: 8px;
	padding: 20px;
	transform: translate(-50%, -50%);
	box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
	display: flex;
	flex-direction: column;
	gap: 15px;
}

.validation-popup__header {
	display: flex;
	justify-content: space-between;
	align-items: center;
}

.validation-popup__header h3 {
	margin: 0;
	display: flex;
	align-items: center;
	gap: 5px;
}

.validation-popup__date {
	font-size: 0.8rem;
	color: #6c757d;
}

.validation-popup__info {
	display: flex;
	gap: 10px;
}

.validation-popup__labels,
.validation-popup__values {
	flex: 1;
}


.validation-popup__values p {
	margin: 5px 0;
}

.validation-popup__deduct {
	display: flex;
	flex-direction: column;
	gap: 5px;
}

.validation-popup__deduct label {
	font-weight: bold;
}

.validation-popup__deduct input {
	padding: 8px;
	border: 1px solid #ccc;
	border-radius: 8px;
	font-size: 1rem;
}

.validation-popup__deduct-error {
	color: var(--color-red);
	font-size: 0.9rem;
	display: flex;
	align-items: center;
	gap: 5px;
}

.validation-popup__validate-button {
	padding: 10px;
	background-color: var(--color-blue);
	color: #ffffff;
	border: none;
	border-radius: 8px;
	cursor: pointer;
	font-size: 1rem;
	display: flex;
	align-items: center;
	justify-content: center;
	transition: background-color 0.3s ease;
}

.validation-popup__validate-button:hover {
	background-color: darken(var(--color-blue), 10%);
}

/* Responsive Design */
@media (max-width: 768px) {
	.validation-popup__content {
		width: 95%;
	}

	.validation-popup__info {
		flex-direction: column;
	}
}


--- ValidationSection/index.js ---
// src/components/GiftCard/ValidationSection/index.js

import React, { useState } from 'react';
import ModalWithoutTabs from '../../../../Components/Structural/Modal/Standard'; // Adjusted import path
import './css/validationSection.css';
import { FaTimesCircle } from 'react-icons/fa';
import ValidationPopup from './ValidationPopup'; // Import the ValidationPopup component

const ValidationSection = () => {
  const [code, setCode] = useState('');
  const [isValid, setIsValid] = useState(null); // null: no attempt, true: valid, false: invalid
  const [showPopup, setShowPopup] = useState(false);
  const [deductValue, setDeductValue] = useState('');
  const [deductError, setDeductError] = useState('');

  // Mock data for demonstration purposes
  const giftCardData = {
    status: 'Active',
    initialValue: 'â‚¬100', // Aangepast naar Euro-teken
    availableBalance: 100,
    expirationDate: '31-12-2025', // Formaat aangepast indien nodig
    monthsValid: 24,
    reservationDate: '27-04-2024', // Formaat aangepast indien nodig
  };

  const handleValidateCode = () => {
    // Simple validation logic (for demonstration)
    if (code.trim().toUpperCase() === 'GIFT2024') { // Case-insensitive vergelijking
      setIsValid(true);
      setShowPopup(true);
    } else {
      setIsValid(false);
    }
  };

  const handleDeduct = () => {
    const value = parseFloat(deductValue);
    if (isNaN(value) || value <= 0) {
      setDeductError('Voer een geldig bedrag in.');
      return;
    }
    if (value > giftCardData.availableBalance) {
      setDeductError('Afschrijving overschrijdt beschikbaar saldo.');
      return;
    }
    // Proceed with deduction logic (e.g., API call)
    // For demonstration, we'll just close the popup
    setDeductError('');
    setShowPopup(false);
    alert(`â‚¬${value} is afgeschreven van uw cadeaubon.`);
  };

  return (
    <div className="validation-section">
      <h2 className="validation-section__title">Valideer</h2>
      <p className="validation-section__description">
        Voer hier uw cadeaubon code in
      </p>
      <input
        type="text"
        className="validation-section__input"
        placeholder="Voer Cadeaubon Code in"
        value={code}
        onChange={(e) => setCode(e.target.value)}
      />
      <button
        className="button-style-3"
        onClick={handleValidateCode}
      >
        Code Valideren
      </button>
      {isValid === false && (
        <p className="validation-section__error">
          <FaTimesCircle /> Voer een geldige code in
        </p>
      )}

      {showPopup && (
        <ModalWithoutTabs
          onClose={() => setShowPopup(false)}
          content={
            <ValidationPopup
              giftCardData={giftCardData}
              code={code} // Nieuwe prop toegevoegd
              onClose={() => setShowPopup(false)}
              deductValue={deductValue}
              setDeductValue={setDeductValue}
              deductError={deductError}
              handleDeduct={handleDeduct}
            />
          }
        />
      )}
    </div>
  );
};

export default ValidationSection;


--- css/giftCard.css ---
/* src/components/GiftCard/css/giftCard.css */

.gift-card-page {
	display: grid;
	grid-template-rows: auto auto;
	grid-gap: 20px;
	margin-top: 30px;
  }
  
  .gift-card-page .gift-card-page__top-row,
  .gift-card-page .gift-card-page__bottom-row {
	display: grid;
	grid-gap: 20px;
  }
  
  .gift-card-page .gift-card-page__top-row {
	grid-template-columns: repeat(2, 1fr);
  }
  
  .gift-card-page .gift-card-page__bottom-row {
	grid-template-columns: 1fr;
  }
  

--- index.js ---
// src/components/GiftCard/index.js

import React from 'react';
import { withHeader } from '../../../Components/Structural/Header/index.js';
import './css/giftCard.css';
import ValidationSection from './ValidationSection/index.js';
import OverviewSection from './OverviewSection/index.js';
import AddGiftCardSection from './AddGiftcardSection/index.js';

const GiftCard = () => {
  return (
    <div className="gift-card-page">
      <div className="gift-card-page__top-row">
        <div className="gift-card-page__section">
          <ValidationSection />
        </div>
        <div className="gift-card-page__section">
			    <AddGiftCardSection/>
        </div>
      </div>
      <div className="gift-card-page__bottom-row">
        <div className="gift-card-page__section">
          <OverviewSection />
        </div>
      </div>
    </div>
  );
};

export default withHeader(GiftCard);



Directory Structure for "/Users/thibaultvandesompele/Desktop/Mateza 4.0/Client/Dashboard/dashboard-general/src/Pages/GiftCard/GiftCard":

â”œâ”€â”€ AddGiftcardSection
â”‚   â”œâ”€â”€ ValueSelector.js
â”‚   â”œâ”€â”€ css
â”‚   â”‚   â”œâ”€â”€ addGiftCardSection.css
â”‚   â”‚   â””â”€â”€ valueSelector.css
â”‚   â””â”€â”€ index.js
â”œâ”€â”€ OverviewSection
â”‚   â”œâ”€â”€ SearchBar.js
â”‚   â”œâ”€â”€ css
â”‚   â”‚   â””â”€â”€ overviewSection.css
â”‚   â””â”€â”€ index.js
â”œâ”€â”€ ValidationSection
â”‚   â”œâ”€â”€ ValidationPopup.js
â”‚   â”œâ”€â”€ css
â”‚   â”‚   â”œâ”€â”€ validationPopup.css
â”‚   â”‚   â””â”€â”€ validationSection.css
â”‚   â””â”€â”€ index.js
â”œâ”€â”€ css
â”‚   â””â”€â”€ giftCard.css
â””â”€â”€ index.js


List of Files:
AddGiftcardSection/ValueSelector.js
AddGiftcardSection/css/addGiftCardSection.css
AddGiftcardSection/css/valueSelector.css
AddGiftcardSection/index.js
OverviewSection/SearchBar.js
OverviewSection/css/overviewSection.css
OverviewSection/index.js
ValidationSection/ValidationPopup.js
ValidationSection/css/validationPopup.css
ValidationSection/css/validationSection.css
ValidationSection/index.js
css/giftCard.css
index.js

**Instruction:**
1. Please encapsulate the main component in index.js inside the `.component-name-component` class.
2. Prefix all CSS classes with the `.component-name-component` class.

**Examples:**

*Encapsulation in index.js:*
```jsx
<div className="profile-component">
    <h2 className="account-manage-title">Admin Reservaties</h2>
    <div className="account-manage-container">
        {/* ... */}
        onClose={() => setIsModalOpen(false)}
    </div>
</div>
```


Now write a new component in the same style. This is a very basic component that contains a list of items and people can add an item to the list.

Encapsulate the new component in WithHeader and let is be called Menu.

The menu component has a list with all menu's.

Post the menu using api/menu.

The menu contains a menu name, a start date, and an enddate, start hour, end hour, and days of week it applies to (maandag, dinsdag ...) (checkboxes).

People can post this data.

At init we fetch the data from api/menu using get, and we display it the list of menu's.

Print the new menu component. Post and get the data using useApi.

