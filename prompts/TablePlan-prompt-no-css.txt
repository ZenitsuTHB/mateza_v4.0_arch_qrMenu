File Contents:

--- FloorPlan.js ---
// FloorPlan.js
import React, { useRef, useEffect, useState } from 'react';
import { useDrop } from 'react-dnd';
import './css/floorPlan.css';
import { ResizableBox } from 'react-resizable';
import 'react-resizable/css/styles.css';
import FloorPlanElement from './FloorPlanElement.js';
import useApi from '../../../Hooks/useApi.js'; // Ensure correct path

const FloorPlanGeneral = ({
  reservations,
  assignReservation,
  removeReservation,
  updateNotes,
}) => {
  const floorPlanRef = useRef(null);
  const [floorPlanSize, setFloorPlanSize] = useState({ width: 800, height: 600 });
  const [tables, setTables] = useState([]);

  const api = useApi(); // Initialize useApi hook

  // Update floor plan size on mount and when resized
  useEffect(() => {
    const updateSize = () => {
      if (floorPlanRef.current) {
        const { width, height } = floorPlanRef.current.getBoundingClientRect();
        setFloorPlanSize({ width, height });
      }
    };

    // Initial size
    updateSize();

    // Update size on window resize
    window.addEventListener('resize', updateSize);

    // Cleanup
    return () => window.removeEventListener('resize', updateSize);
  }, []);

  // Load tables from API on mount
  useEffect(() => {
    const fetchTables = async () => {
      try {
        const data = await api.get(window.baseDomain + 'api/tables', { noCache: true });
        // Ensure that data is an array
        if (Array.isArray(data)) {
          setTables(data);
        } else if (data && Array.isArray(data.tables)) {
          // If API returns { tables: [...] }
          setTables(data.tables);
        } else {
          setTables([]); // Fallback to empty array
        }
      } catch (error) {
        console.error('Error fetching tables:', error);
        setTables([]); // Fallback to empty array on error
      }
    };

    fetchTables();
  }, [api]);

  const [, drop] = useDrop({
    accept: 'GUEST',
    drop: (item, monitor) => {
      // Dropping on the floor plan background does nothing
      // You might want to implement additional functionality here if needed
    },
  });

  return (
    <ResizableBox
      width={800}
      height={600}
      minConstraints={[400, 300]}
      maxConstraints={[1600, 1200]}
      className="resizable-floor-plan"
      onResizeStop={(e, data) => {
        // Directly set the new size without snapping
        setFloorPlanSize({ width: data.size.width, height: data.size.height });
      }}
      resizeHandles={['se']} // Optional: specify resize handles if needed
    >
      <div
        id="floor-plan-container"
        className="floor-plan"
        ref={(node) => {
          drop(node);
          floorPlanRef.current = node;
        }}
        style={{ position: 'relative', width: '100%', height: '100%' }}
      >
        {tables.map((table) => (
          <FloorPlanElement
            key={table.id}
            table={table}
            reservations={reservations.filter((res) => res.tableId === table.id)}
            assignReservation={assignReservation}
            removeReservation={removeReservation}
            updateNotes={updateNotes}
            floorPlanSize={floorPlanSize}
          />
        ))}
      </div>
    </ResizableBox>
  );
};

export default FloorPlanGeneral;


--- FloorPlanElement.js ---
// FloorPlanElement.js
import React from 'react';
import { useDrop } from 'react-dnd';
import Table from './Table.js';

const FloorPlanElement = ({
  table,
  reservations,
  assignReservation,
  removeReservation,
  updateNotes,
  floorPlanSize,
}) => {
  const [{ isOver, canDrop }, drop] = useDrop({
    accept: 'GUEST',
    drop: (item) => {
      assignReservation(item.id, table.id);
    },
    canDrop: (item) => {
      // Check if table can accommodate the reservation
      const currentGuests = reservations.reduce((acc, res) => acc + res.numberOfGuests, 0);
      return currentGuests + item.numberOfGuests <= table.capacity;
    },
    collect: (monitor) => ({
      isOver: monitor.isOver(),
      canDrop: monitor.canDrop(),
    }),
  });

  const isActive = isOver && canDrop;

  return (
    <div
      ref={drop}
      style={{
        position: 'absolute',
        left: `${table.x}px`,
        top: `${table.y}px`,
        border: isActive ? '2px dashed #4CAF50' : 'none', // Visual feedback
        transition: 'border 0.2s ease',
      }}
    >
      <Table
        capacity={table.capacity}
        reservations={reservations}
        tableId={table.id}
        tableName={table.name} // Display the table's name
        removeReservation={removeReservation}
        updateNotes={updateNotes}
        isActive={isActive}
      />
    </div>
  );
};

export default FloorPlanElement;


--- Hooks/useReservations.js ---
// src/Components/Calendar/Hooks/useReservations.js

import { useState, useEffect } from 'react';
import useApi from '../../../../Hooks/useApi';

/**
 * Custom hook to fetch and manage reservations data.
 *
 * @returns {Array} An array of reservation objects.
 */
const useReservations = () => {
  const [reservations, setReservations] = useState([]);
  const api = useApi();

  useEffect(() => {
    /**
     * Fetches reservations from the backend API and processes them.
     */
    const fetchReservations = async () => {
      try {
        // Fetch raw data from the backend API
        const data = await api.get(`${window.baseDomain}api/auth-reservations`, { noCache: true });

        console.log('Raw data from backend:', data);

        // Check if data is an array
        if (!Array.isArray(data)) {
          console.error('Unexpected data format: Expected an array of reservations.');
          setReservations([]);
          return;
        }

        // Process and map each reservation to the frontend format
        const mappedReservations = data.map((reservation) => {
          // Extract the reservation ID
          const id = reservation._id?.$oid || reservation._id || `unknown-${Math.random()}`;

          // Parse the number of guests
          const guests = parseInt(reservation.guests?.$numberInt || reservation.guests, 10);
          const numberOfGuests = isNaN(guests) ? 1 : guests; // Default to 1 if parsing fails

          // Extract and trim extra information
          const notes = reservation.extraInfo?.trim() || '';

          // Return the mapped reservation object
          return {
            id,
            date: reservation.date, // Ensure this is in 'YYYY-MM-DD' format or adjust as needed
            time: reservation.time, // Ensure this is in 'HH:MM' format or adjust as needed
            firstName: reservation.firstName || 'Unknown',
            lastName: reservation.lastName || 'Guest',
            numberOfGuests,
            tableId: null, // Initialize as null; will be updated when assigned
            notes,
            email: reservation.email || '',
            phone: reservation.phone || '',
            reservationType: reservation.reservationType || 'common',
            // Add other fields if necessary
          };
        });

        setReservations(mappedReservations);
      } catch (error) {
        console.error('Error fetching reservations:', error);
        setReservations([]); // Fallback to an empty array on error
      }
    };

    fetchReservations();
  }, [api]);

  return reservations;
};

export default useReservations;


--- Sidebar.js ---
// Sidebar.js
import React, { useState, useMemo } from 'react';
import { useDrag } from 'react-dnd';
import './css/sidebar.css';

const Sidebar = ({ reservations }) => {
  const [searchTerm, setSearchTerm] = useState('');

  // Filter reservations based on search term and only show unassigned
  const filteredReservations = useMemo(() => {
    const lowerSearch = searchTerm.toLowerCase();
    return reservations.filter(
      (guest) =>
        guest.tableId === null &&
        (guest.firstName.toLowerCase().includes(lowerSearch) ||
          guest.lastName.toLowerCase().includes(lowerSearch) ||
          guest.numberOfGuests.toString().includes(lowerSearch) ||
          guest.time.includes(lowerSearch))
    );
  }, [searchTerm, reservations]);

  // Guest Block Component
  const GuestBlock = ({ guest }) => {
    const [{ isDragging }, drag] = useDrag(
      () => ({
        type: 'GUEST',
        item: { id: guest.id, ...guest },
        collect: (monitor) => ({
          isDragging: !!monitor.isDragging(),
        }),
      }),
      [guest]
    );

    return (
      <div
        className="guest-block"
        ref={drag}
        style={{ opacity: isDragging ? 0.5 : 1 }}
      >
        <p className="guest-name">
          {guest.firstName} {guest.lastName}
        </p>
        <p className="guest-details">
          {guest.numberOfGuests}p â€¢ {guest.time}
        </p>
      </div>
    );
  };

  return (
    <div className="sidebar">
      <div className="search-bar">
        <input
          type="text"
          placeholder="Zoek gasten..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          aria-label="Zoek gasten"
        />
      </div>
      <div className="guests-list">
        {filteredReservations.length > 0 ? (
          filteredReservations.map((guest) => (
            <GuestBlock key={guest.id} guest={guest} />
          ))
        ) : (
          <p className="no-results">Geen gasten gevonden.</p>
        )}
      </div>
    </div>
  );
};

export default Sidebar;


--- Table.js ---
// Table.js
import React from 'react';
import { useDrag } from 'react-dnd';
import './css/table.css';

const Table = ({
  capacity,
  reservations,
  tableId,
  tableName,
  removeReservation,
  updateNotes,
  isActive,
}) => {
  const isOccupied = reservations.length > 0;

  // Calculate table width based on capacity
  const tableWidth = 70 + (capacity > 4 ? (capacity - 4) * 10 : 0);
  const tableHeight = 70;

  const chairsPerSide = Math.ceil(capacity / 2);

  const topChairs = [];
  const bottomChairs = [];

  for (let i = 0; i < chairsPerSide; i++) {
    topChairs.push(i);
    bottomChairs.push(i);
  }

  return (
    <div
      className={`table-container ${isOccupied ? 'occupied' : ''} ${isActive ? 'active' : ''}`}
      style={{ width: `${tableWidth}px`, height: `${tableHeight + 80}px` }}
    >
      {/* Tooltip */}
      {isOccupied && (
        <div className="tooltip">
          {reservations.map((res) => (
            <div key={res.id} className="tooltip-content">
              <div className="reservation-summary">
                <span className="reservation-name">
                  {res.firstName} {res.lastName}
                </span>{' '}
                ({res.numberOfGuests}p) - {res.time}
              </div>
              <div className="reservation-notes">
                <input
                  type="text"
                  placeholder="Add a note..."
                  value={res.notes}
                  onChange={(e) => updateNotes(res.id, e.target.value)}
                  aria-label={`Add a note for reservation of ${res.firstName} ${res.lastName}`}
                />
              </div>
            </div>
          ))}
        </div>
      )}

      <div
        className="table-plan-component chairs top-chairs"
        style={{
          width: `${tableWidth}px`,
        }}
      >
        {topChairs.slice(0, Math.floor(capacity / 2)).map((chair, index) => (
          <div key={`top-${index}`} className="table-plan-component chair"></div>
        ))}
      </div>
      <div
        className={`table ${isOccupied ? 'table-occupied' : ''}`}
        style={{
          width: `${tableWidth}px`,
          height: `${tableHeight}px`,
        }}
      >
        {/* Display Reservations Assigned to This Table */}
        {reservations.map((res) => (
          <Reservation
            key={res.id}
            reservation={res}
            tableId={tableId}
            removeReservation={removeReservation}
          />
        ))}
        {/* Table Name */}
        <div className="table-number">{tableName}</div>
      </div>
      <div
        className="table-plan-component chairs bottom-chairs"
        style={{
          width: `${tableWidth}px`,
        }}
      >
        {bottomChairs.slice(0, Math.ceil(capacity / 2)).map((chair, index) => (
          <div key={`bottom-${index}`} className="table-plan-component chair"></div>
        ))}
      </div>
    </div>
  );
};

// Reservation Component
const Reservation = ({ reservation, tableId, removeReservation }) => {
  const [{ isDragging }, drag] = useDrag(
    () => ({
      type: 'GUEST',
      item: { id: reservation.id, ...reservation },
      collect: (monitor) => ({
        isDragging: !!monitor.isDragging(),
      }),
    }),
    [reservation]
  );

  return (
    <div
      className="reservation"
      ref={drag}
      style={{ opacity: isDragging ? 0.5 : 1, cursor: 'grab' }}
    >
      <span className="reservation-name">
        {reservation.firstName} {reservation.lastName}
      </span>{' '}
      ({reservation.numberOfGuests}p) - {reservation.time}
    </div>
  );
};

export default Table;


--- TableSlots.js ---
import React, { useRef, useEffect } from 'react';
import './css/tableslots.css';

const slotToTime = (slot) => {
  const totalMinutes = (slot - 14) * 30 + 420;
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;
  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
};

const getDateInDutch = (date) => {
  const day = date.getDate();
  const months = [
    'januari', 'februari', 'maart', 'april', 'mei', 'juni',
    'juli', 'augustus', 'september', 'oktober', 'november', 'december',
  ];
  const month = months[date.getMonth()];
  return `${day} ${month}`;
};

const TableSlots = ({ selectedSlot, onSelectSlot, currentDate, floorPlanWidth }) => {
  const slotsContainerRef = useRef(null);
  const dateInDutch = getDateInDutch(currentDate);

  const handleSlotClick = (slot) => {
    if (onSelectSlot) {
      onSelectSlot(slot);
    }
    centerSelectedSlot(slot - 14);
  };

  const centerSelectedSlot = (slotIndex) => {
    const slotsContainer = slotsContainerRef.current;
    const slotWidth = 120.85;
    const containerWidth = slotsContainer.offsetWidth;
    const newScrollPosition = slotIndex * slotWidth - (containerWidth / 2 - slotWidth / 2);
    slotsContainer.scrollTo({ left: newScrollPosition, behavior: 'smooth' });
  };

  useEffect(() => {
    if (selectedSlot) {
      centerSelectedSlot(selectedSlot - 14);
    }
  }, [selectedSlot]);

  return (
    <div
      className="timeline-container"
      ref={slotsContainerRef}
      style={{ width: `${floorPlanWidth}px` }}
    >
      <div className="timeline" style={{ width: `${34 * 120.85}px` }}>
        {Array.from({ length: 34 }, (_, i) => i + 14).map((slot) => (
          <div
            key={slot}
            className={`timeline-slot ${selectedSlot === slot ? 'selected' : ''}`}
            onClick={() => handleSlotClick(slot)}
          >
            <div className="slot-content">
              <div className="slot-subtitle">{dateInDutch}</div>
              <div className="slot-title">{slotToTime(slot)}</div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default TableSlots;


--- Walls.js ---
// Walls.js
import React from 'react';
import './css/walls.css';

const Walls = ({ length }) => {
  const wallWidth = (length - 1) * 20;
  const wallHeight = 20;

  return (
    <div
      className="walls-container"
      style={{ width: `${wallWidth}px`, height: `${wallHeight}px` }}
    >
      <div className="wall"></div>
    </div>
  );
};

export default Walls;


--- index.js ---
import React, { useState, useEffect } from 'react';
import FloorPlanGeneral from './FloorPlan.js';
import Sidebar from './Sidebar.js';
import { withHeader } from '../../../Components/Structural/Header/index.js';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import useReservations from './Hooks/useReservations.js';
import './css/app.css';
import TableSlots from './TableSlots.js';

const TablePlan = () => {
  const fetchedReservations = useReservations();

  const [reservations, setReservations] = useState([]);
  const [floorPlanWidth, setFloorPlanWidth] = useState(800);

  useEffect(() => {
    if (fetchedReservations.length > 0 && reservations.length === 0) {
      setReservations(fetchedReservations);
    }
  }, [fetchedReservations, reservations]);

  const assignReservation = (reservationId, targetTableId) => {
    setReservations((prevReservations) =>
      prevReservations.map((res) =>
        res.id === reservationId ? { ...res, tableId: targetTableId } : res
      )
    );
  };

  const removeReservation = (reservationId) => {
    setReservations((prevReservations) =>
      prevReservations.map((res) =>
        res.id === reservationId ? { ...res, tableId: null } : res
      )
    );
  };

  const updateNotes = (reservationId, newNotes) => {
    setReservations((prevReservations) =>
      prevReservations.map((res) =>
        res.id === reservationId ? { ...res, notes: newNotes } : res
      )
    );
  };

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="table-display-component">
        <TableSlots
          selectedSlot={null}
          onSelectSlot={null}
          currentDate={new Date()}
          floorPlanWidth={floorPlanWidth} // Pass floor plan width
        />
        <div className="app-container">
          <FloorPlanGeneral
            reservations={reservations}
            assignReservation={assignReservation}
            removeReservation={removeReservation}
            updateNotes={updateNotes}
          />
          <Sidebar reservations={reservations} />
        </div>
      </div>
    </DndProvider>
  );
};

export default withHeader(TablePlan);



Directory Structure for "/Users/thibaultvandesompele/Desktop/Mateza 4.0/Client/Dashboard/dashboard-general/src/Pages/Tables/TablePlan":

â”œâ”€â”€ FloorPlan.js
â”œâ”€â”€ FloorPlanElement.js
â”œâ”€â”€ Hooks
â”‚   â””â”€â”€ useReservations.js
â”œâ”€â”€ Sidebar.js
â”œâ”€â”€ Table.js
â”œâ”€â”€ TableSlots.js
â”œâ”€â”€ Walls.js
â”œâ”€â”€ css
â”‚   â”œâ”€â”€ app.css
â”‚   â”œâ”€â”€ floorPlan.css
â”‚   â”œâ”€â”€ sidebar.css
â”‚   â”œâ”€â”€ table.css
â”‚   â”œâ”€â”€ tableslots.css
â”‚   â””â”€â”€ walls.css
â””â”€â”€ index.js


List of Files:
FloorPlan.js
FloorPlanElement.js
Hooks/useReservations.js
Sidebar.js
Table.js
TableSlots.js
Walls.js
index.js

**Instruction:**
1. Please encapsulate the main component in index.js inside the `.component-name-component` class.
2. Prefix all CSS classes with the `.component-name-component` class. Sometimes the encapsulation is already done, and we don't need to do it twice. Don't write any comments. Delete all comments and don't write any extra comments. Only print the code with changes. Print the codes in full. Don't skip anything print them full. Mark all changed files with CHANGED before printing the file else mark them with --unchanged and don't print them. Only print every file once.

**Note:** CSS files have been excluded from this prompt.