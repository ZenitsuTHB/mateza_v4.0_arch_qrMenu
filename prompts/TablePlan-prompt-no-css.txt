### **Implementation Plan: Transforming the Reservation Form into a Sidebar Layout**

---

#### **1. Overview of the Desired Sidebar Structure**

- **Layout**: A right-floating sidebar with a fixed width (e.g., 400px) that slides in from the right side of the screen.

- **Sections**:
  - **Section 1**: Guest Selection, Date Picker, and Time Selector.
  - **Section 2**: Personal Information and Additional Details (currently in the modal).

- **Footer**: A persistent button to store the reservation and an extra field for notes.

- **Behavior**: Both sections are visible simultaneously, allowing users to interact with them independently. The sidebar should be responsive and maintain the existing logic for date and time selections.

---

#### **2. Component Mapping and Structure**

##### **2.1. Existing Components**

- **Section 1 Components**:
  - `ValueSelectorGuests` (formerly `ValueSelector.js`)
  - `DateSelector` (includes `Calendar.js` and related utilities)
  - `TimeSelector`

- **Section 2 Components**:
  - `ReservationStepTwoModal` (to be adapted into the sidebar)
  - `FormField` (used within `ReservationStepTwoModal`)

- **Shared Components**:
  - `FormField.js`
  - Utility files (`dateUtils.js`, `exceptions.js`, `generateDates.js`, `generateTimes.js`, etc.)

##### **2.2. New Components Needed**

- **Sidebar Container**:
  - **`ReservationSidebar.jsx`**: A new main component that encapsulates both sections and manages the overall layout.

- **Footer Section**:
  - **`ReservationFooter.jsx`**: Contains the "Store Reservation" button and the "Notes" field.

- **Optional Enhancements**:
  - **`SidebarHeader.jsx`**: If a header (e.g., title or navigation) is desired within the sidebar.
  - **`SidebarSection.jsx`**: A reusable component for individual sections within the sidebar to maintain consistency and modularity.

---

#### **3. Detailed Component Integration**

##### **3.1. Creating the `ReservationSidebar` Component**

- **Purpose**: Acts as the main container for the reservation form, housing both sections and the footer.

- **Structure**:
  ```jsx
  // src/Pages/NewReservation/ReservationSidebar.jsx

  import React from 'react';
  import ReservationStepOne from './StepOne';
  import ReservationStepTwo from './ReservationStepTwo';
  import ReservationFooter from './ReservationFooter';
  import './css/reservationSidebar.css'; // New CSS file for sidebar styling

  const ReservationSidebar = ({
    formData,
    errors,
    handleChange,
    handleFinalSubmit,
    handleStepOneSubmit,
    setFormData,
    isSubmitting,
    reservationSubmitted,
    onNewReservation,
  }) => {
    return (
      <div className="reservation-sidebar-component">
        <div className="sidebar-section-one">
          <ReservationStepOne
            formData={formData}
            errors={errors}
            handleChange={handleChange}
            handleStepOneSubmit={handleStepOneSubmit}
            setFormData={setFormData}
          />
        </div>
        <div className="sidebar-section-two">
          <ReservationStepTwo
            formData={formData}
            errors={errors}
            handleChange={handleChange}
            handleFinalSubmit={handleFinalSubmit}
            isSubmitting={isSubmitting}
          />
        </div>
        <ReservationFooter
          onSubmit={handleFinalSubmit}
          formData={formData}
          handleChange={handleChange}
        />
      </div>
    );
  };

  export default ReservationSidebar;
  ```


##### **3.2. Adapting `ReservationStepTwoModal` into `ReservationStepTwo`**

- **Purpose**: Convert the modal content into a sidebar-friendly layout.

- **Changes**:
  - Rename `ReservationStepTwoModal.js` to `ReservationStepTwo.jsx`.
  - Remove modal-specific wrappers and ensure the component fits seamlessly within the sidebar.
  - Adjust CSS classes to include the `.reservation-sidebar-component` prefix.

- **Structure**:
  ```jsx
  // src/Pages/NewReservation/ReservationStepTwo.jsx

  import React from 'react';
  import FormField from '../FormField';
  import { FaUser, FaPhone, FaInfoCircle, FaEnvelope } from 'react-icons/fa';

  const ReservationStepTwo = ({
    formData,
    errors,
    handleChange,
    handleFinalSubmit,
    isSubmitting,
  }) => {
    return (
      <div className="reservation-step-two">
        <h2 className="modal-title">Persoonlijke Informatie</h2>
        <form className="account-manage-form" onSubmit={handleFinalSubmit} noValidate>
          {/* Form fields similar to ReservationStepTwoModal */}
          <FormField /* ...props */ />
          {/* ...other FormFields */}
          <button type="submit" className="account-manage__button" disabled={isSubmitting}>
            {isSubmitting ? 'Verzenden...' : 'Reserveren'}
          </button>
        </form>
      </div>
    );
  };

  export default ReservationStepTwo;
  ```

##### **3.3. Updating `NewReservationAdmin` to Incorporate the Sidebar**

- **Purpose**: Replace the existing modal-based workflow with the new sidebar structure.

- **Changes**:
  - Remove modal-related state (`isModalOpen`) and handlers.
  - Integrate the `ReservationSidebar` component directly into the main layout.
  - Ensure that `ReservationSidebar` receives all necessary props for managing form data and submission.

- **Structure**:
  ```jsx
// src/Pages/NewReservation/NewReservationAdmin.jsx

import React, { useState } from 'react';
import ModalWithoutTabs from '../../Components/Structural/Modal/Standard';
import useApi from '../../Hooks/useApi';
import ReservationStepOne from './StepOne';
import ReservationStepTwoModal from './ReservationStepTwoModal';
import ReservationSummary from './ReservationSummary';
import { withHeader } from '../../Components/Structural/Header';
import './css/newReservationAdmin.css';

const NewReservationAdmin = () => {
  const api = useApi();

  const [formData, setFormData] = useState({
    numberOfGuests: '',
    date: '',
    time: '',
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    extraInfo: '',
  });

  const [errors, setErrors] = useState({});

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [reservationSubmitted, setReservationSubmitted] = useState(false);

  const validateStepOne = () => {
    const errors = {};
    if (!formData.numberOfGuests) {
      errors.numberOfGuests = 'Aantal gasten is verplicht';
    }
    if (!formData.date) {
      errors.date = 'Datum is verplicht';
    }
    if (!formData.time) {
      errors.time = 'Tijd is verplicht';
    }
    return errors;
  };

  const validateStepTwo = () => {
    const errors = {};

    if (formData.email && !/\S+@\S+\.\S+/.test(formData.email)) {
      errors.email = 'E-mail is ongeldig';
    }

    return errors;
  };

  const handleStepOneSubmit = (e) => {
    e.preventDefault();
    const stepOneErrors = validateStepOne();
    if (Object.keys(stepOneErrors).length > 0) {
      setErrors(stepOneErrors);
    } else {
      setErrors({});
      setIsModalOpen(true);
    }
  };

  const handleFinalSubmit = async (e) => {
    e.preventDefault();
    const stepTwoErrors = validateStepTwo();
    if (Object.keys(stepTwoErrors).length > 0) {
      setErrors(stepTwoErrors);
    } else {
      setErrors({});
      setIsSubmitting(true);
      const submissionData = {
        numberOfGuests: formData.numberOfGuests,
        date: formData.date,
        time: formData.time,
        firstName: formData.firstName,
        lastName: formData.lastName,
        email: formData.email,
        phone: formData.phone,
        extraInfo: formData.extraInfo,
      };

      try {
        await api.post(`${window.baseDomain}api/auth-reservations/`, submissionData);
        setIsModalOpen(false);
        setReservationSubmitted(true);
      } catch (error) {
        console.error('Error submitting reservation:', error);
      } finally {
        setIsSubmitting(false);
      }
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
    setErrors({ ...errors, [name]: '' });
  };

  return (
    <div className="new-reservation-page">
      <h2 className="account-manage-title">Admin Reservaties</h2>
      <div className="account-manage-container">
        {reservationSubmitted ? (
          <ReservationSummary
            formData={formData}
            onNewReservation={() => {
              setFormData({
                numberOfGuests: '',
                date: '',
                time: '',
                firstName: '',
                lastName: '',
                email: '',
                phone: '',
                extraInfo: '',
              });
              setReservationSubmitted(false);
            }}
          />
        ) : (
          <>
            <ReservationStepOne
              formData={formData}
              errors={errors}
              handleChange={handleChange}
              handleStepOneSubmit={handleStepOneSubmit}
              setFormData={setFormData}
            />

            {isModalOpen && (
              <ModalWithoutTabs
                content={
                  <ReservationStepTwoModal
                    formData={formData}
                    errors={errors}
                    handleChange={handleChange}
                    handleFinalSubmit={handleFinalSubmit}
                    isSubmitting={isSubmitting}
                  />
                }
                onClose={() => setIsModalOpen(false)}
              />
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default withHeader(NewReservationAdmin);

  ```

##### **3.4. Developing the `ReservationFooter` Component**

- **Purpose**: Provides the "Store Reservation" button and the "Notes" field at the bottom of the sidebar.

- **Structure**:
  ```jsx
  // src/Pages/NewReservation/ReservationFooter.jsx

  import React from 'react';
  import FormField from '../FormField';

  const ReservationFooter = ({ onSubmit, formData, handleChange }) => {
    return (
      <div className="reservation-footer">
        <FormField
          label="Notities"
          name="notes"
          type="textarea"
          placeholder="Voeg hier extra informatie toe..."
          value={formData.notes}
          onChange={handleChange}
          error={null} // Assuming notes are optional
        />
        <button type="button" className="store-reservation-button" onClick={onSubmit}>
          Opslaan
        </button>
      </div>
    );
  };

  export default ReservationFooter;
  ```


##### **3.5. Maintaining Existing Logic Files**

- **Integrity**: Ensure that the existing utility files (`dateUtils.js`, `exceptions.js`, `generateDates.js`, `generateTimes.js`, `Calendar.js`, `DateSelector.js`, `TimeSelector.js`, `ValueSelector.js`) remain untouched to preserve the date and time selection logic.

- **Usage**: These components will continue to be imported and used within `ReservationStepOne` and `ReservationStepTwo` as needed without any modifications.

---

#### **4. CSS Adjustments and Encapsulation**


##### **4.2. Sidebar-Specific Styling**

- **`reservationSidebar.css`**:
  - Define styles for the sidebar layout, including positioning, background, padding, and responsiveness.
  - Example:
    ```css
    .reservation-sidebar-component {
      position: fixed;
      top: 0;
      right: 0;
      width: 400px;
      height: 100%;
      background-color: #f8f9fa;
      box-shadow: -2px 0 5px rgba(0,0,0,0.1);
      padding: 20px;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      z-index: 1000;
      overflow-y: auto;
      transition: transform 0.3s ease-in-out;
    }

    @media screen and (max-width: 480px) {
      .reservation-sidebar-component {
        width: 100%;
      }
    }
    ```

- **Form and Button Styles**:
  - Ensure buttons and form fields within the sidebar align with the overall design.
  - Reuse existing styles from `newReservationAdmin.css` by ensuring class names are correctly prefixed.

---

#### **5. Managing State and Form Submission**

[...Additional sections...]

---

**Note**: Throughout the transformation, ensure that all existing logic files and components retain their original functionality. The primary focus is on restructuring the UI into a sidebar without altering the underlying reservation logic.

---

**Instruction:**

1. Please encapsulate the main component in index.js inside the `.component-name-component` class.
2. Prefix all CSS classes with the `.component-name-component` class.


**Relevant Code Files:**

---

**index.js**
```jsx
// src/Pages/NewReservation/NewReservationAdmin.jsx

import React, { useState } from 'react';
import ModalWithoutTabs from '../../Components/Structural/Modal/Standard';
import useApi from '../../Hooks/useApi';
import ReservationStepOne from './StepOne';
import ReservationStepTwoModal from './ReservationStepTwoModal';
import ReservationSummary from './ReservationSummary';
import { withHeader } from '../../Components/Structural/Header';
import './css/newReservationAdmin.css';

const NewReservationAdmin = () => {
  const api = useApi();

  const [formData, setFormData] = useState({
    numberOfGuests: '',
    date: '',
    time: '',
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    extraInfo: '',
  });

  const [errors, setErrors] = useState({});

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [reservationSubmitted, setReservationSubmitted] = useState(false);

  const validateStepOne = () => {
    const errors = {};
    if (!formData.numberOfGuests) {
      errors.numberOfGuests = 'Aantal gasten is verplicht';
    }
    if (!formData.date) {
      errors.date = 'Datum is verplicht';
    }
    if (!formData.time) {
      errors.time = 'Tijd is verplicht';
    }
    return errors;
  };

  const validateStepTwo = () => {
    const errors = {};

    if (formData.email && !/\S+@\S+\.\S+/.test(formData.email)) {
      errors.email = 'E-mail is ongeldig';
    }

    return errors;
  };

  const handleStepOneSubmit = (e) => {
    e.preventDefault();
    const stepOneErrors = validateStepOne();
    if (Object.keys(stepOneErrors).length > 0) {
      setErrors(stepOneErrors);
    } else {
      setErrors({});
      setIsModalOpen(true);
    }
  };

  const handleFinalSubmit = async (e) => {
    e.preventDefault();
    const stepTwoErrors = validateStepTwo();
    if (Object.keys(stepTwoErrors).length > 0) {
      setErrors(stepTwoErrors);
    } else {
      setErrors({});
      setIsSubmitting(true);
      const submissionData = {
        numberOfGuests: formData.numberOfGuests,
        date: formData.date,
        time: formData.time,
        firstName: formData.firstName,
        lastName: formData.lastName,
        email: formData.email,
        phone: formData.phone,
        extraInfo: formData.extraInfo,
      };

      try {
        await api.post(`${window.baseDomain}api/auth-reservations/`, submissionData);
        setIsModalOpen(false);
        setReservationSubmitted(true);
      } catch (error) {
        console.error('Error submitting reservation:', error);
      } finally {
        setIsSubmitting(false);
      }
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
    setErrors({ ...errors, [name]: '' });
  };

  return (
    <div className="new-reservation-page">
      <h2 className="account-manage-title">Admin Reservaties</h2>
      <div className="account-manage-container">
        {reservationSubmitted ? (
          <ReservationSummary
            formData={formData}
            onNewReservation={() => {
              setFormData({
                numberOfGuests: '',
                date: '',
                time: '',
                firstName: '',
                lastName: '',
                email: '',
                phone: '',
                extraInfo: '',
              });
              setReservationSubmitted(false);
            }}
          />
        ) : (
          <>
            <ReservationStepOne
              formData={formData}
              errors={errors}
              handleChange={handleChange}
              handleStepOneSubmit={handleStepOneSubmit}
              setFormData={setFormData}
            />

            {isModalOpen && (
              <ModalWithoutTabs
                content={
                  <ReservationStepTwoModal
                    formData={formData}
                    errors={errors}
                    handleChange={handleChange}
                    handleFinalSubmit={handleFinalSubmit}
                    isSubmitting={isSubmitting}
                  />
                }
                onClose={() => setIsModalOpen(false)}
              />
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default withHeader(NewReservationAdmin);


```

---

**css/newReservationAdmin.css**
```css
/* src/components/ReservationForm/css/reservationForm.css */

.new-reservation-page {
	display: flex;
	justify-content: center;
	align-items: center;
	flex-direction: column;
}


.new-reservation-page .account-manage-container {
	justify-content: center;
	align-items: center;
	flex-direction: column;
	position: relative;
	width: 100%;
	max-width: 600px;
	text-align: center;
	background-color: white;
  }


  .new-reservation-page .modal-title {
	text-align: center;
	width: 100%;
	margin-top: 20px;
	margin-bottom: 40px;
  }


.new-reservation-page .account-manage-container {
	background-color: #fff;
	border-radius: 10px;
	padding: 30px;
	width: 100%;
  }

  .new-reservation-page .account-manage-title {
	margin-top: 30px;
	margin-bottom: 30px;
  }
  

  .new-reservation-page .account-manage-form {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }

  .new-reservation-page .input-container {
	position: relative;
  }
  
  .new-reservation-page .input-icon {
	position: absolute;
	top: 50%;
	left: 10px;
	transform: translateY(-50%);
	color: #6c757d;
	pointer-events: none;
  }
  
  .new-reservation-page .input-container input {
	width: 100%;
	padding: 10px 10px 10px 35px;
	border: 1px solid #ccc;
	border-radius: 5px;
	font-size: 1rem;
	transition: border-color 0.3s ease;
  }

  .new-reservation-page .form-error {
	color: #dc3545;
	font-size: 0.9rem;
	margin-top: 5px;
	display: flex;
	align-items: center;
	gap: 5px;
  }


  .new-reservation-page .account-manage__button {
	padding: 12px;
	background-color: #007bff;
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	display: flex;
	align-items: center;
	justify-content: center;
	gap: 10px;
	transition: background-color 0.3s ease;
  }


```
// src/components/ReservationForm/ReservationStepTwoModal.jsx

import React from 'react';
import FormField from './FormField';
import { FaUser, FaPhone, FaInfoCircle, FaEnvelope } from 'react-icons/fa';

const ReservationStepTwoModal = ({
  formData,
  errors,
  handleChange,
  handleFinalSubmit,
  isSubmitting,
}) => {
  return (
    <div>
      <h2 className="modal-title">Persoonlijke Informatie</h2>
      <form className="account-manage-form" onSubmit={handleFinalSubmit} noValidate>
        <FormField
          label="Voornaam"
          name="firstName"
          placeholder="Voornaam"
          value={formData.firstName}
          onChange={handleChange}
          error={errors.firstName}
          icon={FaUser}
        />
        <FormField
          label="Achternaam"
          name="lastName"
          placeholder="Achternaam"
          value={formData.lastName}
          onChange={handleChange}
          error={errors.lastName}
          icon={FaUser}
        />
        <FormField
          label="E-mail"
          name="email"
          type="email"
          placeholder="E-mailadres"
          value={formData.email}
          onChange={handleChange}
          error={errors.email}
          icon={FaEnvelope}
        />
        <FormField
          label="Telefoonnummer"
          name="phone"
          type="tel"
          placeholder="Telefoonnummer"
          value={formData.phone}
          onChange={handleChange}
          error={errors.phone}
          icon={FaPhone}
        />
        <FormField
          label="Extra info"
          name="extraInfo"
          type="textarea"
          placeholder="Extra informatie"
          value={formData.extraInfo}
          onChange={handleChange}
          error={errors.extraInfo}
          icon={FaInfoCircle}
        />
        <button type="submit" className="account-manage__button" disabled={isSubmitting}>
          {isSubmitting ? 'Verzenden...' : 'Reserveren'}
        </button>
      </form>
    </div>
  );
};

export default ReservationStepTwoModal;

// src/Pages/NewReservation/ReservationStepOne.jsx

import React, { useState, useEffect } from 'react';
import ValueSelectorGuests from './ValueSelector';
import DateSelector from './DateSelector';
import TimeSelector from './TimeSelector';
import useApi from '../../../Hooks/useApi';

const ReservationStepOne = ({
  formData,
  errors,
  handleChange,
  handleStepOneSubmit,
  setFormData,
}) => {
  const api = useApi();

  // State for timeblocks
  const [timeblocks, setTimeblocks] = useState([]);
  const [loadingTimeblocks, setLoadingTimeblocks] = useState(true);
  const [timeblocksError, setTimeblocksError] = useState(null);

  // Fetch timeblocks and general settings on component mount
  useEffect(() => {
    const fetchTimeblocks = async () => {
      try {
        const data = await api.get(`${window.baseDomain}api/auth-restaurant/`, { noCache: true });
        setTimeblocks(data.timeblocks || []);
        window.timeblocks = data.timeblocks || []; // Retain globally if needed
        const generalSettings = data['general-settings'] || {};
        window.generalSettings = generalSettings; // Retain globally
      } catch (err) {
        setTimeblocksError(err);
        console.error('Error fetching timeblocks:', err);
      } finally {
        setLoadingTimeblocks(false);
      }
    };

    fetchTimeblocks();
  }, [api]);

  const resetFormDataFields = (fieldsToReset) => {
    setFormData((prevFormData) => {
      const newFormData = { ...prevFormData };
      fieldsToReset.forEach((field) => {
        newFormData[field] = '';
      });
      return newFormData;
    });
  };


  if (timeblocksError) {
    return (
      <div>
        <a
          href="https://dashboard.reservaties.net/#/scheme"
          target="_blank"
          rel="noopener noreferrer"
          style={{ color: '#007BFF', textDecoration: 'underline' }}
        >
          Klik hier
        </a>{' '}
        om uw openingsuren in te stellen.
      </div>
    );
  }

  return (
    <form className="account-manage-form" onSubmit={handleStepOneSubmit} noValidate>
      <ValueSelectorGuests
        value={formData.numberOfGuests}
        onChange={handleChange}
        error={errors.numberOfGuests}
      />

      {formData.numberOfGuests && (
        <DateSelector
          formData={formData}
          handleChange={handleChange}
          resetFormDataFields={resetFormDataFields}
          timeblocks={timeblocks}
        />
      )}

      {formData.date && (
        <TimeSelector
          formData={formData}
          handleChange={handleChange}
          field={{ id: 'time', label: 'Tijd' }}
          selectedDate={formData.date}
        />
      )}

      <button type="submit" className="account-manage__button">
        Verder
      </button>
    </form>
  );
};

export default ReservationStepOne;

Print the new components needed for the sidebar that appears on the right of the screen. It should have a cancel X shaped button on the top left to close this sidebar and let it float back to the right, when being triggered the sidebar floats in from the left, for testing purpose already let it be present on the right.

Transform the relevant code above to fit inside the sidebar as described by the prompt. Print the new code in full.

