File Contents:


--- Dashboard/CalendarMap/BarChartView.js ---
// BarChartView.js

import React from 'react';
import './css/barChartView.css';
import { Bar } from 'react-chartjs-2';
import 'chart.js/auto';
import useChartData from './Hooks/useChartData';

const BarChartView = ({
  currentDate,
  reservationsByDate,
  selectedShift,
  selectedViewMode,
  maxCapacity,
  gemiddeldeDuurCouvert,
  predictionsByDate,
  weekOrMonthView,
  weatherDataByDate,
}) => {
  const chartData = useChartData({
    currentDate,
    reservationsByDate,
    selectedShift,
    selectedViewMode,
    maxCapacity,
    gemiddeldeDuurCouvert,
    predictionsByDate,
    weekOrMonthView,
    weatherDataByDate,
  });

  const options = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: selectedShift === 'Dag' && selectedViewMode === 'Algemeen',
        position: 'top',
      },
      tooltip: {
        callbacks: {
          label: function (context) {
            if (selectedViewMode === 'Bezettingspercentage') {
              return `${context.parsed.y}%`;
            } else if (selectedViewMode === 'Weer') {
              return `${context.parsed.y}°C`;
            } else {
              return `${context.parsed.y} gasten`;
            }
          },
        },
      },
    },
    scales: {
      y: {
        beginAtZero: true,
        max: selectedViewMode === 'Bezettingspercentage' ? 100 : undefined,
        title: {
          display: true,
          text:
            selectedViewMode === 'Bezettingspercentage'
              ? 'Bezettingsgraad (%)'
              : selectedViewMode === 'Weer'
              ? 'Temperatuur (°C)'
              : 'Aantal Gasten',
        },
        stacked: selectedShift === 'Dag' && selectedViewMode === 'Algemeen',
      },
      x: {
        title: {
          display: true,
          text:
            weekOrMonthView === 'week' ? 'Dag van de Week' : 'Dag van de Maand',
        },
        stacked: selectedShift === 'Dag' && selectedViewMode === 'Algemeen',
      },
    },
  };

  return (
    <div className="bar-chart-view">
      <Bar data={chartData} options={options} />
    </div>
  );
};

export default BarChartView;


--- Dashboard/CalendarMap/BezettingspercentageForm.js ---
// BezettingspercentageForm.js

import React from 'react';
import { FaUsers, FaClock } from 'react-icons/fa'; // Import relevant icons
import './css/bezettingspercentageForm.css';

const BezettingspercentageForm = ({
  maxCapacity,
  gemiddeldeDuurCouvert,
  onMaxCapacityChange,
  onGemiddeldeDuurCouvertChange,
  onHerberekenen,
}) => {
  return (
    <div className="bezettingspercentage-form-container">
      <div className="form-group">
        <label htmlFor="maxCapacity" className="form-label">
          Max. Capaciteit:
        </label>
        <div className="input-container">
          <FaUsers className="input-icon" />
          <input
            type="number"
            id="maxCapacity"
            name="maxCapacity"
            placeholder="Voer max. capaciteit in"
            value={maxCapacity}
            onChange={onMaxCapacityChange}
            className="standard-input"
            min="1"
          />
        </div>
      </div>

      <div className="form-group">
        <label htmlFor="gemiddeldeDuurCouvert" className="form-label">
          Duur Couvert (min):
        </label>
        <div className="input-container">
          <FaClock className="input-icon" />
          <input
            type="number"
            id="gemiddeldeDuurCouvert"
            name="gemiddeldeDuurCouvert"
            placeholder="Voer duur couvert in minuten"
            value={gemiddeldeDuurCouvert}
            onChange={onGemiddeldeDuurCouvertChange}
            className="standard-input"
            min="1"
          />
        </div>
      </div>
    </div>
  );
};

export default BezettingspercentageForm;


--- Dashboard/CalendarMap/CalendarDay.js ---
// CalendarDay.js

import React from 'react';
import TimeOfDayBox from './TimeOfDayBox';
import './css/calendarDay.css';
import { formatDateForFilter } from '../../../Utils/dateUtils';

const timeSlotNames = ['Ochtend', 'Middag', 'Avond'];
const timeSlotColors = ['rgba(24, 40, 37,', 'rgba(1, 111, 185,', 'rgba(34, 174, 209,'];

const CalendarDay = ({
  date,
  currentMonth,
  reservationsByDate,
  onDateClick,
  maxOccupation,
  maxPrediction,
  selectedShift,
  selectedViewMode,
  predictionsByDate,
  isHovered,
  onMouseEnter,
  onMouseLeave,
  fadeOut,
  maxCapacity,
  gemiddeldeDuurCouvert,
  weatherDataByDate,
}) => {
  const dateString = formatDateForFilter(date); // Use the custom date formatter
  const reservations = reservationsByDate[dateString] || [];

  const today = new Date();
  const isToday = date.toDateString() === today.toDateString();
  const isPastDate = date < today && !isToday;

  const handleClick = () => {
    if (reservations.length > 0) {
      onDateClick(date);
    }
  };

  let totalGuests = 0;

  // Calculate totalGuestsByTimeSlot
  const totalGuestsByTimeSlot = [0, 0, 0]; // Ochtend, Middag, Avond

  reservations.forEach((reservation) => {
    if (
      selectedShift === 'Dag' ||
      (selectedShift === 'Ochtend' && reservation.timeSlot === 0) ||
      (selectedShift === 'Middag' && reservation.timeSlot === 1) ||
      (selectedShift === 'Avond' && reservation.timeSlot === 2)
    ) {
      totalGuests += reservation.aantalGasten;
      totalGuestsByTimeSlot[reservation.timeSlot] += reservation.aantalGasten;
    }
  });

  // Adjust background color and data based on selectedViewMode
  let backgroundColor = '';
  let content = null;

  if (selectedViewMode === 'Weer') {
    const temperature = weatherDataByDate[dateString];

    backgroundColor = 'white'; // Or any default background color
    content = (
      <div className="occupancy-percentage">
        <strong>{temperature !== undefined ? `${temperature}°C` : ''}</strong>
      </div>
    );
  } else if (selectedViewMode === 'Bezettingsgraad') {
    let heatmapIntensity = 0;
    if (maxOccupation > 0) {
      heatmapIntensity = totalGuests / maxOccupation;
    }

    // Adjust background color for shift
    let heatmapColor = 'rgba(0, 123, 255,'; // default blue
    let textColor = 'white';
    if (selectedShift === 'Ochtend') {
      heatmapColor = 'rgba(24, 40, 37,'; // '#182825'
      textColor = 'white';
    } else if (selectedShift === 'Middag') {
      heatmapColor = 'rgba(1, 111, 185,'; // '#016FB9'
      textColor = 'black';
    } else if (selectedShift === 'Avond') {
      heatmapColor = 'rgba(34, 174, 209,'; // '#22AED1'
      textColor = 'black';
    } else {
      heatmapColor = 'rgba(0, 123, 255,'; // default blue
      textColor = 'white';
    }

    backgroundColor = `${heatmapColor} ${heatmapIntensity})`;

    if (isHovered && totalGuests > 0) {
      content = (
        <div className="heatmap-total-guests" style={{ color: textColor }}>
          <strong>{totalGuests}</strong>
        </div>
      );
    }
  } else if (selectedViewMode === 'Bezettingspercentage') {
    // Occupancy Rate Calculation
    const maxCapacityNum = parseInt(maxCapacity, 10);
    const gemiddeldeDuurCouvertNum = parseInt(gemiddeldeDuurCouvert, 10);

    if (maxCapacityNum > 0 && gemiddeldeDuurCouvertNum > 0) {
      const totalIntervalsPerDay = (12 * 60) / 5; // Assuming 12 hours of operation, divided into 5-minute intervals
      const totalCapacityPerDay = maxCapacityNum * totalIntervalsPerDay;

      let totalOccupiedSlots = 0;

      reservations.forEach((reservation) => {
        if (
          selectedShift === 'Dag' ||
          (selectedShift === 'Ochtend' && reservation.timeSlot === 0) ||
          (selectedShift === 'Middag' && reservation.timeSlot === 1) ||
          (selectedShift === 'Avond' && reservation.timeSlot === 2)
        ) {
          const occupiedSlotsPerReservation =
            reservation.aantalGasten * (gemiddeldeDuurCouvertNum / 5);
          totalOccupiedSlots += occupiedSlotsPerReservation;
        }
      });

      let occupancyRate = (totalOccupiedSlots / totalCapacityPerDay) * 100;

      // Ensure occupancy rate is between 0 and 100
      occupancyRate = Math.min(Math.max(occupancyRate, 0), 100);

      backgroundColor = 'white'; // or any default color
      content = (
        <div className="occupancy-percentage">
          <strong>{occupancyRate.toFixed(1)}%</strong>
        </div>
      );
    } else {
      backgroundColor = 'white';
      content = (
        <div className="occupancy-percentage">
          <strong></strong>
        </div>
      );
    }
  } else if (selectedViewMode === 'Voorspelling') {
    const prediction = predictionsByDate[dateString] || 0;

    let predictionIntensity = 0;
    if (maxPrediction > 0) {
      predictionIntensity = prediction / maxPrediction;
    }

    let predictionColor = 'rgba(255, 0, 0,'; // shades of red
    backgroundColor = `${predictionColor} ${predictionIntensity})`;

    if (isHovered && prediction > 0) {
      content = (
        <div className="prediction-total-guests">
          <strong>{prediction.toFixed(1)}</strong>
        </div>
      );
    }
  } else if (selectedViewMode === 'Algemeen') {
    // No background color or content modifications
  }

  const opacity =
    isHovered
      ? 1
      : fadeOut
      ? 0.5
      : selectedViewMode === 'Bezettingsgraad' ||
        selectedViewMode === 'Voorspelling' ||
        selectedViewMode === 'Weer'
      ? 1
      : isPastDate && !isHovered
      ? 0.5
      : 1;

  return (
    <div
      className={`calendar-day ${currentMonth ? '' : 'calendar-day--disabled'} ${
        isPastDate ? 'calendar-day--past' : ''
      } ${isToday ? 'calendar-day--today' : ''} ${
        selectedViewMode !== 'Algemeen' ? 'special-mode' : ''
      }`}
      onClick={handleClick}
      style={{
        backgroundColor,
        opacity,
      }}
      onMouseEnter={onMouseEnter}
      onMouseLeave={onMouseLeave}
    >
      <div className="calendar-day-number">{date.getDate()}</div>
      {content}
      {selectedViewMode === 'Algemeen' && (
        <div className="time-of-day-boxes">
          {[0, 1, 2].map((timeSlot) => {
            const shiftName = timeSlotNames[timeSlot];
            const totalGuestsInShift = totalGuestsByTimeSlot[timeSlot];

            if (
              (selectedShift === 'Dag' || selectedShift === shiftName) &&
              totalGuestsInShift > 0
            ) {
              return (
                <TimeOfDayBox
                  key={timeSlot}
                  timeSlot={timeSlot}
                  totalGuests={totalGuestsInShift}
                  isPastDate={isPastDate}
                />
              );
            }
            return null;
          })}
        </div>
      )}
    </div>
  );
};

export default CalendarDay;


--- Dashboard/CalendarMap/CalendarGrid.js ---
// CalendarGrid.js

import React, { useState, useEffect } from 'react';
import CalendarDay from './CalendarDay';
import './css/calendarGrid.css';
import { motion } from 'framer-motion';
import { formatDateForFilter } from '../../../Utils/dateUtils';

const CalendarGrid = ({
  dates,
  currentDate,
  reservationsByDate,
  onDateClick,
  selectedShift,
  selectedViewMode,
  predictionsByDate,
  weekOrMonthView,
  maxCapacity,
  gemiddeldeDuurCouvert,
  weatherDataByDate,
}) => {
  const [hoveredDayIndex, setHoveredDayIndex] = useState(null);
  const [maxOccupation, setMaxOccupation] = useState(0);
  const [maxPrediction, setMaxPrediction] = useState(0);

  // Calculate max occupation for Bezettingsgraad and prediction
  useEffect(() => {
    if (
      selectedViewMode === 'Bezettingsgraad' ||
      selectedViewMode === 'Bezettingspercentage' ||
      selectedViewMode === 'Voorspelling'
    ) {
      const occupations = dates.map(({ date }) => {
        const dateString = formatDateForFilter(date); // Use the custom date formatter
        const reservations = reservationsByDate[dateString] || [];
        let totalGuests = 0;

        reservations.forEach((res) => {
          if (
            selectedShift === 'Dag' ||
            (selectedShift === 'Ochtend' && res.timeSlot === 0) ||
            (selectedShift === 'Middag' && res.timeSlot === 1) ||
            (selectedShift === 'Avond' && res.timeSlot === 2)
          ) {
            totalGuests += res.aantalGasten;
          }
        });

        return totalGuests;
      });
      setMaxOccupation(Math.max(...occupations));

      // For Voorspelling, set maxPrediction
      if (selectedViewMode === 'Voorspelling') {
        setMaxPrediction(Math.max(...Object.values(predictionsByDate)));
      } else {
        setMaxPrediction(0);
      }
    }
  }, [dates, reservationsByDate, selectedShift, selectedViewMode, predictionsByDate]);

  const dayNames = ['Ma', 'Di', 'Wo', 'Do', 'Vr', 'Za', 'Zo']; // Dutch day names

  // Animation variants
  const containerVariants = {
    hidden: {},
    visible: {
      transition: {
        staggerChildren: 0.02,
      },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1 },
  };

  return (
    <motion.div
      className="calendar-grid"
      initial="hidden"
      animate="visible"
      variants={containerVariants}
      key={`${currentDate.toString()}-${selectedViewMode}-${selectedShift}`}
    >
      {/* Calendar Header */}
      <div className="calendar-grid-header">
        {dayNames.map((day, index) => (
          <div key={index}>{day}</div>
        ))}
      </div>

      {/* Calendar Body */}
      <div className="calendar-grid-body">
        {dates.map(({ date, currentMonth }, index) => (
          <motion.div key={index} variants={itemVariants}>
            <CalendarDay
              date={date}
              currentMonth={currentMonth}
              reservationsByDate={reservationsByDate}
              onDateClick={onDateClick}
              maxOccupation={maxOccupation}
              maxPrediction={maxPrediction}
              selectedShift={selectedShift}
              selectedViewMode={selectedViewMode}
              predictionsByDate={predictionsByDate}
              isHovered={hoveredDayIndex === index}
              onMouseEnter={() => setHoveredDayIndex(index)}
              onMouseLeave={() => setHoveredDayIndex(null)}
              fadeOut={hoveredDayIndex !== null && hoveredDayIndex !== index}
              maxCapacity={maxCapacity}
              gemiddeldeDuurCouvert={gemiddeldeDuurCouvert}
              weatherDataByDate={weatherDataByDate}
            />
          </motion.div>
        ))}
      </div>
    </motion.div>
  );
};

export default CalendarGrid;


--- Dashboard/CalendarMap/CalendarHeader.js ---
import React, { useState, useRef, useEffect } from 'react';
import './css/calendarHeader.css';
import {
  FaChevronLeft,
  FaChevronRight,
  FaChartBar,
  FaChevronDown,
  FaFile,
  FaCalendarAlt, // Added for calendar icon in tooltip
} from 'react-icons/fa';
import ShiftSelector from './ShiftSelector';
import ViewModeSelector from './ViewModeSelector';

const CalendarHeader = ({
  currentDate,
  onPrev,
  onNext,
  selectedShift,
  setSelectedShift,
  selectedViewMode,
  setSelectedViewMode,
  isChartView,
  toggleChartView,
  weekOrMonthView,
  setWeekOrMonthView,
  onGenerateReport,
}) => {
  const monthNames = [
    'januari',
    'februari',
    'maart',
    'april',
    'mei',
    'juni',
    'juli',
    'augustus',
    'september',
    'oktober',
    'november',
    'december',
  ];

  // Utility function to get the Monday of the week for a given date
  const getMonday = (date) => {
    const d = new Date(date);
    const day = d.getDay();
    const diff = day === 0 ? -6 : 1 - day;
    d.setDate(d.getDate() + diff);
    d.setHours(0, 0, 0, 0);
    return d;
  };

  const currentWeekStart = getMonday(currentDate);

  const [isViewOptionsOpen, setIsViewOptionsOpen] = useState(false);
  const viewOptionsRef = useRef(null);
  const viewButtonRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        viewOptionsRef.current &&
        !viewOptionsRef.current.contains(event.target) &&
        viewButtonRef.current &&
        !viewButtonRef.current.contains(event.target)
      ) {
        setIsViewOptionsOpen(false);
      }
    };

    if (isViewOptionsOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    } else {
      document.removeEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isViewOptionsOpen]);

  const getWeekTitle = () => {
    const start = new Date(currentWeekStart);
    const end = new Date(start);
    end.setDate(start.getDate() + 6); // End on Sunday

    const startDay = start.getDate();
    const endDay = end.getDate();
    const startMonth = monthNames[start.getMonth()];
    const endMonth = monthNames[end.getMonth()];
    const year = start.getFullYear();

    if (start.getMonth() === end.getMonth()) {
      return `${startDay} - ${endDay} ${startMonth} ${year}`;
    } else {
      return `${startDay} ${startMonth} - ${endDay} ${endMonth} ${year}`;
    }
  };

  const getMonthTitle = () => {
    const month = monthNames[currentDate.getMonth()];
    const year = currentDate.getFullYear();

    return `${month} ${year}`;
  };

  const handleViewOptionSelection = (option) => {
    setWeekOrMonthView(option);
    setIsViewOptionsOpen(false);
  };

  return (
    <div className="calendar-header">
      <div className="header-titles">
        {/* Previous Button */}
        <div className="button-with-tooltip">
          <button className="nav-button" onClick={onPrev}>
            <FaChevronLeft size={24} />
          </button>
        </div>

        {/* Next Button */}
        <div className="button-with-tooltip">
          <button className="nav-button" onClick={onNext} style={{ marginRight: '24px' }}>
            <FaChevronRight size={24} />
          </button>
        </div>

        {/* Title and View Options */}
        <div className="header-title-container">
          <h2>
            {weekOrMonthView === 'week' ? getWeekTitle() : getMonthTitle()}
          </h2>
          <div className="button-with-tooltip">
            <button
              className="view-options-button"
              onClick={() => setIsViewOptionsOpen(!isViewOptionsOpen)}
              ref={viewButtonRef}
              aria-label="Toggle view options"
            >
              <FaChevronDown size={16} />
            </button>
            {isViewOptionsOpen && (
              <div className="view-options-container" ref={viewOptionsRef}>
                <div
                  className="view-option"
                  onClick={() => handleViewOptionSelection('week')}
                >
                  Week
                </div>
                <div
                  className="view-option"
                  onClick={() => handleViewOptionSelection('month')}
                >
                  Maand
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="header-buttons">
        {/* Generate Report Button */}
        <div className="button-with-tooltip">
          <button
            onClick={onGenerateReport}
            className="standard-button blue toggle-button"
          >
            <FaFile size={16} />
          </button>
          <div className="tooltip">
            Bekijk Rapport
          </div>
        </div>

        {/* Toggle Chart View Button */}
        <div className="button-with-tooltip">
          <button
            onClick={toggleChartView}
            className="standard-button blue toggle-button"
          >
            {isChartView ? <FaCalendarAlt size={16} /> : <FaChartBar size={16} />}
          </button>
          <div className="tooltip">
            {isChartView ? 'Terug naar Kalender' : 'Bekijk Diagram'}
          </div>
        </div>

        {/* Shift Selector */}
        <div className="button-with-tooltip">
          <ShiftSelector
            selectedShift={selectedShift}
            setSelectedShift={setSelectedShift}
          />
          <div className="tooltip">
            Selecteer Shift
          </div>
        </div>

        {/* View Mode Selector */}
        <div className="button-with-tooltip">
          <ViewModeSelector
            selectedViewMode={selectedViewMode}
            setSelectedViewMode={setSelectedViewMode}
          />
          <div className="tooltip">
            Selecteer Weergave
          </div>
        </div>
      </div>
    </div>
  );
};

export default CalendarHeader;


--- Dashboard/CalendarMap/Hooks/useChartData.js ---
// Hooks/useChartData.js

import { useEffect, useState } from 'react';
import { getMonday } from '../Utils/dateUtils';
import { formatDateForFilter } from '../../../../Utils/dateUtils';

const timeSlotNames = ['Ochtend', 'Middag', 'Avond'];
const timeSlotColors = ['#182825', '#016FB9', '#22AED1'];

const useChartData = ({
  currentDate,
  reservationsByDate,
  selectedShift,
  selectedViewMode,
  maxCapacity,
  gemiddeldeDuurCouvert,
  predictionsByDate,
  weekOrMonthView,
  weatherDataByDate,
}) => {
  const [chartData, setChartData] = useState({
    labels: [],
    datasets: [],
  });

  useEffect(() => {
    let startDate, endDate;
    const labels = [];
    let datasets = [];

    if (weekOrMonthView === 'month') {
      startDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
      endDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    } else if (weekOrMonthView === 'week') {
      startDate = getMonday(currentDate);
      endDate = new Date(startDate);
      endDate.setDate(endDate.getDate() + 6);
    }

    const dateArray = [];
    for (
      let d = new Date(startDate);
      d <= endDate;
      d.setDate(d.getDate() + 1)
    ) {
      dateArray.push(new Date(d));
    }

    if (selectedViewMode === 'Weer') {
      const data = []; // Corrected: use 'data' array to store temperature values

      dateArray.forEach((date) => {
        const dateString = formatDateForFilter(date);
        labels.push(
          weekOrMonthView === 'month'
            ? date.getDate()
            : date.toLocaleDateString('nl-NL', { weekday: 'short' })
        );

        const temp = weatherDataByDate[dateString];
        data.push(temp !== undefined ? temp : null);
      });

      datasets = [
        {
          label: 'Temperatuur (°C)',
          data: data,
          backgroundColor: '#FF8C00', // Orange color
        },
      ];

      setChartData({
        labels,
        datasets,
      });
    } else if (selectedViewMode === 'Algemeen' && selectedShift === 'Dag') {
      const dataByTimeSlot = [[], [], []];

      dateArray.forEach((date) => {
        const dateString = formatDateForFilter(date);
        labels.push(
          weekOrMonthView === 'month'
            ? date.getDate()
            : date.toLocaleDateString('nl-NL', { weekday: 'short' })
        );

        const reservations = reservationsByDate[dateString] || [];
        const totalGuestsByTimeSlot = [0, 0, 0];

        reservations.forEach((res) => {
          totalGuestsByTimeSlot[res.timeSlot] += res.aantalGasten;
        });

        for (let timeSlot = 0; timeSlot < 3; timeSlot++) {
          dataByTimeSlot[timeSlot].push(totalGuestsByTimeSlot[timeSlot]);
        }
      });

      datasets = timeSlotNames.map((name, index) => ({
        label: name,
        data: dataByTimeSlot[index],
        backgroundColor: timeSlotColors[index],
      }));

      setChartData({ labels, datasets });
    } else {
      const data = [];

      dateArray.forEach((date) => {
        const dateString = formatDateForFilter(date);
        labels.push(
          weekOrMonthView === 'month'
            ? date.getDate()
            : date.toLocaleDateString('nl-NL', { weekday: 'short' })
        );

        if (selectedViewMode === 'Bezettingspercentage') {
          // Occupancy Rate Calculation
          const maxCapacityNum = parseInt(maxCapacity, 10);
          const gemiddeldeDuurCouvertNum = parseInt(gemiddeldeDuurCouvert, 10);

          if (maxCapacityNum > 0 && gemiddeldeDuurCouvertNum > 0) {
            const totalIntervalsPerDay = (12 * 60) / 5; // 144 intervals
            const totalCapacityPerDay = maxCapacityNum * totalIntervalsPerDay;

            const reservations = reservationsByDate[dateString] || [];

            let totalOccupiedSlots = 0;

            reservations.forEach((reservation) => {
              if (
                selectedShift === 'Dag' ||
                (selectedShift === 'Ochtend' && reservation.timeSlot === 0) ||
                (selectedShift === 'Middag' && reservation.timeSlot === 1) ||
                (selectedShift === 'Avond' && reservation.timeSlot === 2)
              ) {
                const occupiedSlotsPerReservation =
                  reservation.aantalGasten * (gemiddeldeDuurCouvertNum / 5);
                totalOccupiedSlots += occupiedSlotsPerReservation;
              }
            });

            let occupancyRate = (totalOccupiedSlots / totalCapacityPerDay) * 100;

            // Ensure occupancy rate is between 0 and 100
            occupancyRate = Math.min(Math.max(occupancyRate, 0), 100);

            data.push(parseFloat(occupancyRate.toFixed(1)));
          } else {
            data.push(0);
          }
        } else {
          let totalGuests = 0;

          if (selectedViewMode === 'Voorspelling') {
            totalGuests = predictionsByDate[dateString] || 0;
          } else {
            const reservations = reservationsByDate[dateString] || [];
            reservations.forEach((res) => {
              if (
                selectedShift === 'Dag' ||
                (selectedShift === 'Ochtend' && res.timeSlot === 0) ||
                (selectedShift === 'Middag' && res.timeSlot === 1) ||
                (selectedShift === 'Avond' && res.timeSlot === 2)
              ) {
                totalGuests += res.aantalGasten;
              }
            });
          }

          data.push(totalGuests);
        }
      });

      let backgroundColor = '';
      if (selectedViewMode === 'Bezettingspercentage') {
        backgroundColor = '#28a745';
      } else if (selectedViewMode === 'Bezettingsgraad') {
        backgroundColor =
          selectedShift === 'Ochtend'
            ? '#182825'
            : selectedShift === 'Middag'
            ? '#016FB9'
            : selectedShift === 'Avond'
            ? '#22AED1'
            : 'var(--color-blue)';
      } else if (selectedViewMode === 'Voorspelling') {
        backgroundColor = '#ff0000';
      } else {
        backgroundColor =
          selectedShift === 'Ochtend'
            ? '#182825'
            : selectedShift === 'Middag'
            ? '#016FB9'
            : selectedShift === 'Avond'
            ? '#22AED1'
            : 'var(--color-blue)';
      }

      datasets = [
        {
          label:
            selectedViewMode === 'Bezettingspercentage'
              ? 'Bezettingsgraad (%)'
              : selectedViewMode === 'Voorspelling'
              ? 'Voorspelling Aantal Gasten'
              : 'Aantal Gasten',
          data: data,
          backgroundColor: Array.isArray(backgroundColor)
            ? backgroundColor
            : new Array(data.length).fill(backgroundColor),
        },
      ];

      setChartData({ labels, datasets });
    }
  }, [
    currentDate,
    reservationsByDate,
    selectedShift,
    selectedViewMode,
    maxCapacity,
    gemiddeldeDuurCouvert,
    predictionsByDate,
    weekOrMonthView,
    weatherDataByDate,
  ]);

  return chartData;
};

export default useChartData;


--- Dashboard/CalendarMap/Hooks/useDates.js ---
// useDates.js

import { useMemo } from 'react';
import { getMonday } from '../Utils/dateUtils';

const useDates = (currentDate, weekOrMonthView) => {
  return useMemo(() => {
    let dates = [];

    if (weekOrMonthView === 'month') {
      const startDate = new Date(
        currentDate.getFullYear(),
        currentDate.getMonth(),
        1
      );
      const endDate = new Date(
        currentDate.getFullYear(),
        currentDate.getMonth() + 1,
        0
      );
      const numDays = endDate.getDate();

      const prevMonthDays = (startDate.getDay() + 6) % 7;

      for (let i = prevMonthDays - 1; i >= 0; i--) {
        const date = new Date(
          currentDate.getFullYear(),
          currentDate.getMonth(),
          -i
        );
        dates.push({ date, currentMonth: false });
      }

      for (let i = 1; i <= numDays; i++) {
        const date = new Date(
          currentDate.getFullYear(),
          currentDate.getMonth(),
          i
        );
        dates.push({ date, currentMonth: true });
      }

      while (dates.length % 7 !== 0) {
        const date = new Date(
          currentDate.getFullYear(),
          currentDate.getMonth() + 1,
          dates.length - numDays - prevMonthDays + 1
        );
        dates.push({ date, currentMonth: false });
      }
    } else if (weekOrMonthView === 'week') {
      const currentWeekStart = getMonday(currentDate);
      for (let i = 0; i < 7; i++) {
        const date = new Date(currentWeekStart);
        date.setDate(currentWeekStart.getDate() + i);
        const currentMonth = date.getMonth() === currentDate.getMonth();
        dates.push({ date, currentMonth });
      }
    }

    return dates;
  }, [currentDate, weekOrMonthView]);
};

export default useDates;


--- Dashboard/CalendarMap/Hooks/usePredictions.js ---
// src/components/Calendar/Hooks/usePredictions.js

import { useState, useEffect } from 'react';
import { median, mean } from '../Utils/predictionUtils';
import { getStartAndEndOfMonth, generateDatesArray } from '../Utils/dateUtils';
import { maxCapacity } from '../reservationData';
import { formatDateForFilter } from '../../../../Utils/dateUtils';

const usePredictions = (
  currentDate,
  reservationsByDate,
  selectedShift,
  selectedViewMode
) => {
  const [predictionsByDate, setPredictionsByDate] = useState({});

  // Parameters for prediction algorithm weights
  const WEIGHT_MEDIAN14 = 0;
  const WEIGHT_MEDIAN20 = 0;
  const WEIGHT_AVERAGE90 = 1;
  const WEIGHT_CURRENT_RESERVATIONS = 0.2;
  const MULTIPLIER_BASE_PREDICTION = 2;

  useEffect(() => {
    if (selectedViewMode !== 'Voorspelling') {
      setPredictionsByDate({});
      return;
    }

    const { start, end } = getStartAndEndOfMonth(currentDate);
    const datesArray = generateDatesArray(start, end);
    const predictions = {};
    const today = new Date();

    // Helper function to get reservations for a date
    const getReservationsForDate = (dateStr) => {
      const reservations = reservationsByDate[dateStr] || [];
      return reservations.filter((res) => {
        return (
          selectedShift === 'Dag' ||
          (selectedShift === 'Ochtend' && res.timeSlot === 0) ||
          (selectedShift === 'Middag' && res.timeSlot === 1) ||
          (selectedShift === 'Avond' && res.timeSlot === 2)
        );
      });
    };

    // Prepare historical data
    const historicalData = [];

    // Build historical data for all dates
    datesArray.forEach((date) => {
      const dateStr = formatDateForFilter(date);
      const reservationsForDate = getReservationsForDate(dateStr);
      const totalGuests = reservationsForDate.reduce((sum, res) => sum + res.aantalGasten, 0);
      historicalData.push({ date, totalGuests });
    });

    // Start predictions from tomorrow
    const startIndex = datesArray.findIndex((date) => date > today);
    if (startIndex === -1) {
      setPredictionsByDate({});
      return;
    }

    // Use a copy of historicalData to avoid mutating the original during prediction
    const extendedHistoricalData = [...historicalData];

    for (let i = startIndex; i < datesArray.length; i++) {
      const currentDate = datesArray[i];
      const currentDateStr = formatDateForFilter(currentDate);
      const currentReservations = getReservationsForDate(currentDateStr);
      const currentTotalGuests = currentReservations.reduce((sum, res) => sum + res.aantalGasten, 0);

      // Collect data for medians and average
      const past14Days = extendedHistoricalData.slice(Math.max(0, i - 14), i);
      const past20Days = extendedHistoricalData
        .slice(Math.max(0, i - 20), i)
        .filter((data) => data.totalGuests > 0);
      const past90DaysSameDay = extendedHistoricalData.filter((data, idx) => {
        return (
          data.date.getDay() === currentDate.getDay() &&
          idx < i &&
          (currentDate - data.date) / (1000 * 60 * 60 * 24) <= 90
        );
      });

      // Calculate medians and average
      const median14Values = past14Days.map((d) => d.totalGuests);
      const median14 = median14Values.length ? median(median14Values) : 0;

      const median20Values = past20Days.map((d) => d.totalGuests);
      const median20 = median20Values.length ? median(median20Values) : 0;

      const average90Values = past90DaysSameDay.map((d) => d.totalGuests);
      const average90 = average90Values.length ? mean(average90Values) : 0;

      // Calculate base prediction
      const factors = [];
      if (median14) factors.push(median14 * WEIGHT_MEDIAN14);
      if (median20) factors.push(median20 * WEIGHT_MEDIAN20);
      if (average90) factors.push(average90 * WEIGHT_AVERAGE90);

      const factorsCount = factors.length || 1;
      const basePrediction =
        (factors.reduce((a, b) => a + b, 0) / factorsCount) * MULTIPLIER_BASE_PREDICTION;

      const adjustedCurrentReservations = (currentTotalGuests / 5) * WEIGHT_CURRENT_RESERVATIONS;

      let prediction = basePrediction + adjustedCurrentReservations;

      // Use max between prediction and current reservations
      if (prediction < currentTotalGuests) {
        prediction = currentTotalGuests;
      }

      // Cap prediction at maxCapacity
      if (prediction > maxCapacity) {
        prediction = maxCapacity;
      }

      // Round prediction
      if (prediction < 1) {
        prediction = 0;
      }

      predictions[currentDateStr] = Math.round(prediction);

      // Update extendedHistoricalData with predicted value
      extendedHistoricalData.push({ date: currentDate, totalGuests: prediction });
    }

    setPredictionsByDate(predictions);
  }, [currentDate, reservationsByDate, selectedShift, selectedViewMode]);

  return predictionsByDate;
};

export default usePredictions;


--- Dashboard/CalendarMap/Hooks/useReportData.js ---
// src/hooks/useReportData.js

import { useState, useEffect } from 'react';
import {
  calculateMedian,
  calculateAverage,
} from '../Utils/reportUtils';
import { formatDateForFilter } from '../../../../Utils/dateUtils';

/**
 * Custom hook to generate report data and calculate statistics.
 *
 * @param {Array} dates - Array of date objects.
 * @param {Object} reservationsByDate - Reservations mapped by date string.
 * @param {String} selectedShift - Selected shift ('Dag', 'Ochtend', 'Middag', 'Avond').
 * @param {Boolean} autoGenerate - Flag to auto-generate report.
 * @returns {Object} - Contains report data, statistics, and loading state.
 */


const useReportData = (dates, reservationsByDate, selectedShift, autoGenerate) => {
  const [reportGenerated, setReportGenerated] = useState(autoGenerate);
  const [loading, setLoading] = useState(false);
  const [stats, setStats] = useState({});
  const [totalGuests, setTotalGuests] = useState(0); // Total guests over the period

  useEffect(() => {
    if (autoGenerate) {
      generateReportData();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [dates, reservationsByDate, selectedShift, autoGenerate]);

  const handleGenerateReport = () => {
    setLoading(true);
    setTimeout(() => {
      generateReportData();
      setLoading(false);
      setReportGenerated(true);
    }, 2000); // Simulate 2 seconds loading time
  };

  const generateReportData = () => {
    let totals = [0, 0, 0]; // [Morning, Afternoon, Evening]
    let dailyTotalsTemp = []; // To store total guests per day
    let totalGuestsTemp = 0; // Total guests over the period

    dates.forEach(({ date }) => {
      const dateString = formatDateForFilter(date);
      const reservations = reservationsByDate[dateString] || [];
      let dayTotal = 0;
      let shiftTotals = [0, 0, 0];

      reservations.forEach((reservation) => {
        if (
          selectedShift === 'Dag' ||
          (selectedShift === 'Ochtend' && reservation.timeSlot === 0) ||
          (selectedShift === 'Middag' && reservation.timeSlot === 1) ||
          (selectedShift === 'Avond' && reservation.timeSlot === 2)
        ) {
          totals[reservation.timeSlot] += reservation.aantalGasten;
          shiftTotals[reservation.timeSlot] += reservation.aantalGasten;
          dayTotal += reservation.aantalGasten;
        }
      });

      totalGuestsTemp += dayTotal;

      dailyTotalsTemp.push({
        date,
        total: dayTotal,
        shiftTotals,
      });
    });

    setTotalGuests(totalGuestsTemp);

    // Calculate statistical data
    if (dailyTotalsTemp.length > 0) {
      const guestCounts = dailyTotalsTemp.map((day) => day.total);
      const min = Math.min(...guestCounts);
      const max = Math.max(...guestCounts);
      const median = calculateMedian(guestCounts);
      const average = calculateAverage(guestCounts);
      const highest = dailyTotalsTemp.find((day) => day.total === max);
      const lowest = dailyTotalsTemp.find((day) => day.total === min);

      setStats({
        minGuests: min,
        maxGuests: max,
        medianGuests: median,
        averageGuests: average.toFixed(2),
        lowestDay: lowest ? lowest.date : null,
        highestDay: highest ? highest.date : null,
      });
    }

    setReportGenerated(true);
  };

  return {
    reportGenerated,
    loading,
    handleGenerateReport,
    stats,
    totalGuests,
    setReportGenerated, // In case you need to reset or control from the component
  };
};

export default useReportData;


--- Dashboard/CalendarMap/Hooks/useReservations.js ---
// src/Components/Calendar/Hooks/useReservations.js

import { useState, useEffect } from 'react';
import useApi from '../../../../Hooks/useApi';

const useReservations = () => {
  const [reservationsByDate, setReservationsByDate] = useState({});
  const api = useApi();

  useEffect(() => {
    const fetchReservations = async () => {
      try {
        const data = await api.get(window.baseDomain + 'api/auth-reservations', { noCache: true });

        console.log('Raw data from backend:', data);

        // Process data to map fields and group reservations by date
        const groupedByDate = {};

        data.forEach((reservation) => {
          // Map backend data to frontend expected format
          const mappedReservation = {
            id: reservation._id, // Ensure this is a string
            date: reservation.date,
            time: reservation.time,
            fullName: `${reservation.firstName} ${reservation.lastName}`,
            email: reservation.email,
            phone: reservation.phone,
            aantalGasten: reservation.guests,
            menu: reservation.menu,
            extra: reservation.extraInfo && reservation.extraInfo.trim() !== '' ? reservation.extraInfo : null,
            timeSlot: getTimeSlot(reservation.time),
          };

          const date = mappedReservation.date;
          if (!groupedByDate[date]) {
            groupedByDate[date] = [];
          }
          groupedByDate[date].push(mappedReservation);
        });

        setReservationsByDate(groupedByDate);
      } catch (error) {
        console.error('Error fetching reservations:', error);
      }
    };

    fetchReservations();
  }, [api]);

  // Helper function to determine timeSlot based on time
  const getTimeSlot = (time) => {
    const [hours, minutes] = time.split(':').map(Number);
    if (hours >= 6 && hours < 12) {
      return 0; // Morning
    } else if (hours >= 12 && hours < 17) {
      return 1; // Afternoon
    } else {
      return 2; // Evening
    }
  };

  return reservationsByDate;
};

export default useReservations;


--- Dashboard/CalendarMap/Hooks/useWeatherData.js ---
import { useState, useEffect } from 'react';
import useApi from '../../../../Hooks/useApi';
import { formatDateForFilter } from '../../../../Utils/dateUtils';

// Global cache for session-based storage
const weatherDataCache = {}; // dateString => temperature

const useWeatherData = (startDate, endDate, fetchWeather) => {
  const [weatherDataByDate, setWeatherDataByDate] = useState({});
  const api = useApi();

  // Convert dates to strings outside useEffect to use in dependencies
  const startDateString = formatDateForFilter(startDate);
  const endDateString = formatDateForFilter(endDate);

  useEffect(() => {
    if (!fetchWeather) {
      setWeatherDataByDate({});
      return;
    }

    const fetchWeatherData = async () => {
      const location = 'Belgium'; // Or make this a parameter

      // Generate all dateStrings in the range
      const dateStrings = [];
      for (
        let d = new Date(startDate);
        d <= endDate;
        d.setDate(d.getDate() + 1)
      ) {
        dateStrings.push(d.toISOString().split('T')[0]);
      }

      // Determine which dates are missing from the cache
      const missingDates = dateStrings.filter(
        (dateStr) => !weatherDataCache[dateStr]
      );

      if (missingDates.length === 0) {
        // All data is cached
        const data = {};
        dateStrings.forEach((dateStr) => {
          data[dateStr] = weatherDataCache[dateStr];
        });
        setWeatherDataByDate(data);
        return;
      }

      try {
        // Fetch data from server
        const response = await api.get(
          window.baseDomain + `api/weather/${encodeURIComponent(location)}/${startDateString}/${endDateString}`
        );

        // Assuming the server returns data in the same format
        const data = response.days.reduce((acc, day) => {
          const dateStr = day.datetime;
          weatherDataCache[dateStr] = day.temp;
          acc[dateStr] = day.temp;
          return acc;
        }, {});

        setWeatherDataByDate(data);
      } catch (error) {
        console.error('Error fetching weather data:', error);
      }
    };

    fetchWeatherData();
  }, [startDateString, endDateString, fetchWeather]);

  return weatherDataByDate;
};

export default useWeatherData;


--- Dashboard/CalendarMap/Reports/MonthReport.js ---
// src/components/MonthReport.js

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FaChevronDown } from 'react-icons/fa';
import useReportData from '../Hooks/useReportData';
import {
  groupDatesIntoWeeks,
  getDutchDateString,
  getDutchDayName, // Ensure this is imported from reportUtils.js
  statLabels,
} from '../Utils/reportUtils';
import { formatDateForFilter } from '../../../../Utils/dateUtils';

// CollapsibleBlock Component remains unchanged
const CollapsibleBlock = ({ weekNumber, dates, reservationsByDate, selectedShift }) => {
  const [isExpanded, setIsExpanded] = useState(false);

  // Generate week label
  const weekLabel = `Week ${weekNumber}`;

  // Function to calculate total guests per day
  const calculateDailyGuests = (date) => {
    const dateString = formatDateForFilter(date);
    const reservations = reservationsByDate[dateString] || [];
    let totalGuests = 0;

    reservations.forEach((reservation) => {
      if (
        selectedShift === 'Dag' ||
        (selectedShift === 'Ochtend' && reservation.timeSlot === 0) ||
        (selectedShift === 'Middag' && reservation.timeSlot === 1) ||
        (selectedShift === 'Avond' && reservation.timeSlot === 2)
      ) {
        totalGuests += reservation.aantalGasten;
      }
    });

    return totalGuests;
  };

  // Calculate total guests for the week
  const totalGuestsForWeek = dates.reduce((total, day) => {
    return total + calculateDailyGuests(day.date);
  }, 0);

  return (
    <div className="collapsible-block">
      <div
        className="block-header"
        onClick={() => setIsExpanded(!isExpanded)}
      >
        <div className="block-title">{weekLabel}</div>
        <FaChevronDown
          className={`chevron-icon ${isExpanded ? 'expanded' : ''}`}
        />
      </div>
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            className="block-content"
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
          >
            <table className="week-table">
              <thead>
                <tr>
                  <th>Datum</th>
                  <th>Dag</th>
                  <th>Aantal Gasten</th>
                </tr>
              </thead>
              <tbody>
                {dates.map((day, index) => (
                  <tr key={index}>
                    <td>{getDutchDateString(day.date)}</td>
                    <td>{getDutchDayName(day.date)}</td>
                    <td>{calculateDailyGuests(day.date)}</td>
                  </tr>
                ))}
                <tr className="totals-styled">
                  <td><strong>Totaal</strong></td>
                  <td></td>
                  <td><strong>{totalGuestsForWeek}</strong></td>
                </tr>
              </tbody>
            </table>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

const MonthReport = ({ dates, reservationsByDate, selectedShift, autoGenerate = false }) => {
  const [weeks, setWeeks] = useState([]); // Array of weeks, each week is an array of dates

  const {
    reportGenerated,
    loading,
    handleGenerateReport,
    stats,
    totalGuests,
  } = useReportData(dates, reservationsByDate, selectedShift, autoGenerate);

  useEffect(() => {
    // Group dates into weeks
    const groupedWeeks = groupDatesIntoWeeks(dates);
    setWeeks(groupedWeeks);
  }, [dates]);

  // Animation variants
  const containerVariants = {
    hidden: {},
    visible: {
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const rowVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1 },
  };

  return (
    <div className="month-report">
      {!reportGenerated && !loading && !autoGenerate && (
        <div
          className="generate-report-text"
          onClick={handleGenerateReport}
          style={{ color: 'var(--color-blue)', cursor: 'pointer' }}
        >
          Genereer rapport
        </div>
      )}

      {loading && (
        <div className="loading-container">
          <div className="spinner"></div>
          <div className="progress-bar"></div>
          <div>Laden...</div>
        </div>
      )}

      {(reportGenerated || autoGenerate) && (
        <motion.div
          className="calendar-report-table"
          initial="hidden"
          animate="visible"
          variants={containerVariants}
        >
          {/* Updated Title Section */}
          <div className="calendar-report-title">
            Maandrapport {selectedShift !== 'Dag' && `- ${selectedShift}`}
          </div>

          {/* Render collapsible blocks for each week */}
          <div className="weeks-container">
            {weeks.map((weekDates, weekIndex) => (
              <CollapsibleBlock
                key={weekIndex}
                weekNumber={weekIndex + 1}
                dates={weekDates}
                reservationsByDate={reservationsByDate}
                selectedShift={selectedShift}
              />
            ))}
          </div>

          {/* Add margin between weeks and statistics */}
          <div className="statistics-separator"></div>

          {/* Render statistical data for the entire month */}
          <div className="statistical-data">
            <table>
              <thead>
                <tr>
                  <th>Statistiek</th>
                  <th>Waarde</th>
                </tr>
              </thead>
              <tbody>
                {Object.entries(stats).map(([key, value], index) => (
                  <motion.tr key={index} variants={rowVariants}>
                    <td>{statLabels[key]}</td>
                    <td>
                      {key.includes('Day') && value
                        ? getDutchDayName(value)
                        : value}
                    </td>
                  </motion.tr>
                ))}
                <motion.tr variants={rowVariants} className="totals-styled">
                  <td><strong>Totaal aantal gasten</strong></td>
                  <td>{totalGuests}</td>
                </motion.tr>
              </tbody>
            </table>
          </div>
        </motion.div>
      )}
    </div>
  );
};

export default MonthReport;


--- Dashboard/CalendarMap/Reports/WeekReport.js ---
// src/components/WeekReport.js

import React from 'react';
import './css/weekReport.css';
import { motion } from 'framer-motion';
import useReportData from '../Hooks/useReportData';
import { getDutchDayName, statLabels } from '../Utils/reportUtils';
import { formatDateForFilter } from '../../../../Utils/dateUtils';

// Define the available shifts
const shifts = [
  { label: 'Ochtend', timeSlot: 0 },
  { label: 'Middag', timeSlot: 1 },
  { label: 'Avond', timeSlot: 2 },
];

const WeekReport = ({ dates, reservationsByDate, selectedShift, autoGenerate = false }) => {
  const {
    reportGenerated,
    loading,
    handleGenerateReport,
    stats,
    totalGuests,
  } = useReportData(dates, reservationsByDate, selectedShift, autoGenerate);

  // Define which shifts to display based on selectedShift
  const visibleShifts = selectedShift === 'Dag'
    ? shifts
    : shifts.filter(shift => shift.label === selectedShift);

  // Calculate total guests by shift
  const totalGuestsByShift = [0, 0, 0]; // [Morning, Afternoon, Evening]
  dates.forEach(({ date }) => {
    const dateString = formatDateForFilter(date)
    const reservations = reservationsByDate[dateString] || [];

    reservations.forEach((reservation) => {
      if (
        selectedShift === 'Dag' ||
        (selectedShift === 'Ochtend' && reservation.timeSlot === 0) ||
        (selectedShift === 'Middag' && reservation.timeSlot === 1) ||
        (selectedShift === 'Avond' && reservation.timeSlot === 2)
      ) {
        totalGuestsByShift[reservation.timeSlot] += reservation.aantalGasten;
      }
    });
  });

  // Calculate total guests for all visible shifts
  const totalGuestsAllShifts = visibleShifts.reduce(
    (sum, shift) => sum + totalGuestsByShift[shift.timeSlot],
    0
  );

  // Animation variants
  const containerVariants = {
    hidden: {},
    visible: {
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const rowVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1 },
  };

  return (
    <div className="week-report">
      {!reportGenerated && !loading && !autoGenerate && (
        <div
          className="generate-report-text"
          onClick={handleGenerateReport}
          style={{ color: 'var(--color-blue)', cursor: 'pointer' }}
        >
          Genereer rapport
        </div>
      )}

      {loading && (
        <div className="loading-container">
          <div className="spinner"></div>
          <div className="progress-bar"></div>
          <div>Laden...</div>
        </div>
      )}

      {(reportGenerated || autoGenerate) && (
        <motion.div
          className="calendar-report-table"
          initial="hidden"
          animate="visible"
          variants={containerVariants}
        >
          {/* Updated Title Section */}
          <div className="calendar-report-title">
            Weekrapport {selectedShift !== 'Dag' && `- ${selectedShift}`}
          </div>

          <table>
            <thead>
              <tr>
                <th>Dag</th>
                {visibleShifts.map((shift) => (
                  <th key={shift.timeSlot}>{shift.label}</th>
                ))}
                <th>Totaal</th>
              </tr>
            </thead>
            <tbody>
              {dates.map(({ date }, index) => {
                const dateString = formatDateForFilter(date);
                const reservations = reservationsByDate[dateString] || [];
                let dayTotal = 0;
                let shiftTotals = [0, 0, 0];

                reservations.forEach((reservation) => {
                  if (
                    selectedShift === 'Dag' ||
                    (selectedShift === 'Ochtend' && reservation.timeSlot === 0) ||
                    (selectedShift === 'Middag' && reservation.timeSlot === 1) ||
                    (selectedShift === 'Avond' && reservation.timeSlot === 2)
                  ) {
                    shiftTotals[reservation.timeSlot] += reservation.aantalGasten;
                    dayTotal += reservation.aantalGasten;
                  }
                });

                return (
                  <motion.tr key={index} variants={rowVariants}>
                    <td>{getDutchDayName(date)}</td>
                    {visibleShifts.map((shift) => (
                      <td key={shift.timeSlot}>{shiftTotals[shift.timeSlot]}</td>
                    ))}
                    <td>{dayTotal}</td>
                  </motion.tr>
                );
              })}
              <motion.tr variants={rowVariants} className='totals-styled'>
                <td>
                  <strong>Totaal</strong>
                </td>
                {visibleShifts.map((shift) => (
                  <td key={shift.timeSlot}>
                    {totalGuestsByShift[shift.timeSlot]}
                  </td>
                ))}
                <td>
                  <strong>{totalGuestsAllShifts}</strong>
                </td>
              </motion.tr>
            </tbody>
          </table>

          {/* Statistical data */}
          <motion.div className="statistical-data" variants={containerVariants}>
            <table>
              <thead>
                <tr>
                  <th>Statistiek</th>
                  <th>Waarde</th>
                </tr>
              </thead>
              <tbody>
                {Object.entries(stats).map(([key, value], index) => (
                  <motion.tr key={index} variants={rowVariants}>
                    <td>{statLabels[key]}</td>
                    <td>
                      {key.includes('Day') && value
                        ? getDutchDayName(value)
                        : value}
                    </td>
                  </motion.tr>
                ))}
              </tbody>
            </table>
          </motion.div>
        </motion.div>
      )}
    </div>
  );
};

export default WeekReport;


--- Dashboard/CalendarMap/Reports/css/weekReport.css ---
/* weekReport.css */


.calendar-page .calendar-report-table {
    width: 100%;
    border-collapse: collapse;
    background-color: #ffffff;
    padding: 20px 30px;
    border-radius: 15px;
}

.calendar-page .calendar-report-table th,
.calendar-page .calendar-page .calendar-report-table td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
}

.calendar-page .calendar-report-table th {
    background-color: #f0f0f0;
    font-weight: bold;
    color: #333;
}

.calendar-page .calendar-report-table td {
    color: #555;
}

.calendar-page .calendar-report-title {
    font-weight: bold;
    font-size: 1.2em;
    text-align: center;
    color: #333;
}


.calendar-page .week-report .generate-report-text {
	color: var(--color-blue);
	cursor: pointer;
  }
  
  .calendar-page .week-report {
	width: 100%;
  }
  
  .calendar-page .loading-container {
	display: flex;
	flex-direction: column;
	align-items: center;
  }
  

  /* Additional styles for report */
  .calendar-page .calendar-report-table {
	margin-top: 20px;
	width: 100%; /* Make the table span the full width */
  }
  
  .calendar-page .calendar-report-table table {
	width: 100%; /* Make the table span the full width */
	border-collapse: collapse;
  }
  
  .calendar-page .calendar-report-table th,
  .calendar-page .calendar-report-table td {
	border: 1px solid var(--color-gray);
	padding: 8px;
	text-align: center;
  }
  
  .calendar-page .calendar-report-title {
	font-size: 1.5em;
	margin-bottom: 20px;
  }
  
  .calendar-page .statistical-data {
	margin-top: 20px;
	width: 100%; /* Make the table span the full width */
  }
  
  .calendar-page .statistical-data table {
	width: 100%; /* Make the table span the full width */
	border-collapse: collapse;
  }
  
  .calendar-page .statistical-data th,
  .calendar-page .statistical-data td {
	border: 1px solid var(--color-gray);
	padding: 8px;
	text-align: left;
  }
  
  .calendar-page .totals-styled {
	font-weight: bold;
  }

  .calendar-page .collapsible-block {
	border: 1px solid var(--color-gray);
	border-radius: 8px;
	margin-bottom: 15px;
	overflow: hidden;
	background-color: #f9f9f9;
  }
  
  .calendar-page .block-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 12px 16px;
	background-color: #e0e0e0;
	cursor: pointer;
  }
  
  .calendar-page .block-title {
	font-weight: bold;
	color: #333;
  }
  
  .calendar-page .chevron-icon {
	transition: transform 0.3s ease;
  }
  
  .calendar-page .chevron-icon.expanded {
	transform: rotate(180deg);
  }
  
  .calendar-page .block-content {
	background-color: #ffffff;
  }
  

--- Dashboard/CalendarMap/ReservationDetailsModal.js ---
// ReservationDetailsModal.js

import React, { useState, useEffect } from 'react';
import ModalWithoutTabs from '../../../Components/Structural/Modal/Standard'; // Adjust the import path as needed
import { motion, AnimatePresence } from 'framer-motion';
import { FaChevronDown } from 'react-icons/fa';
import './css/reservationDetailsModal.css';
import { format, parseISO } from 'date-fns'; // Import parseISO
import { nl } from 'date-fns/locale';
import ConfirmationModal from '../../../Components/Structural/Modal/Delete'; // Import ConfirmationModal
import useApi from '../../../Hooks/useApi'; // Import useApi

const ReservationDetailsModal = ({ reservationsData, onClose, triggerNotification }) => {
  const { date, reservations } = reservationsData;
  const parsedDate = parseISO(date); // Use parseISO to parse the date string
  const formattedDate = format(parsedDate, 'd MMMM yyyy', { locale: nl });

  // Local state to manage the list of reservations within the modal
  const [reservationsList, setReservationsList] = useState(reservations);

  useEffect(() => {
    setReservationsList(reservations);
  }, [reservations]);

  return (
    <ModalWithoutTabs
      onClose={onClose}
      content={
        <div className="reservation-modal-content">
          <h2>Reservaties - {formattedDate}</h2>
          <div className="reservation-table">
            {reservationsList.map((reservation) => (
              <ReservationRow
                key={reservation.id}
                reservation={reservation}
                triggerNotification={triggerNotification}
                onDelete={(deletedReservationId) => {
                  setReservationsList((prevReservations) =>
                    prevReservations.filter((res) => res.id !== deletedReservationId)
                  );
                }}
              />
            ))}
          </div>
        </div>
      }
    />
  );
};

const ReservationRow = ({ reservation, triggerNotification, onDelete }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [deleteError, setDeleteError] = useState(null);
  const api = useApi();

  // Handler for opening the delete confirmation modal
  const handleDeleteClick = () => {
    setDeleteError(null);
    setIsDeleteModalVisible(true);
  };

  // Handler for confirming deletion
  const handleConfirmDelete = async () => {
    setIsDeleteModalVisible(false);
    setIsDeleting(true);
    setDeleteError(null);

    try {
      await api.delete(`${window.baseDomain}api/auth-reservations/${reservation.id}`);
      if (onDelete) {
        onDelete(reservation.id); // Remove the reservation from the list
      }
      console.log(`Reservation ${reservation.id} has been deleted.`);


      triggerNotification('Reservatie verwijderd', 'success');

      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } catch (error) {
      console.error('Error deleting reservation:', error);
      setDeleteError(
        error.response?.data?.error || error.message || 'Failed to delete the reservation.'
      );
      triggerNotification('Fout bij het verwijderen van de reservatie.', 'error');
    } finally {
      setIsDeleting(false);
    }
  };

  // Handler for canceling deletion
  const handleCancelDelete = () => {
    setIsDeleteModalVisible(false);
  };

  // Handler for editing reservation
  const handleEditClick = () => {
    const editUrl = `https://view.reservaties.net/?action=edit&reservationId=${encodeURIComponent(
      reservation.id
    )}&admin=true` + "&restaurantId=" + localStorage.getItem('username');
    window.open(editUrl, '_blank');
  };

  return (
    <div className="reservation-row">
      <div className="reservation-main-info" onClick={() => setIsExpanded(!isExpanded)}>
        <FaChevronDown className={`arrow-icon ${isExpanded ? 'expanded' : ''}`} />
        <span>
          <strong>
            {reservation.aantalGasten} gasten - {reservation.time}
          </strong>{' '}
          - {reservation.fullName}
        </span>
      </div>
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            className="reservation-details"
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
          >
            <div>Email: {reservation.email}</div>
            <div>Telefoon: {reservation.phone}</div>
            {reservation.menu && <div>Menu: {reservation.menu}</div>}
            {reservation.extra && <div>Extra: {reservation.extra}</div>}
            <div className="reservation-buttons">
              <button className="standard-button red" onClick={handleDeleteClick}>
                Verwijderen
              </button>
              <button className="standard-button blue" onClick={handleEditClick}>
                Bewerken
              </button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
      <ConfirmationModal
        isVisible={isDeleteModalVisible}
        title="Reservatie Verwijderen"
        message="Wilt u deze reservatie verwijderen?"
        onConfirm={handleConfirmDelete}
        onCancel={handleCancelDelete}
        confirmText="Verwijderen"
        cancelText="Annuleren"
        confirmButtonClass="discard-button red"
        cancelButtonClass="cancel-button"
        isLoading={isDeleting}
        errorMessage={deleteError}
      />
    </div>
  );
};

export default ReservationDetailsModal;


--- Dashboard/CalendarMap/ShiftSelector.js ---
// ShiftSelector.js

import React, { useRef, useEffect } from 'react';
import { FaList } from 'react-icons/fa';
import './css/shiftSelector.css';

const ShiftSelector = ({
  selectedShift,
  setSelectedShift,
}) => {
  const [isShiftOptionsOpen, setIsShiftOptionsOpen] = React.useState(false);
  const shiftButtonRef = useRef(null);
  const shiftOptionsRef = useRef(null);

  const shifts = ['Dag', 'Ochtend', 'Middag', 'Avond'];

  // Handle Click Outside for Shift Options
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        shiftOptionsRef.current &&
        !shiftOptionsRef.current.contains(event.target) &&
        shiftButtonRef.current &&
        !shiftButtonRef.current.contains(event.target)
      ) {
        setIsShiftOptionsOpen(false);
      }
    };

    if (isShiftOptionsOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    } else {
      document.removeEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isShiftOptionsOpen]);

  const handleShiftSelection = (shift) => {
    setSelectedShift(shift);
    setIsShiftOptionsOpen(false);
  };

  const toggleShiftOptions = () => {
    setIsShiftOptionsOpen(!isShiftOptionsOpen);
  };

  return (
	<div className="shift-selector-calendar-map">
    <div className="shift-selector">
      <button
        onClick={toggleShiftOptions}
        className="standard-button blue shift-button"
        ref={shiftButtonRef}
      >
        <FaList className="shift-button-icon" />
        {selectedShift}
      </button>

      {isShiftOptionsOpen && (
        <div className="shift-options-container" ref={shiftOptionsRef}>
          {shifts.map((shift) => (
            <div
              key={shift}
              className="shift-option"
              onClick={() => handleShiftSelection(shift)}
            >
              {shift}
            </div>
          ))}
        </div>
      )}
    </div>
	</div>
  );
};

export default ShiftSelector;


--- Dashboard/CalendarMap/TimeOfDayBox.js ---
// TimeOfDayBox.js

import React from 'react';
import './css/timeOfDay.css';

const TimeOfDayBox = ({ timeSlot, totalGuests, isPastDate }) => {
  const timeSlotNames = ['Ochtend', 'Middag', 'Avond'];
  const timeSlotColors = ['#182825', '#016FB9', '#22AED1'];
  const backgroundColor = timeSlotColors[timeSlot];
  const opacity = isPastDate ? 0.5 : 1;

  return (
    <div
      className="time-of-day-box"
      style={{ backgroundColor, opacity }}
    >
      <span>{timeSlotNames[timeSlot]}: {totalGuests}</span>
    </div>
  );
};

export default TimeOfDayBox;


--- Dashboard/CalendarMap/Utils/dateUtils.js ---
// /src/Components/Calendar/Utils/dateUtils.js

export const getStartAndEndOfMonth = (date) => {
  const start = new Date(date.getFullYear(), date.getMonth(), 1);
  const end = new Date(date.getFullYear(), date.getMonth() + 1, 0);
  return { start, end };
};

export const generateDatesArray = (start, end) => {
  const dates = [];
  for (let i = 1; i <= end.getDate(); i++) {
    dates.push(new Date(start.getFullYear(), start.getMonth(), i));
  }
  return dates;
};

export const getMonday = (date) => {
	const d = new Date(date);
	const day = d.getDay(); // 0 (Sun) to 6 (Sat)
	const diff = day === 0 ? -6 : 1 - day; // Adjust when day is Sunday
	d.setDate(d.getDate() + diff);
	d.setHours(0, 0, 0, 0); // Reset time to midnight
	return d;
  };

--- Dashboard/CalendarMap/Utils/predictionUtils.js ---
// /src/Components/Calendar/Utils/predictionUtils.js

export const median = (values) => {
	if (values.length === 0) return 0;
	const sorted = [...values].sort((a, b) => a - b);
	const half = Math.floor(sorted.length / 2);
	if (sorted.length % 2) return sorted[half];
	return (sorted[half - 1] + sorted[half]) / 2.0;
  };
  
  export const mean = (values) => {
	if (values.length === 0) return 0;
	return values.reduce((a, b) => a + b, 0) / values.length;
  };
  

--- Dashboard/CalendarMap/Utils/reportUtils.js ---
// src/utils/reportUtils.js

// Helper functions for statistical calculations
export const calculateMedian = (numbers) => {
	const sorted = [...numbers].sort((a, b) => a - b);
	const mid = Math.floor(sorted.length / 2);
	return sorted.length % 2 !== 0
	  ? sorted[mid]
	  : (sorted[mid - 1] + sorted[mid]) / 2;
  };
  
  export const calculateAverage = (numbers) =>
	numbers.reduce((acc, val) => acc + val, 0) / numbers.length;
  
  export const calculateVariance = (numbers, mean) => {
	const squaredDiffs = numbers.map((val) => (val - mean) ** 2);
	return squaredDiffs.reduce((acc, val) => acc + val, 0) / numbers.length;
  };
  
  // Helper functions for date formatting
  export const getDutchDateString = (date) =>
	date.toLocaleDateString('nl-NL', { day: 'numeric', month: 'long' });
  
  export const getDutchDayName = (date) =>
	date.toLocaleDateString('nl-NL', { weekday: 'long' });
  
  // Function to group dates into weeks
  export const groupDatesIntoWeeks = (dates) => {
	const weeks = [];
	for (let i = 0; i < dates.length; i += 7) {
	  weeks.push(dates.slice(i, i + 7));
	}
	return weeks;
  };
  
  // Labels for statistics
  export const statLabels = {
	minGuests: 'Minimaal aantal gasten',
	maxGuests: 'Maximaal aantal gasten',
	medianGuests: 'Mediaan aantal gasten',
	averageGuests: 'Gemiddeld aantal gasten',
	varianceGuests: 'Variantie aantal gasten',
	lowestDay: 'Laagste dag',
	highestDay: 'Hoogste dag',
  };
  

--- Dashboard/CalendarMap/ViewModeSelector.js ---
// ViewModeSelector.js

import React, { useRef, useEffect } from 'react';
import { FaLayerGroup } from 'react-icons/fa';
import './css/viewModeSelector.css';

const ViewModeSelector = ({
  selectedViewMode,
  setSelectedViewMode,
}) => {
  const [isViewModeOptionsOpen, setIsViewModeOptionsOpen] = React.useState(false);
  const viewModeButtonRef = useRef(null);
  const viewModeOptionsRef = useRef(null);

  const viewModes = ['Algemeen', 'Weer'];

  // Handle Click Outside for View Mode Options
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        viewModeOptionsRef.current &&
        !viewModeOptionsRef.current.contains(event.target) &&
        viewModeButtonRef.current &&
        !viewModeButtonRef.current.contains(event.target)
      ) {
        setIsViewModeOptionsOpen(false);
      }
    };

    if (isViewModeOptionsOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    } else {
      document.removeEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isViewModeOptionsOpen]);

  const handleViewModeSelection = (mode) => {
    setSelectedViewMode(mode);
    setIsViewModeOptionsOpen(false);
  };

  const toggleViewModeOptions = () => {
    setIsViewModeOptionsOpen(!isViewModeOptionsOpen);
  };

  return (
    <div className="view-mode-selector">
      <button
        onClick={toggleViewModeOptions}
        className="standard-button blue view-mode-button"
        ref={viewModeButtonRef}
      >
        <FaLayerGroup className="view-mode-button-icon" />
        {selectedViewMode}
      </button>

      {isViewModeOptionsOpen && (
        <div className="view-mode-options-container" ref={viewModeOptionsRef}>
          {viewModes.map((mode) => (
            <div
              key={mode}
              className="view-mode-option"
              onClick={() => handleViewModeSelection(mode)}
            >
              {mode}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default ViewModeSelector;


--- Dashboard/CalendarMap/css/barChartView.css ---
/* ./css/barChartView.css */

.calendar-page .bar-chart-view {
	width: 100%;
	max-width: 800px;
	height: 600px; /* Same height as calendar grid */
	margin: 0 auto;
  }
  

--- Dashboard/CalendarMap/css/bezettingspercentageForm.css ---
/* bezettingspercentageForm.css */

.calendar-page .bezettingspercentage-form-container {
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 16px;
	width: 100%;
	border-bottom: 1px solid #e0e0e0; /* Optional: bottom border */
	gap: 16px;
  }

  .calendar-page .form-label {
	margin-bottom: 20px;
	font-size: 1rem;
	font-weight: 500;
	color: #333; /* Darker color for better readability */
  }
  
  .calendar-page .input-container {
	position: relative;
	flex: 1;
	display: flex;
	align-items: center;
  }
  
  .calendar-page .input-container:not(:last-child) {
	margin-right: 16px;
  }
  
  .calendar-page .input-icon {
	position: absolute;
	left: 10px;
	margin-top: 5px;
	color: #6c757d; /* Gray color */
	pointer-events: none;
  }

  .calendar-page .form-group {
	width: 100% !important;
  }
  
  .calendar-page .standard-input {
	width: 100%;
	margin-top: 5px;
	padding: 10px 10px 10px 35px; /* Padding left to accommodate icon */
	border: 1px solid #ccc;
	border-radius: var(--border-radius); /* Match var(--border-radius) if defined */
	font-size: 1rem;
	transition: border-color 0.3s ease;
	background-color: var(--color-white);
  }
  
  .calendar-page .standard-input:focus {
	border-color: var(--color-blue); /* Match var(--color-blue) */
	outline: none;
  }
  
  .calendar-page .button-container {
	flex: 1;
	display: flex;
	justify-content: flex-end;
  }
  

--- Dashboard/CalendarMap/css/calendarComponent.css ---
/* ./css/calendarComponent.css */

.calendar-page {
	display: flex;
	flex-direction: column;
	align-items: center;
	width: 100%;
	max-width: 800px;
	margin: 20px auto; /* Added top margin */
  }



--- Dashboard/CalendarMap/css/calendarDay.css ---
/* ./css/calendarDay.css */

.calendar-page .calendar-day {
	min-height: 100px;
	padding: 5px;
	box-sizing: border-box;
	cursor: pointer;
	position: relative;
	transition: transform 0.2s ease, opacity 0.2s ease;
  }
  
  .calendar-page .calendar-day.special-mode {
	border: none;
  }
  
  .calendar-page .calendar-day:hover {
	transform: scale(1.05);
  }
  
  .calendar-page .calendar-grid-body .calendar-day {
	opacity: 1;
	transition: opacity 0.3s ease;
  }
  
  .calendar-page .calendar-grid-body .calendar-day.fade-out {
	opacity: 0.5;
  }
  
  .calendar-page .calendar-day-number {
	position: absolute;
	top: 5px;
	right: 5px;
  }
  
  .calendar-page .calendar-day--disabled {
	background-color: #e0e0e0;
  }
  
  .calendar-page .calendar-day--past {
	opacity: 0.5;
  }
  
  .calendar-page .calendar-day--today {
	background-color: var(--color-blue-transparant);

	border: 2px solid var(--color-blue);
  }
  
  .calendar-page .time-of-day-boxes {
	margin-top: 25px; /* Increased margin between date number and boxes */
  }
  
  .calendar-page .heatmap-total-guests,
  .calendar-page .occupancy-percentage,
  .calendar-page .prediction-total-guests {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	font-size: 18px;
	font-weight: bold;
	opacity: 0;
	transition: opacity 0.3s ease;
  }
  
  .calendar-page .calendar-day:hover .heatmap-total-guests,
  .calendar-page .calendar-day:hover .prediction-total-guests {
	opacity: 1;
  }
  
  .calendar-page .calendar-day .occupancy-percentage {
	opacity: 1;
	color: black;
  }
  

--- Dashboard/CalendarMap/css/calendarGrid.css ---
/* ./css/calendarGrid.css */

.calendar-page .calendar-grid {
    display: flex;
    flex-direction: column;
    width: 100%;
    max-width: 800px;
    margin-top: 10px;
    border: 1px solid #ccc;
}

.calendar-page .calendar-grid-header,
.calendar-page .calendar-grid-body {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
}

.calendar-page .calendar-grid-header div {
    text-align: center;
    font-weight: bold;
    padding: 5px 0;
    background-color: #f0f0f0;
}

.calendar-page .calendar-grid-header {
    border-bottom: none;
    border-radius: 10px 10px 0px 0px;
}





--- Dashboard/CalendarMap/css/calendarHeader.css ---
/* ./css/calendarHeader.css */

.calendar-page .calendar-header {
	display: flex;
	align-items: center;
	justify-content: space-between;
	margin-bottom: 10px;
	width: 100%;
	max-width: 800px;
  }
  
  .calendar-page .calendar-header h2 {
	margin: 0;
	text-align: center;
	flex-grow: 1;
  }
  
  .calendar-page .calendar-header .nav-button {
	background: none;
	border: none;
	cursor: pointer;
	color: #000;
  }
  
  .calendar-page .calendar-header .nav-button:hover {
	color: var(--color-blue);
  }
  
  .calendar-page .calendar-header .header-buttons {
	display: flex;
	align-items: center;
  }
  
  .calendar-page .calendar-header .header-titles {
	display: flex;
	align-items: center;
	justify-content: center;
	margin: auto;
  }
  
  .calendar-page .toggle-button {
	margin-right: 10px;
	display: flex;
	align-items: center;
	justify-content: center;
	height: 38px;
  }
  
  .calendar-page .nav-button {
	background: none;
	border: none;
	cursor: pointer;
	padding: 8px;
	border-radius: 4px;
	transition: background-color 0.3s ease;
  }
  
  .calendar-page .nav-button:hover {
	background-color: #e0e0e0;
  }
  
  .calendar-page .header-title-container {
	display: flex;
	align-items: center;
	position: relative;
  }
  
  .calendar-page .header-title-container h2 {
	margin: 0;
	font-size: 1.5rem;
  }
  
  .calendar-page .view-options-button {
	background: none;
	border: none;
	cursor: pointer;
	margin-left: 8px;
	display: flex;
	align-items: center;
	padding: 4px;
	border-radius: 4px;
	opacity: 0.5;
	transition: all 0.3s ease;
  }
  
  .calendar-page .view-options-button:hover {
	opacity: 1;
  }
  
  .calendar-page .view-options-container {
	position: absolute;
	top: 40px;
	right: 0px;
	background-color: #ffffff;
	border: 1px solid #ccc;
	border-radius: 8px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
	z-index: 1000;
	width: 120px;
	padding: 10px 0;
  }
  
  .calendar-page .view-option {
	padding: 10px 20px;
	cursor: pointer;
	transition: background-color 0.3s ease;
  }
  
  .calendar-page .view-option:hover {
	background-color: #f1f1f1;
  }
  
  .calendar-page .view-option.selected {
	background-color: #e0e0e0;
  }
  
  .calendar-page .header-buttons {
	display: flex;
	align-items: center;
  }
  
  /* Tooltip styles */
  .calendar-page .button-with-tooltip {
	position: relative;
	display: inline-block;
	margin-right: 10px;
  }
  
  .calendar-page .button-with-tooltip .tooltip {
	display: none;
	position: absolute;
	bottom: 125%;
	left: 50%;
	transform: translateX(-50%);
	background-color: black;
	color: white;
	padding: 6px 8px;
	border-radius: 4px;
	white-space: nowrap;
	font-size: 14px;
	z-index: 1000;
	opacity: 0;
	transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
  }
  
  .calendar-page .button-with-tooltip .tooltip::before {
	content: '';
	position: absolute;
	top: 100%;
	left: 50%;
	transform: translateX(-50%);
	border-width: 5px;
	border-style: solid;
	border-color: black transparent transparent transparent;
  }
  
  .calendar-page .button-with-tooltip:hover .tooltip {
	display: block;
	opacity: 1;
	transform: translateX(-50%) translateY(-5px);
  }
  
  .calendar-page .header-buttons .button-with-tooltip {
	margin-right: 10px;
  }
  

--- Dashboard/CalendarMap/css/reservationDetailsModal.css ---
/* ./css/reservationDetailsModal.css */

.calendar-page .reservation-modal-content h2 {
	text-align: center;
	margin: 20px 0;
  }
  
  .calendar-page .reservation-table {
	margin-top: 20px;
  }
  
  .calendar-page .reservation-row {
	border-bottom: 1px solid #ccc;
	padding: 10px 0;
	font-size: 15px; /* Increased font size by 1px */
  }
  
  .calendar-page .reservation-main-info {
	display: flex;
	align-items: center;
	cursor: pointer;
	margin-bottom: 10px; /* Increased margin between items */
  }
  
  .calendar-page .reservation-main-info .arrow-icon {
	margin-right: 10px;
	transition: transform 0.3s;
  }
  
  .calendar-page .reservation-main-info .arrow-icon.expanded {
	transform: rotate(180deg);
  }
  
  .calendar-page .reservation-details {
	padding-left: 30px;
	overflow: hidden;
  }
  
  .calendar-page .reservation-details > div {
	margin-bottom: 5px;
  }
  
  .calendar-page .reservation-buttons {
	display: flex;
	gap: 10px;
	margin-top: 10px;
  }
  
  .calendar-page .reservation-buttons .standard-button {
	font-size: 12px;
  }
  
  .calendar-page .reservation-buttons .standard-button.red {
	background-color: var(--color-red);
	color: #fff;
  }
  
  .calendar-page .reservation-buttons .standard-button.blue {
	background-color: var(--color-blue);
	color: #fff;
  }
  

--- Dashboard/CalendarMap/css/shiftSelector.css ---
/* ./css/shiftSelector.css */

.calendar-page .shift-selector-calendar-map .shift-selector {
	position: relative;
	display: inline-block;
	margin-right: 10px; /* Added margin to separate from heatmap button */
  }
  
  .calendar-page .shift-selector-calendar-map .shift-button {
	display: flex;
	align-items: center;
  }
  
  .calendar-page .shift-selector-calendar-map .shift-button-icon {
	margin-right: 5px;
  }
  
  .calendar-page .shift-selector-calendar-map .shift-options-container {
	position: absolute;
	top: 50px;
	right: 0;
	background-color: #ffffff;
	border: 1px solid #ccc;
	border-radius: 8px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
	z-index: 1000;
	width: 150px;
	padding: 10px 0;
  }
  
  .calendar-page .shift-selector-calendar-map .shift-option {
	padding: 10px 20px;
	cursor: pointer;
	transition: background-color 0.3s ease;
  }
  
  .calendar-page .shift-selector-calendar-map .shift-option:hover {
	background-color: #f1f1f1;
  }
  

--- Dashboard/CalendarMap/css/timeOfDay.css ---
/* ./css/timeOfDay.css */

  .calendar-page .time-of-day-box {
	width: 100%;
	border-radius: 5px;
	color: #fff;
	padding: 8px 5px;
	margin-bottom: 5px;
	text-align: left;
	font-size: 13px;
	font-weight: 500;
  }
  

--- Dashboard/CalendarMap/css/viewModeSelector.css ---
/* ./css/viewModeSelector.css */

.calendar-page .view-mode-selector {
	position: relative;
	display: inline-block;
	margin-right: 10px;
  }
  
  .calendar-page .view-mode-button {
	display: flex;
	align-items: center;
  }
  
  .calendar-page .view-mode-button-icon {
	margin-right: 5px;
  }
  
  .calendar-page .view-mode-options-container {
	position: absolute;
	top: 50px;
	right: 0;
	background-color: #ffffff;
	border: 1px solid #ccc;
	border-radius: 8px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
	z-index: 1000;
	width: 220px;
	padding: 10px 0;
  }
  
  .calendar-page .view-mode-option {
	padding: 10px 20px;
	cursor: pointer;
	transition: background-color 0.3s ease;
  }
  
  .calendar-page .view-mode-option:hover {
	background-color: #f1f1f1;
  }
  

--- Dashboard/CalendarMap/index.js ---
// src/Components/Calendar/CalendarComponent.js

import React, { useState, useMemo } from 'react';
import CalendarHeader from './CalendarHeader';
import CalendarGrid from './CalendarGrid';
import BarChartView from './BarChartView';
import ReservationDetailsModal from './ReservationDetailsModal';
import './css/calendarComponent.css';
import { withHeader } from '../../../Components/Structural/Header';
import useReservations from './Hooks/useReservations';
import usePredictions from './Hooks/usePredictions';
import WeekReport from './Reports/WeekReport';
import MonthReport from './Reports/MonthReport';
import ModalWithoutTabs from '../../../Components/Structural/Modal/Standard';
import BezettingspercentageForm from './BezettingspercentageForm';
import useDates from './Hooks/useDates';
import useWeatherData from './Hooks/useWeatherData';
import { getMonday } from './Utils/dateUtils';
import { formatDateForFilter } from '../../../Utils/dateUtils';
import useNotification from '../../../Components/Notification/index.js';

const CalendarComponent = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedDateReservations, setSelectedDateReservations] = useState(null);
  const [selectedShift, setSelectedShift] = useState('Dag');
  const [selectedViewMode, setSelectedViewMode] = useState('Algemeen');
  const [isChartView, setIsChartView] = useState(false);
  const [weekOrMonthView, setWeekOrMonthView] = useState('month');
  const [isReportModalOpen, setIsReportModalOpen] = useState(false);

  const [maxCapacityInput, setMaxCapacityInput] = useState(50); // Default max capacity
  const [gemiddeldeDuurCouvertInput, setGemiddeldeDuurCouvertInput] = useState(60); // Default value

  const reservationsByDate = useReservations(); // Fetch reservations using the new hook
  const predictionsByDate = usePredictions(
    currentDate,
    reservationsByDate,
    selectedShift,
    selectedViewMode
  );

  const dates = useDates(currentDate, weekOrMonthView);

  // Memoize startDate and endDate to prevent re-creation on every render
  const { startDate, endDate } = useMemo(() => {
    let startDate, endDate;
    if (weekOrMonthView === 'month') {
      startDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
      endDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    } else if (weekOrMonthView === 'week') {
      startDate = getMonday(currentDate);
      endDate = new Date(startDate);
      endDate.setDate(endDate.getDate() + 6);
    }
    return { startDate, endDate };
  }, [currentDate, weekOrMonthView]);

  const weatherDataByDate = useWeatherData(startDate, endDate, selectedViewMode === 'Weer');

  const { triggerNotification, NotificationComponent } = useNotification();

  const handlePrev = () => {
    if (weekOrMonthView === 'week') {
      setCurrentDate((prev) => {
        const newDate = new Date(prev);
        newDate.setDate(prev.getDate() - 7);
        return newDate;
      });
    } else {
      setCurrentDate(
        new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1)
      );
    }
  };

  const handleNext = () => {
    if (weekOrMonthView === 'week') {
      setCurrentDate((prev) => {
        const newDate = new Date(prev);
        newDate.setDate(prev.getDate() + 7);
        return newDate;
      });
    } else {
      setCurrentDate(
        new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1)
      );
    }
  };

  const handleDateClick = (date) => {
    const dateString = formatDateForFilter(date);
    setSelectedDateReservations({
      date: dateString,
      reservations: reservationsByDate[dateString] || [],
    });
  };

  const handleCloseModal = () => {
    setSelectedDateReservations(null);
  };

  const toggleChartView = () => {
    setIsChartView(!isChartView);
  };

  const openReportModal = () => {
    setIsReportModalOpen(true);
  };

  const closeReportModal = () => {
    setIsReportModalOpen(false);
  };

  const handleMaxCapacityChange = (e) => {
    setMaxCapacityInput(e.target.value);
  };

  const handleGemiddeldeDuurCouvertChange = (e) => {
    setGemiddeldeDuurCouvertInput(e.target.value);
  };

  return (
    <div className="calendar-page">
      <NotificationComponent />
      <CalendarHeader
        currentDate={currentDate}
        onPrev={handlePrev}
        onNext={handleNext}
        selectedShift={selectedShift}
        setSelectedShift={setSelectedShift}
        selectedViewMode={selectedViewMode}
        setSelectedViewMode={setSelectedViewMode}
        isChartView={isChartView}
        toggleChartView={toggleChartView}
        weekOrMonthView={weekOrMonthView}
        setWeekOrMonthView={setWeekOrMonthView}
        onGenerateReport={openReportModal}
      />

      {selectedViewMode === 'Bezettingspercentage' && (
        <BezettingspercentageForm
          maxCapacity={maxCapacityInput}
          gemiddeldeDuurCouvert={gemiddeldeDuurCouvertInput}
          onMaxCapacityChange={handleMaxCapacityChange}
          onGemiddeldeDuurCouvertChange={handleGemiddeldeDuurCouvertChange}
        />
      )}

      {isChartView ? (
        <BarChartView
          currentDate={currentDate}
          reservationsByDate={reservationsByDate}
          selectedShift={selectedShift}
          selectedViewMode={selectedViewMode}
          predictionsByDate={predictionsByDate}
          weekOrMonthView={weekOrMonthView}
          maxCapacity={maxCapacityInput}
          gemiddeldeDuurCouvert={gemiddeldeDuurCouvertInput}
          weatherDataByDate={weatherDataByDate}
        />
      ) : (
        <CalendarGrid
          dates={dates}
          currentDate={currentDate}
          reservationsByDate={reservationsByDate}
          onDateClick={handleDateClick}
          selectedShift={selectedShift}
          selectedViewMode={selectedViewMode}
          predictionsByDate={predictionsByDate}
          weekOrMonthView={weekOrMonthView}
          maxCapacity={maxCapacityInput}
          gemiddeldeDuurCouvert={gemiddeldeDuurCouvertInput}
          weatherDataByDate={weatherDataByDate}
        />
      )}
      {selectedDateReservations && (
        <ReservationDetailsModal
          reservationsData={selectedDateReservations}
          onClose={handleCloseModal}
          triggerNotification={triggerNotification}
        />
      )}

      {isReportModalOpen && (
        <ModalWithoutTabs
          content={
            weekOrMonthView === 'week' ? (
              <WeekReport
                dates={dates}
                reservationsByDate={reservationsByDate}
                selectedShift={selectedShift}
                autoGenerate={true}
              />
            ) : (
              <MonthReport
                dates={dates}
                reservationsByDate={reservationsByDate}
                selectedShift={selectedShift}
                autoGenerate={true}
              />
            )
          }
          onClose={closeReportModal}
        />
      )}
    </div>
  );
};

export default withHeader(CalendarComponent);


--- Dashboard/CalendarMap/reservationData.js ---
// reservationData.js

export const maxCapacity = 50; // Define the maximum capacity

const firstNames = [
  'Jan', 'Maria', 'Peter', 'Linda', 'Mark',
  'Sophie', 'Thomas', 'Laura', 'Robert', 'Emma',
  'Lucas', 'Olivia', 'Liam', 'Ava', 'Noah',
  'Isabella', 'Ethan', 'Mia', 'Mason', 'Charlotte'
];
const lastNames = [
  'Jansen', 'De Vries', 'Bakker', 'Visser', 'Smit',
  'Meijer', 'Mulder', 'De Boer', 'Bos', 'Vos',
  'Peters', 'Hendriksen', 'Kuiper', 'Dekker', 'Verhoeven',
  'Martens', 'Laurens', 'Van Dijk', 'Van den Berg', 'De Groot'
];

const extraOptions = [
  'Vegetarisch menu', 'Extra broodjes', 'Babystoel nodig',
  'Geen extra', 'Geen extra', 'Geen extra',
  'Geen extra', 'Geen extra', 'Geen extra', null
];

const reservations = [];

const now = new Date();

for (let i = 1; i <= 500; i++) {
  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
  const fullName = `${firstName} ${lastName}`;
  const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}@example.com`;
  const phone = `06${Math.floor(10000000 + Math.random() * 90000000)}`;
  const aantalGasten = Math.floor(Math.random() * 4) + 2;

  // Random date within +/- 1 month from current date
  const reservationDate = new Date(now);
  const daysOffset = Math.floor(Math.random() * 60) - 30;
  reservationDate.setDate(now.getDate() + daysOffset);

  const year = reservationDate.getFullYear();
  const month = String(reservationDate.getMonth() + 1).padStart(2, '0');
  const day = String(reservationDate.getDate()).padStart(2, '0');
  const formattedDate = `${year}-${month}-${day}`;

  // Random time slot
  const timeSlot = Math.floor(Math.random() * 3);
  let hour;
  switch (timeSlot) {
    case 0: // Morning
      hour = Math.floor(Math.random() * 6) + 6; // 6 - 11
      break;
    case 1: // Afternoon
      hour = Math.floor(Math.random() * 6) + 12; // 12 - 17
      break;
    case 2: // Evening
      hour = Math.floor(Math.random() * 6) + 18; // 18 - 23
      break;
  }
  const minute = Math.random() < 0.5 ? '00' : '30';
  const tijdstip = `${hour.toString().padStart(2, '0')}:${minute}`;

  let extra = extraOptions[Math.floor(Math.random() * extraOptions.length)];

  if (extra === 'Geen extra') {
    extra = null;
  }

  reservations.push({
    id: i,
    date: formattedDate,
    time: tijdstip,
    fullName,
    email,
    phone,
    aantalGasten,
    extra,
    timeSlot: timeSlot, // 0: Morning, 1: Afternoon, 2: Evening
  });
}

export default reservations;


--- Dashboard/DayList/FieldFilterModal.js ---
// src/Components/ReservationsList/FieldFilterModal.js

import React, { useState } from 'react';
import './css/fieldFilterModal.css';
import FIELD_CONFIG from './fieldConfig.js';
import ModalWithoutTabs from '../../../Components/Structural/Modal/Standard/index.js';

const FieldFilterModal = ({ isOpen, onClose, visibleFields, setVisibleFields }) => {
  const [selectedFields, setSelectedFields] = useState(visibleFields);

  const handleFieldChange = (fieldKey) => {
    if (selectedFields.includes(fieldKey)) {
      setSelectedFields(selectedFields.filter((key) => key !== fieldKey));
    } else {
      setSelectedFields([...selectedFields, fieldKey]);
    }
  };

  const handleConfirm = () => {
    setVisibleFields(selectedFields);
    onClose();
  };

  return (
    isOpen && (
      <ModalWithoutTabs
        content={
          <div className="field-filter-modal">
            <h2>Selecteer velden om weer te geven</h2>
            <div className="field-options">
              {FIELD_CONFIG.map((field) => (
                <label key={field.key} className="field-option">
                  <input
                    type="checkbox"
                    disabled={field.alwaysVisible}
                    checked={selectedFields.includes(field.key)}
                    onChange={() => handleFieldChange(field.key)}
                  />
                  {field.label}
                </label>
              ))}
            </div>
            <div className="modal-buttons">
              <button className="confirm-button" onClick={handleConfirm}>
                Bevestigen
              </button>
            </div>
          </div>
        }
        onClose={onClose}
      />
    )
  );
};

export default FieldFilterModal;


--- Dashboard/DayList/Filters/DatePicker.js ---
// src/Components/ReservationsList/Filters/DatePickerComponent.js

import React from 'react';
import DatePicker from 'react-datepicker';
import { FaCalendarAlt, FaChevronLeft, FaChevronRight } from 'react-icons/fa';
import 'react-datepicker/dist/react-datepicker.css';
import {
  formatDateDutch,
  isToday,
} from '../../../../Utils/dateUtils.js';
import './css/datePicker.css';
import '../css/print.css';

const DatePickerComponent = ({
  selectedDate,
  setSelectedDate,
  isDatePickerOpen,
  setIsDatePickerOpen,
  handleDateChange,
  totalGuests, // New prop
  selectedShift, // New prop
  isPrinting, // New prop
}) => {
  // Handler to decrement the date by one day
  const handlePrevDate = () => {
    const prevDate = new Date(selectedDate);
    prevDate.setDate(prevDate.getDate() - 1);
    setSelectedDate(prevDate);
  };

  // Handler to increment the date by one day
  const handleNextDate = () => {
    const nextDate = new Date(selectedDate);
    nextDate.setDate(nextDate.getDate() + 1);
    setSelectedDate(nextDate);
  };

  const handlePrintClick = (e) => {
    e.stopPropagation(); // Prevent triggering other click events
    window.print(); // Trigger the print dialog
  };

  return (
    <div className="date-picker-component">
      {selectedDate && (
        <div className="selected-date-container">
          {/* Previous Date Button */}
          <div className="button-with-tooltip">
            <button className="nav-button" onClick={handlePrevDate} aria-label="Previous Date">
              <FaChevronLeft size={16} />
            </button>
            <div className="tooltip">
              Vorige Dag
            </div>
          </div>

          {/* Selected Date with Shift Name */}
          <h2 className="selected-date">
            {isPrinting
              ? formatDateDutch(selectedDate) // Always show the formatted date when printing
              : isToday(selectedDate)
              ? 'Vandaag' // Show 'Vandaag' if it's today and not printing
              : formatDateDutch(selectedDate)} {/* Show formatted date if not today and not printing */}
            {selectedShift && ` - ${selectedShift}`} {/* Append shift name if selected */}
            {selectedDate && (
              <div className="total-guests-container">
                {totalGuests} gasten
              </div>
            )}
          </h2>

          {/* Next Date Button */}
          <div className="button-with-tooltip">
            <button className="nav-button" onClick={handleNextDate} aria-label="Next Date">
              <FaChevronRight size={16} />
            </button>
            <div className="tooltip">
              Volgende Dag
            </div>
          </div>
        </div>
      )}

      {/* Date Picker Toggle Button */}
      <button
        onClick={() => setIsDatePickerOpen(!isDatePickerOpen)}
        className="button-style-1 date-button"
      >
        <FaCalendarAlt className="button-style-1-icon date-button-icon" />
        {selectedDate
          ? isToday(selectedDate)
            ? 'Vandaag'
            : `${formatDateDutch(selectedDate)}`
          : 'Datum'}
      </button>

      {isDatePickerOpen && (
        <div className="date-picker-popup">
          <DatePicker
            selected={selectedDate}
            onChange={handleDateChange}
            inline
            locale="nl"
            dateFormat="dd/MM/yyyy"
            placeholderText="Selecteer een datum"
            todayButton="Vandaag"
          />
        </div>
      )}
    </div>
  );
};

export default DatePickerComponent;


--- Dashboard/DayList/Filters/ShiftSelector.js ---
// ShiftSelector.js

import React, { useRef, useEffect } from 'react';
import { FaList } from 'react-icons/fa';
import './css/shiftSelector.css'; // Create and style this CSS as needed

const ShiftSelector = ({
  shifts,
  selectedShift,
  setSelectedShift,
  isShiftOptionsOpen,
  setIsShiftOptionsOpen,
  setCurrentPage,
}) => {
  const shiftButtonRef = useRef(null);
  const shiftOptionsRef = useRef(null);

  // Handle Click Outside for Shift Options
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        shiftOptionsRef.current &&
        !shiftOptionsRef.current.contains(event.target) &&
        shiftButtonRef.current &&
        !shiftButtonRef.current.contains(event.target)
      ) {
        setIsShiftOptionsOpen(false);
      }
    };

    if (isShiftOptionsOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    } else {
      document.removeEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isShiftOptionsOpen, setIsShiftOptionsOpen]);

  const handleShiftSelection = (shift) => {
    setSelectedShift(shift);
    setIsShiftOptionsOpen(false);
    setCurrentPage(1); // Reset to first page on filter change
  };

  const toggleShiftOptions = () => {
    setIsShiftOptionsOpen(!isShiftOptionsOpen);
  };

  return (
    <div className="shift-selector">
      <button
        onClick={toggleShiftOptions}
        className="button-style-1 shift-button"
        ref={shiftButtonRef}
      >
        <FaList className="button-style-1-icon shift-button-icon" />
        {selectedShift ? `${selectedShift}` : 'Shift'}
      </button>

      {isShiftOptionsOpen && (
        <div className="shift-options-container" ref={shiftOptionsRef}>
          {Object.keys(shifts).map((shift) => (
            <div
              key={shift}
              className="shift-option"
              onClick={() => handleShiftSelection(shift)}
            >
              {shift}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default ShiftSelector;


--- Dashboard/DayList/Filters/css/datePicker.css ---
/* datePicker.css */

.reservations-page .date-picker-component {
	position: relative;
	display: flex;
	align-items: center;
	justify-content: center;
  }
  
  .reservations-page .date-picker-component .selected-date-container {
	display: flex;
	align-items: center;
	position: relative;
  }

  /* src/Components/ReservationsList/Filters/css/datePicker.css */

  .reservations-page .date-picker-component .total-guests-container {
	border: 1px solid #b0b0b0;
	border-radius: 25px; /* 50% rounded corners */
	padding: 4px 12px; /* Small padding */
	display: block;
	margin-left: 10px;
	font-size: 0.875rem; /* Small font size */
	text-align: center;
  }
  
  
  .reservations-page .date-picker-component .nav-button {
	background: none;
	border: none;
	cursor: pointer;
	padding: 6px;
	border-radius: 4px;
	transition: background-color 0.3s ease;
	color: #000;
	display: flex;
	align-items: center;
	justify-content: center;
  }
  
  .reservations-page .date-picker-component .nav-button:hover {
	background-color: #e0e0e0;
	color: var(--color-blue);
  }
  
  .reservations-page .date-picker-component .selected-date {
	text-align: center;
	margin: 0 10px;
	font-size: 1.5em;
	color: #333;
	display: flex;
	align-items: center;
	position: relative;
  }
  
  .reservations-page .date-picker-component .print-icon {
	margin-left: 8px;
	color: lightgray;
	opacity: 0;
	font-size: 20px;
	transition: all 0.3s ease;
	cursor: pointer;
  }
  
  .reservations-page .date-picker-component .selected-date:hover .print-icon,
  .reservations-page .date-picker-component .print-icon:hover {
	opacity: 1;
  }
  
  .reservations-page .date-picker-component .print-icon:hover {
	color: gray; 
  }
  
  .reservations-page .date-picker-component .date-button {
	position: absolute;
	top: -80px;
	right: 10px;
  }
  
  .reservations-page .date-picker-component .date-picker-popup {
	position: absolute;
	top: -30px;
	right: 10px;
	z-index: 100000;
	background-color: #fff;
	border: 1px solid #ddd;
	border-radius: 8px;
	padding: 10px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }
  
  /* Tooltip styles */
  .reservations-page .date-picker-component .button-with-tooltip {
	position: relative;
	display: inline-block;
	margin: 0 5px;
  }
  
  .reservations-page .date-picker-component .button-with-tooltip .tooltip {
	display: none;
	position: absolute;
	bottom: 125%;
	left: 50%;
	transform: translateX(-50%);
	background-color: black;
	color: white;
	padding: 6px 8px;
	border-radius: 4px;
	white-space: nowrap;
	font-size: 14px;
	z-index: 1000;
	opacity: 0;
	transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
  }
  
  .reservations-page .date-picker-component .button-with-tooltip .tooltip::before {
	content: '';
	position: absolute;
	top: 100%;
	left: 50%;
	transform: translateX(-50%);
	border-width: 5px;
	border-style: solid;
	border-color: black transparent transparent transparent;
  }
  
  .reservations-page .date-picker-component .button-with-tooltip:hover .tooltip {
	display: block;
	opacity: 1;
	transform: translateX(-50%) translateY(-5px);
  }
  
  /* Adjust margins to prevent overlap */
  .reservations-page .date-picker-component .selected-date {
	margin: 0 40px; /* Adjust as needed based on chevron sizes */
  }
  
  @media (max-width: 1200px) {
	.reservations-page .date-picker-component .total-guests-container {
		display: none;
	}
  }

  @media (max-width: 1100px) {
	.reservations-page .date-picker-component .nav-button {
		display: none;
	}
  }

  @media (max-width: 900px) {
	.reservations-page .date-picker-component .selected-date-container {
		margin-bottom: 0px;
	}
}

.reservations-page .date-picker-component {
	margin-bottom: 40px;
}

@media (max-width: 900px) {
	.reservations-page .date-picker-component {
		margin-top: 100px;
	}

	.reservations-page .date-picker-component .selected-date {
		text-align: center;
		font-size: 23px;
		margin-top: 12px;
	}

	.reservations-page .date-picker-component {
		margin-bottom: 0px;
	}
}



--- Dashboard/DayList/Filters/css/shiftSelector.css ---

  .reservations-page .shift-button {
	position: absolute;
	top: -30px;
	right: 10px;
  }

  .reservations-page .shift-options-container {
	position: absolute;
	top: 20px;
	right: 10px;
	background-color: #ffffff;
	border: 1px solid #ccc;
	border-radius: 8px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
	z-index: 1000;
	width: 150px;
	padding: 10px 0;
  }
  
  .reservations-page .shift-option {
	padding: 10px 20px;
	cursor: pointer;
	transition: background-color 0.3s ease;
  }
  
  .reservations-page .shift-option:hover {
	background-color: #f1f1f1;
  }
  

--- Dashboard/DayList/Hooks/useFilteredReservations.js ---
// useFilteredReservations.js

import { useMemo } from 'react';
import { formatDateForFilter, timeToMinutes } from '../../../../Utils/dateUtils.js';
import { shifts } from '../Utils/constants.js';

const useFilteredReservations = (reservationsData, filters) => {
  const {
    searchQuery,
    nameSearch,
    guestsSearch,
    timeSearch,
    selectedDate,
    selectedShift,
  } = filters;

  const filteredReservationsData = useMemo(() => {
    return reservationsData.filter((reservation) => {
      const generalMatch = !searchQuery || (() => {
        const query = searchQuery.toLowerCase();

        const fullName = `${reservation.firstName || ''} ${reservation.lastName || ''}`.toLowerCase();
        const guests = reservation.aantalGasten ? reservation.aantalGasten.toString() : '';
        const time = (reservation.tijdstip || '').toLowerCase();
        const email = (reservation.email || '').toLowerCase();
        const phone = (reservation.telefoon || '').toLowerCase();

        return (
          fullName.includes(query) ||
          guests.includes(query) ||
          time.includes(query) ||
          email.includes(query) ||
          phone.includes(query)
        );
      })();

      const matchesName = !nameSearch || (() => {
        const fullName = `${reservation.firstName || ''} ${reservation.lastName || ''}`.toLowerCase();
        return fullName.includes(nameSearch.toLowerCase());
      })();

      const matchesGuests = !guestsSearch || (() => {
        return reservation.aantalGasten
          ? reservation.aantalGasten.toString().includes(guestsSearch)
          : false;
      })();

      const matchesTime = !timeSearch || (() => {
        return reservation.tijdstip
          ? reservation.tijdstip.toLowerCase().includes(timeSearch.toLowerCase())
          : false;
      })();

      const matchesDate = !selectedDate || (() => {
        const formattedSelectedDate = formatDateForFilter(selectedDate);
        return reservation.date === formattedSelectedDate;
      })();

      const matchesShift = !selectedShift || (() => {
        const shift = shifts[selectedShift];
        if (!shift || !reservation.tijdstip) return false;
        const reservationMinutes = timeToMinutes(reservation.tijdstip);
        const shiftStart = timeToMinutes(shift.start);
        const shiftEnd = timeToMinutes(shift.end);
        return reservationMinutes >= shiftStart && reservationMinutes <= shiftEnd;
      })();

      return generalMatch && matchesName && matchesGuests && matchesTime && matchesDate && matchesShift;
    });
  }, [reservationsData, searchQuery, nameSearch, guestsSearch, timeSearch, selectedDate, selectedShift]);

  return filteredReservationsData;
};

export default useFilteredReservations;
 

--- Dashboard/DayList/Hooks/useIsMobile.js ---
// useIsMobile.js

import { useState, useEffect } from 'react';

const useIsMobile = (breakpoint = 900) => {
  const [isMobile, setIsMobile] = useState(window.innerWidth < breakpoint);

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < breakpoint);
    };

    window.addEventListener('resize', handleResize);
    handleResize();

    return () => window.removeEventListener('resize', handleResize);
  }, [breakpoint]);

  return isMobile;
};

export default useIsMobile;


--- Dashboard/DayList/Hooks/usePagination.js ---
// usePagination.js

import { useMemo } from 'react';

const usePagination = (data, currentPage, itemsPerPage) => {
  const totalPages = Math.ceil(data.length / itemsPerPage);

  const currentData = useMemo(() => {
    const indexOfLastItem = currentPage * itemsPerPage;
    const indexOfFirstItem = indexOfLastItem - itemsPerPage;
    return data.slice(indexOfFirstItem, indexOfLastItem);
  }, [data, currentPage, itemsPerPage]);

  return { currentData, totalPages };
};

export default usePagination;


--- Dashboard/DayList/Hooks/useReservationsList.js ---
// src/Components/ReservationsList/Hooks/useReservationsList.js

import { useState, useEffect } from 'react';
import useApi from '../../../../Hooks/useApi';

const useReservationsList = () => {
  const [reservationsData, setReservationsData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const api = useApi();

  useEffect(() => {
    const fetchReservations = async () => {
      try {
        const data = await api.get(window.baseDomain + 'api/auth-reservations', { noCache: true });

        console.log('Raw data from backend:', data);

        // Map backend data to the expected frontend format
        const mappedReservations = data.map((reservation) => {
          // Map backend data to frontend expected format
          const mappedReservation = {
            id: reservation._id, // Ensure this is a string
            aantalGasten: reservation.guests,
            tijdstip: reservation.time,
            date: reservation.date,
            firstName: reservation.firstName,
            lastName: reservation.lastName,
            email: reservation.email,
            phone: reservation.phone,
            menu: reservation.menu,
            zitplaats: reservation.zitplaats,
            personeel: reservation.personeel,
            extra: reservation.extraInfo && reservation.extraInfo.trim() !== '' ? reservation.extraInfo : null,
            createdAt: reservation.createdAt,
          };
          return mappedReservation;
        });

        setReservationsData(mappedReservations);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching reservations:', error);
        setError(error);
        setLoading(false);
      }
    };

    fetchReservations();
  }, [api]);

  return { reservationsData, loading, error };
};

export default useReservationsList;


--- Dashboard/DayList/Hooks/useSortedReservation.js ---
// useSortedReservations.js

import { useMemo } from 'react';

const useSortedReservations = (reservationsData, sortConfig) => {
  return useMemo(() => {
    const sortedData = [...reservationsData];
    if (sortConfig.key && sortConfig.direction) {
      sortedData.sort((a, b) => {
        if (sortConfig.key === 'aantalGasten') {
          return sortConfig.direction === 'asc'
            ? a.aantalGasten - b.aantalGasten
            : b.aantalGasten - a.aantalGasten;
        } else if (sortConfig.key === 'tijdstip') {
          const timeA = a.tijdstip.split(':').map(Number);
          const timeB = b.tijdstip.split(':').map(Number);
          const dateA = new Date();
          dateA.setHours(timeA[0], timeA[1], 0, 0);
          const dateB = new Date();
          dateB.setHours(timeB[0], timeB[1], 0, 0);
          return sortConfig.direction === 'asc'
            ? dateA - dateB
            : dateB - dateA;
        }
        return 0;
      });
    }
    return sortedData;
  }, [reservationsData, sortConfig]);
};

export default useSortedReservations;


--- Dashboard/DayList/Pagination.js ---
// src/components/ReservationsList/Pagination.jsx

import React from 'react';
import './css/pagination.css';

const Pagination = ({
  totalPages,
  currentPage,
  handlePageClick,
}) => {
  const pageNumbers = [];
  for (let i = 1; i <= totalPages; i++) {
    pageNumbers.push(i);
  }

  return (
    <div className="pagination">
      <span className="page-numbers">
        {pageNumbers.map((number) => (
          <button
            key={number}
            className={`page-number ${currentPage === number ? 'active' : ''}`}
            onClick={() => handlePageClick(number)}
          >
            {number}
          </button>
        ))}
      </span>
    </div>
  );
};

export default Pagination;


--- Dashboard/DayList/ReservationRow/NameColumn.js ---
// NameColumn.js

import React from 'react';
import { FaCircle } from 'react-icons/fa';
import './css/nameColumn.css';

const NameColumn = ({ isNewReservationHere, firstName, lastName }) => {
  return (
    <div className="name-column">
      {isNewReservationHere && (
        <FaCircle className="new-user-icon" title="Nieuwe reservering" />
      )}
      <a
        href="#"
        className={`name-link ${isNewReservationHere ? 'new-reservation' : ''}`}
      >
        {`${firstName} ${lastName}`}
      </a>
    </div>
  );
};

export default NameColumn;


--- Dashboard/DayList/ReservationRow/ReservationNumber.js ---
// ReservationNumber.js

import React from 'react';
import { FaBolt } from 'react-icons/fa';
import './css/reservationNumber.css';

const ReservationNumber = ({ aantalGasten }) => {
  return (
    <div className="reservation-number">
      
      {aantalGasten >= 5 && aantalGasten < 7 && (
        <FaBolt className="users-icon-gray" />
      )}
      {aantalGasten >= 7 && <FaBolt className="users-icon" />}
      <span>{aantalGasten}</span>
    </div>
  );
};

export default ReservationNumber;


--- Dashboard/DayList/ReservationRow/TooltipView.js ---
// src/Components/ReservationsList/Tooltip.jsx

import React, { useEffect, useRef, useState } from 'react';
import {
  FaEllipsisV,
  FaPencilAlt,
  FaTrashAlt,
  FaStickyNote,
  FaBirthdayCake,
} from 'react-icons/fa';
import './css/tooltip.css';
import ConfirmationModal from '../../../../Components/Structural/Modal/Delete';
import useApi from '../../../../Hooks/useApi';

const Tooltip = ({
  reservationId,
  extraInfo,
  isTooltipOpen,
  onTooltipToggle,
  onTooltipClose,
  onDeleteSuccess,
  triggerNotification,
}) => {
  const tooltipTimerRef = useRef(null);
  const tooltipRef = useRef(null);
  const [isIconHovered, setIsIconHovered] = useState(false);
  const [isParentHovered, setIsParentHovered] = useState(false);
  const [isEllipsisHovered, setIsEllipsisHovered] = useState(false);
  const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [deleteError, setDeleteError] = useState(null);

  const api = useApi();

  const handleEllipsisClick = () => {
    onTooltipToggle(reservationId);
  };

  const handleExtraIconMouseEnter = () => {
    setIsIconHovered(true);
  };

  const handleExtraIconMouseLeave = () => {
    setIsIconHovered(false);
  };

  useEffect(() => {
    if (isTooltipOpen) {
      if (tooltipTimerRef.current) {
        clearTimeout(tooltipTimerRef.current);
      }
      tooltipTimerRef.current = setTimeout(() => {
        onTooltipClose();
      }, 2500);
    } else {
      if (tooltipTimerRef.current) {
        clearTimeout(tooltipTimerRef.current);
        tooltipTimerRef.current = null;
      }
    }

    return () => {
      if (tooltipTimerRef.current) {
        clearTimeout(tooltipTimerRef.current);
      }
    };
  }, [isTooltipOpen, onTooltipClose]);

  useEffect(() => {
    const currentTooltip = tooltipRef.current;
    if (!currentTooltip) return;

    const parentElement = currentTooltip.parentElement;
    if (!parentElement) return;

    const handleParentMouseEnter = () => {
      setIsParentHovered(true);
    };

    const handleParentMouseLeave = () => {
      setIsParentHovered(false);
    };

    parentElement.addEventListener('mouseenter', handleParentMouseEnter);
    parentElement.addEventListener('mouseleave', handleParentMouseLeave);

    return () => {
      parentElement.removeEventListener('mouseenter', handleParentMouseEnter);
      parentElement.removeEventListener('mouseleave', handleParentMouseLeave);
    };
  }, []);

  const shouldShowExtraIcon = extraInfo && extraInfo.trim() !== '';

  const isExtraTooltipOpen =
    (isIconHovered || isParentHovered) &&
    !isTooltipOpen &&
    !isEllipsisHovered;

  const birthdayWords = [
    'birthday',
    'anniversary',
    'anniversaire',
    'geburtstag',
    'jahrestag',
    'jarig',
    'jarige',
    'verjaardag',
    'verjaardagsfeest',
    'jubileum',
    'cumpleaños',
    'aniversario',
  ];

  let iconToUse = FaStickyNote;

  if (shouldShowExtraIcon) {
    const extraInfoLower = extraInfo.toLowerCase();
    const containsBirthdayWord = birthdayWords.some((word) =>
      extraInfoLower.includes(word)
    );

    if (containsBirthdayWord) {
      iconToUse = FaBirthdayCake;
    }
  }

  const editUrl = `https://view.reservaties.net/?action=edit&reservationId=${encodeURIComponent(
    reservationId
  )}&admin=true` + "&restaurantId=" + localStorage.getItem('username');

  const handleDeleteClick = (e) => {
    e.preventDefault();
    setDeleteError(null);
    setIsDeleteModalVisible(true);
  };

  // Handler for confirming deletion
  const handleConfirmDelete = async () => {
    setIsDeleteModalVisible(false);
    setIsDeleting(true);
    setDeleteError(null);

    try {
      await api.delete(`${window.baseDomain}api/auth-reservations/${reservationId}`);
      if (onDeleteSuccess) {
        onDeleteSuccess(reservationId); // Invoke the handler passed from ReservationRow
      }
      console.log(`Reservation ${reservationId} has been deleted.`);
    } catch (error) {
      console.error('Error deleting reservation:', error);
      setDeleteError(
        error.response?.data?.error || error.message || 'Failed to delete the reservation.'
      );
      if (triggerNotification) {
        triggerNotification('Fout bij het verwijderen van de reservatie.', 'error');
      }
    } finally {
      setIsDeleting(false);
    }
  };

  // Handler for canceling deletion
  const handleCancelDelete = () => {
    setIsDeleteModalVisible(false);
  };

  return (
    <div className="extra-column" ref={tooltipRef}>
      <div className="icons-container">
        {shouldShowExtraIcon && (
          <div
            className="extra-icon-container"
            onMouseEnter={handleExtraIconMouseEnter}
            onMouseLeave={handleExtraIconMouseLeave}
          >
            {React.createElement(iconToUse, { className: 'extra-icon' })}
            {isExtraTooltipOpen && (
              <div className="extra-tooltip">{extraInfo}</div>
            )}
          </div>
        )}
        <div
          className="ellipsis-container"
          onMouseEnter={() => setIsEllipsisHovered(true)}
          onMouseLeave={() => setIsEllipsisHovered(false)}
        >
          <FaEllipsisV className="ellipsis-icon" onClick={handleEllipsisClick} />
          {isTooltipOpen && (
            <div className="tooltip-container">
              <a
                href={editUrl}
                target="_blank"
                rel="noopener noreferrer"
                className="tooltip-item no-style"
              >
                <FaPencilAlt className="tooltip-icon" />
                Bewerken
              </a>
              <div className="tooltip-separator"></div>
              <a
                href="#"
                onClick={handleDeleteClick}
                className="tooltip-item delete-item no-style"
              >
                <FaTrashAlt className="tooltip-icon" />
                Verwijderen
              </a>
            </div>
          )}
        </div>
      </div>

      <ConfirmationModal
        isVisible={isDeleteModalVisible}
        title="Reservatie Verwijderen"
        message="Wilt u deze reservatie verwijderen?"
        onConfirm={handleConfirmDelete}
        onCancel={handleCancelDelete}
        confirmText="Verwijderen"
        cancelText="Annuleren"
        confirmButtonClass="discard-button red"
        cancelButtonClass="cancel-button"
        isLoading={isDeleting}
        errorMessage={deleteError}
      />
    </div>
  );
};

export default Tooltip;


--- Dashboard/DayList/ReservationRow/css/mobile.css ---
@media (max-width: 900px) {
	.reservations-page .edit-button,
	.reservations-page .delete-button {
	  width: 100%;
	  justify-content: center;
	}
  }

--- Dashboard/DayList/ReservationRow/css/nameColumn.css ---
/* nameColumn.css */

.reservations-page .name-column {
	display: flex;
	align-items: center;
  }
  
  .reservations-page .new-user-icon {
	color: var(--color-blue);
	margin-right: 5px;
	vertical-align: middle;
	font-size: 10px;
  }
  
  .reservations-page .name-link {
	color: var(--color-blue);
	text-decoration: none;
  }
  
  .reservations-page .name-link:hover {
	text-decoration: underline;
  }

  .reservations-page .new-reservation {
	font-weight: bold;
  }
  
  

--- Dashboard/DayList/ReservationRow/css/reservationNumber.css ---
/* reservationNumber.css */

.reservations-page .reservation-number {
	width: 50px;
	display: flex;
	align-items: center;
	justify-content: flex-end;
  }
  
  .reservations-page .users-icon {
	color: var(--color-blue);
	margin-right: 3px;
  }
  
  .reservations-page .users-icon-gray {
	color: gray;
	margin-right: 3px;
  }
  
  @media (max-width: 900px) {
	.reservations-page .reservation-number {
		justify-content: flex-start;
		margin-left: -1px;
	  }
  }

--- Dashboard/DayList/ReservationRow/css/reservationRow.css ---
/* reservationRow.css */

.reservations-page .reservation-row {
	display: contents;
  }
  
  .reservations-page .reservation-row > div {
	padding: 10px;
	padding-top: 0px;
	padding-bottom: 7px;
	border-bottom: 1px solid lightgray;
  }
  
  .reservations-page .reservation-row-mobile {
	border: 1px solid #ccc;
	padding: 10px;
	margin-bottom: 10px;
	border-radius: 8px;
  }
  
  .reservations-page .reservation-item {
	margin-bottom: 10px;
  }
  
  .reservations-page .reservation-item .label {
	font-weight: bold;
	margin-bottom: 5px;
  }
  
  .reservations-page .buttons-container {
	display: flex;
	justify-content: flex-start;
	gap: 10px;
  }
  
  .reservations-page .edit-button,
  .reservations-page .delete-button {
	display: flex;
	align-items: center;
	padding: 8px 16px;
	border: none;
	border-radius: 5px;
	background-color: var(--color-bg);
	color: #777;
	cursor: pointer;
	font-size: 14px;
	height: 45px;
	margin-top: 15px;
	transition: background-color 0.3s ease;
  }
  
  .reservations-page .delete-button {
	background-color: var(--color-blue);
	color: white;
  }
  
  .reservations-page .button-icon {
	margin-right: 8px;
	display: flex;
	align-items: center;
	font-size: 14px;
  }
  
  .reservations-page .reservation-row-mobile {
	color: #292929;
	font-size: 15px;
  }
  
  .reservations-page .reservation-row-desktop {
	font-size: 14px;
  }
  
  .reservations-page .actions-cell {
	display: flex;
	align-items: center;
	gap: 10px;
  }
  

--- Dashboard/DayList/ReservationRow/css/tooltip.css ---
/* tooltip.css */

.reservations-page .extra-column {
	display: flex;
	justify-content: flex-end;
	align-items: center;
	position: relative;
  }
  
  .reservations-page .icons-container {
	display: flex;
	align-items: center;
  }
  
  .reservations-page .ellipsis-container,
  .reservations-page .extra-icon-container {
	position: relative;
	margin-left: 8px; /* Adds space between icons */
  }
  
  .reservations-page .ellipsis-icon,
  .reservations-page .extra-icon {
	color: #a6a6a6; /* Same color for both icons */
	cursor: pointer;
	font-size: 16px; /* Adjust size as needed */
  }
  
  /* Tooltip for Actions (Bewerken & Verwijderen) */
  .reservations-page .tooltip-container {
	position: absolute;
	bottom: 100%;
	right: 0;
	transform: translateY(-10px);
	background-color: white;
	border: 1px solid lightgray;
	border-radius: 5px;
	padding: 5px 0;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
	z-index: 1000;
  }
  
  .reservations-page .tooltip-item {
	display: flex;
	align-items: center;
	padding: 8px 15px;
	cursor: pointer;
  }
  
  .reservations-page .tooltip-item:hover {
	background-color: #f0f0f0;
  }
  
  .reservations-page .tooltip-icon {
	margin-right: 8px;
  }
  
  .reservations-page .tooltip-item.delete-item {
	color: red;
  }
  
  .reservations-page .tooltip-item.delete-item .tooltip-icon {
	color: red;
  }
  
  .reservations-page .tooltip-separator {
	height: 1px;
	background-color: lightgray;
	margin: 5px 0;
  }
  
  /* Tooltip for Extra Info */
  .reservations-page .extra-tooltip {
	position: absolute;
	bottom: 100%;
	left: 50%;
	transform: translateX(-50%) translateY(-10px);
	background-color: #333;
	color: #fff;
	padding: 6px 10px;
	border-radius: 4px;
	white-space: nowrap;
	font-size: 12px;
	z-index: 1000;
	opacity: 0.9;
	max-width: 200px !important;
	text-wrap: wrap;
  }
  
  .reservations-page .extra-tooltip::after {
	content: '';
	position: absolute;
	top: 100%; /* At the bottom of the tooltip */
	left: 50%;
	transform: translateX(-50%);
	border-width: 5px;
	border-style: solid;
	border-color: #333 transparent transparent transparent; /* Arrow pointing down */
  }
  

  /* Attention */
  /* Don't add a prefix class here */
  a.no-style { 
    text-decoration: none;
    color: inherit;
    background: none;
    border: none;
    padding: 0;
    margin: 0;
    display: block;
    cursor: default;
    font: inherit;
}


.reservations-page .extra-info-print {
	display: none !important;
  }

--- Dashboard/DayList/ReservationRow/index.js ---
// ReservationRow.js

import React, { useEffect, useState } from 'react';
import ReservationNumber from './ReservationNumber.js';
import NameColumn from './NameColumn.js';
import Tooltip from './TooltipView.js'; // Import Tooltip component
import ConfirmationModal from '../../../../Components/Structural/Modal/Delete';
import { FaPencilAlt, FaTrashAlt } from 'react-icons/fa';
import './css/reservationRow.css';
import './css/mobile.css';
import useApi from '../../../../Hooks/useApi';

const FIELD_CONFIG = [
  { key: 'aantalGasten', label: '#', alwaysVisible: true },
  { key: 'tijdstip', label: 'Uur', alwaysVisible: true },
  { key: 'fullName', label: 'Naam', defaultVisible: true },
  { key: 'email', label: 'Email', defaultVisible: true },
  { key: 'phone', label: 'Telefoon', defaultVisible: true },
  { key: 'menu', label: 'Menu', defaultVisible: false },
  // Removed 'extra' and 'actions' fields
];

const ReservationRow = ({
  reservation,
  visibleFields,
  isMobile,
  isTooltipOpen,
  onTooltipToggle,
  onTooltipClose,
  triggerNotification,
}) => {
  const seenKey = `seen-data-${reservation.id}`;
  const expiryTimeString = localStorage.getItem(seenKey);

  const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [deleteError, setDeleteError] = useState(null);
  const [isVisible, setIsVisible] = useState(true); // New state for visibility

  const api = useApi();

  function getCurrentTimeInCEST() {
    const now = new Date();
    const nowInCESTString = now.toLocaleString('en-US', {
      timeZone: 'Europe/Berlin',
    });
    return new Date(nowInCESTString);
  }

  let isNewReservationHere = false;

  if (expiryTimeString) {
    const expiryTime = new Date(expiryTimeString);
    const nowInCEST = getCurrentTimeInCEST();
    isNewReservationHere = nowInCEST < expiryTime;
  } else {
    isNewReservationHere = true;
  }

  useEffect(() => {
    if (!expiryTimeString) {
      const nowInCEST = getCurrentTimeInCEST();
      const expiryTime = new Date(nowInCEST.getTime() + 60 * 60 * 1000); // 60 minutes from now
      localStorage.setItem(seenKey, expiryTime.toISOString());
    }
  }, [expiryTimeString, seenKey]);

  // Internal handler for deletion success
  const handleDeleteSuccess = (deletedReservationId) => {
    if (deletedReservationId === reservation.id) {
      setIsVisible(false); // Hide the row
      // Trigger a success notification
      triggerNotification('Reservatie verwijderd', 'success');
    }
    // If you need to notify a parent component, you can add that logic here
  };

  if (!isVisible) {
    return null; // Do not render the row if it's not visible
  }

  const renderField = (reservation, fieldKey) => {
    switch (fieldKey) {
      case 'aantalGasten':
        return <ReservationNumber aantalGasten={reservation.aantalGasten} />;
      case 'tijdstip':
        return reservation.tijdstip;
      case 'fullName':
        return (
          <NameColumn
            isNewReservationHere={isNewReservationHere}
            firstName={reservation.firstName}
            lastName={reservation.lastName}
          />
        );
      case 'email':
        return reservation.email;
      case 'phone':
        return reservation.phone;
      case 'language':
        return reservation.language;
      case 'menu':
        return reservation.menu;
      case 'createdAt':
        return new Date(reservation.createdAt).toLocaleString();
      default:
        return reservation[fieldKey];
    }
  };

  return (
    <>
      {isMobile ? (
        <div className="reservation-row-mobile">
          {visibleFields.map((fieldKey) => (
            <div key={fieldKey} className="reservation-item">
              <div className="label">{FIELD_CONFIG.find((field) => field.key === fieldKey).label}</div>
              <div>{renderField(reservation, fieldKey)}</div>
            </div>
          ))}
          {/* Always render the Tooltip in mobile view */}
          <div className="reservation-item">
            <div className="label">Extra Informatie</div>
            <div>{reservation.extra || 'Geen extra info'}</div>
          </div>
          <div className="reservation-item buttons-container">
            <button className="edit-button" onClick={() => window.open(`https://view.reservaties.net/?action=edit&reservationId=${encodeURIComponent(reservation.id)}&admin=true` + "&restaurantId=" + localStorage.getItem('username'), '_blank')}>
              <FaPencilAlt className="button-icon" />
              Bewerk
            </button>
            <button className="delete-button" onClick={() => setIsDeleteModalVisible(true)}>
              <FaTrashAlt className="button-icon" />
              Verwijderen
            </button>
          </div>

          <ConfirmationModal
            isVisible={isDeleteModalVisible}
            title="Reservatie Verwijderen"
            message="Wilt u deze reservatie verwijderen?"
            onConfirm={async () => {
              setIsDeleteModalVisible(false);
              setIsDeleting(true);
              setDeleteError(null);

              try {
                await api.delete(`${window.baseDomain}api/auth-reservations/${reservation.id}`);
                handleDeleteSuccess(reservation.id);
              } catch (error) {
                console.error('Error deleting reservation:', error);
                setDeleteError(
                  error.response?.data?.error || error.message || 'Failed to delete the reservation.'
                );
                triggerNotification('Fout bij het verwijderen van de reservatie.', 'error');
              } finally {
                setIsDeleting(false);
              }
            }}
            onCancel={() => setIsDeleteModalVisible(false)}
            confirmText="Verwijderen"
            cancelText="Annuleren"
            confirmButtonClass="discard-button red"
            cancelButtonClass="cancel-button"
            isLoading={isDeleting}
            errorMessage={deleteError}
          />
        </div>
      ) : (
        <div className="reservation-row reservation-row-desktop">
          {visibleFields.map((fieldKey) => (
            <div key={fieldKey}>{renderField(reservation, fieldKey)}</div>
          ))}

          <Tooltip
            reservationId={reservation.id}
            extraInfo={reservation.extra}
            isTooltipOpen={isTooltipOpen}
            onTooltipToggle={onTooltipToggle}
            onTooltipClose={onTooltipClose}
            onDeleteSuccess={handleDeleteSuccess}
            triggerNotification={triggerNotification}
          />
        </div>
      )}
    </>
  );
};

export default ReservationRow;


--- Dashboard/DayList/SearchFilters/SearchBar.js ---
// SearchBar.js

import React from 'react';
import './css/searchBar.css'

const SearchBar = ({ value, onChange, placeholder, className }) => {
  return (
    <input
      type="text"
      placeholder={placeholder}
      value={value}
      onChange={onChange}
      className={className}
    />
  );
};

export default SearchBar;


--- Dashboard/DayList/SearchFilters/css/searchBar.css ---
/* reservationList.css */

/* Existing Styles */
.reservations-page .search-bars-container {
	display: flex;
	justify-content: space-between;
	margin-bottom: 20px;
	margin-top: 25px;
	background-color: var(--color-bg) !important;
  }
  
  .reservations-page .search-bar {
	flex: 1;
	margin: 0 10px;
	font-size: 15px;
	height: 40px;
	padding: 0 10px;
	border: 1px solid #ccc;
	border-radius: 5px;
	background-color: var(--color-bg) !important;
  }
  
  /* Responsive Styles for Mobile Devices */
  @media (max-width: 900px) {
	.reservations-page .search-bars-container {
	  flex-direction: column; /* Stack search bars vertically */
	  align-items: stretch;    /* Ensure search bars take full width */
	  margin-top: 15px;        /* Adjust top margin if needed */
	  margin-bottom: 15px;     /* Adjust bottom margin if needed */
	}
  
	.reservations-page .search-bar {
	  margin: 10px 0;  /* Add vertical spacing between search bars */
	  width: 100%;     /* Ensure search bars take full width */
	  padding: 10px !important;
	  margin: 5px;
	  background-color: white !important;
	}
  }
  

--- Dashboard/DayList/SearchFilters/index.js ---
// SearchFilters.js

import React from 'react';
import SearchBar from './SearchBar';

const SearchFilters = ({
  nameSearch,
  setNameSearch,
  guestsSearch,
  setGuestsSearch,
  timeSearch,
  setTimeSearch,
}) => {
  return (
    <div className="search-bars-container">
      <SearchBar
        placeholder="Zoeken op naam"
        value={nameSearch}
        onChange={(e) => setNameSearch(e.target.value)}
        className="search-bar"
      />
      <SearchBar
        placeholder="Zoeken op gasten..."
        value={guestsSearch}
        onChange={(e) => setGuestsSearch(e.target.value)}
        className="search-bar"
      />
      <SearchBar
        placeholder="Zoeken op uur"
        value={timeSearch}
        onChange={(e) => setTimeSearch(e.target.value)}
        className="search-bar"
      />
    </div>
  );
};

export default SearchFilters;


--- Dashboard/DayList/Utils/constants.js ---
// constants.js

export const shifts = {
	Ochtend: { start: '04:00', end: '11:00' },
	Middag: { start: '11:00', end: '16:00' },
	Avond: { start: '16:00', end: '23:00' },
	'Dag': { start: '00:00', end: '23:59' },
  };
  

--- Dashboard/DayList/Utils/localStorageUtils.js ---
// src/Utils/localStorageUtils.js

export const loadFromLocalStorage = (key, defaultValue) => {
	try {
	  const serializedState = localStorage.getItem(key);
	  if (serializedState === null) {
		return defaultValue;
	  }
	  return JSON.parse(serializedState);
	} catch (error) {
	  console.error(`Error loading ${key} from localStorage`, error);
	  return defaultValue;
	}
  };
  
  export const saveToLocalStorage = (key, value) => {
	try {
	  const serializedState = JSON.stringify(value);
	  localStorage.setItem(key, serializedState);
	} catch (error) {
	  console.error(`Error saving ${key} to localStorage`, error);
	}
  };
  

--- Dashboard/DayList/Utils/sortUtils.js ---
// sortUtils.js

export const getNewSortConfig = (currentConfig, key) => {
	let direction = 'asc';
  
	if (currentConfig.key === key && currentConfig.direction === 'asc') {
	  direction = 'desc';
	} else if (currentConfig.key === key && currentConfig.direction === 'desc') {
	  // Reset sort
	  return { key: null, direction: null };
	}
  
	return { key, direction };
  };
  

--- Dashboard/DayList/css/fieldFilterModal.css ---
/* fieldFilterModal.css */

.field-filter-modal {
	padding: 20px;
  }
  
  .field-filter-modal h2 {
	margin-bottom: 20px;
  }
  
  .field-filter-modal .field-options {
	display: grid;
	grid-template-columns: 50% 50%;
	gap: 10px;
  }
  
  .field-filter-modal .field-option {
	display: flex;
	align-items: center;
  }
  
  .field-filter-modal .field-option input {
	margin-right: 10px;
  }
  
  .field-filter-modal .modal-buttons {
	margin-top: 20px;
	display: flex;
	justify-content: flex-end;
  }
  
  .field-filter-modal .confirm-button {
	background-color: var(--color-blue);
	color: white;
	border: none;
	padding: 10px 20px;
	border-radius: 5px;
	cursor: pointer;
  }
  

--- Dashboard/DayList/css/pagination.css ---
/* src/components/ReservationsList/css/pagination.css */

.reservations-page .pagination {
	display: flex;
	justify-content: center;
	align-items: center;
	margin-top: 30px;
  }
  
  .reservations-page .pagination button {
	background: none;
	border: none;
	color: var(--color-blue);
	font-size: 16px;
	cursor: pointer;
	margin: 0 10px;
  }
  
  .reservations-page .pagination button:disabled {
	opacity: 0.5;
	cursor: not-allowed;
  }
  
  .reservations-page .pagination .page-number.active {
	font-weight: bold;
  }

  .reservations-page .pagination .page-number:hover {
	text-decoration: underline;
  }
  
  .reservations-page .pagination button:hover {
	text-decoration: underline;
  }
  

--- Dashboard/DayList/css/print.css ---
/* reservationList.css or print.css */

@media print {
	/* Hide all elements */
	body * {
	  visibility: hidden;
	}
  
	/* Make .reservations-container and its children visible */
	.reservations-container,
	.reservations-container * {
	  visibility: visible;
	}
  
	/* Make .selected-date and its children visible */
	.selected-date,
	.selected-date * {
	  visibility: visible;
	}
  
	/* Position the .reservations-container and .selected-date */
	.reservations-container {
	  position: absolute;
	  left: 0;
	  margin-top: -120px;
	  top: -120px;
	  width: 100%;
	}
  
	.selected-date {
	  position: absolute;
	  left: 0;
	  margin-top: -120px;
	  top: -160px;
	  width: 100%;
	  margin-bottom: 20px;
	  font-size: 18pt;
	  text-align: center;
	}
  
	/* Hide interactive elements within reservations container */
	.selected-date .print-icon {
	  opacity: 0;
	  display: none;
	  visibility: hidden;
	  width: 0;
	  height: 0;
	}
  
	/* Optional: Enhance print layout */
	.reservations-container {
	  font-size: 12pt;
	  margin: 20px;
	}
  
	.reservations-container table {
	  width: 100%;
	  border-collapse: collapse;
	}
  
	.reservations-container th,
	.reservations-container td {
	  border: 1px solid #000;
	  padding: 8px;
	  text-align: left;
	}
  
	/* Control page breaks */
	.reservations-container {
	  page-break-after: always;
	}
  
	.reservations-container .reservation-row {
	  page-break-inside: avoid;
	}

	.reservations-page .new-reservation {
	  font-weight: normal;
	}

	.reservations-container .pagination {
		display: none;
	}

	.reservations-container .name-link {
		color: black
	}
  
	.reservations-page .icons-container,
	.reservations-page .ellipsis-container,
	.reservations-page .extra-icon-container,
	.reservations-page .tooltip-container,
	.reservations-page .extra-tooltip {
	  display: none !important;
	}
  
	/* Show Extra Info as Full Row */
	.reservations-page .extra-info-print {
	  display: block !important;
	}
  
	/* Ensure full width */
	.reservations-page .extra-info-print {
	  width: 100%;
	  box-sizing: border-box;
	}
  
	/* Ensure .new-reservation is not bold */
	.reservations-page .new-reservation {
	  font-weight: normal !important;
	}

	.reservations-container .buttons-container {
		display: none !important;
	}
  }

--- Dashboard/DayList/css/reservationList.css ---
/* reservationList.css */
.reservations-page .reservations-grid {
	display: grid;
	gap: 10px;
  }
  
  .reservations-page .reservations-grid.mobile-grid {
	display: flex;
	flex-direction: column;
  }
  
  .reservations-page .reservations-header {
	display: contents;
  }
  
  .reservations-page .reservations-header > div {
	padding: 10px;
	font-weight: bold;
	color: #474747;
  }
  
  .reservations-page .reservations-header > div.header-number {
	width: 50px;
  }
  
  .reservations-page .reservation-row > div.reservation-number {
	width: 50px;
  }
  
  .reservations-page .header-number,
  .reservations-page .reservation-number {
	display: flex;
	align-items: center;
  }
  
  .reservations-page {
	position: relative;
	padding: 0;
  }
  
  .reservations-page .header-cell {
	display: flex;
	align-items: center;
	position: relative;
  }
  
  .reservations-page .sort-icon {
	margin-left: 5px;
	display: none;
  }
  
  .reservations-page .reservations-header:hover .sort-icon {
	display: inline-block;
  }
  
  .reservations-page .sort-icon svg {
	width: 12px;
	height: 12px;
	color: #555;
  }
  
  /* Updated styles for Version 1 */
  .reservations-page .reservations-grid {
	display: grid;
	gap: 10px;
  }
  
  .reservations-page .no-reservations-row {
	display: flex;
	justify-content: center;
	align-items: center;
	padding: 20px;
	font-size: 0.9em;
	color: #555;
	grid-column: 1 / -1; /* Span all columns */
	height: 100%;        /* Ensure it takes full height */
  }
  
  .reservations-page .no-reservations-desktop,
  .reservations-page .no-reservations-mobile {
	display: flex;
	justify-content: center;
	align-items: center;
  }
  
  
  .reservations-page .buttons-container {
	display: flex;
	margin-top: 20px;
	padding-bottom: 40px;
  }
  
  .reservations-page .filter-button,
  .reservations-page .print-button {
	flex: 1;
	background-color: #f0f0f0;
	color: #000;
	border: none;
	padding: 10px;
	border-radius: 5px;
	display: flex;
	align-items: center;
	justify-content: center;
	cursor: pointer;
	font-size: 16px;
  }
  
  .reservations-page .filter-button .button-icon,
  .reservations-page .print-button .button-icon {
	margin-right: 8px;
  }
  
  .reservations-page .field-selector-modal {
	padding: 20px;
  }
  
  .reservations-page .field-selector-modal h2 {
	margin-bottom: 20px;
  }
  
  .reservations-page .field-selector-modal .field-options {
	display: grid;
	grid-template-columns: 1fr 1fr;
	gap: 10px;
  }
  
  .reservations-page .field-selector-modal .field-option label {
	display: flex;
	align-items: center;
  }
  
  .reservations-page .field-selector-modal .field-option input[type="checkbox"] {
	margin-right: 8px;
  }
  
  .reservations-page .field-selector-modal button {
	margin-top: 20px;
	padding: 10px 20px;
	background-color: var(--color-blue);
	color: white;
	border: none;
	cursor: pointer;
	border-radius: 5px;
  }
  /* src/Components/ReservationsList/css/reservationList.css */

/* Existing styles ... */

/* New styles for the extra info row */
.reservations-page .extra-info-row {
	display: none; /* Hide by default */
  }
  
  .reservations-page .extra-info-row .extra-info-content {
	border-bottom: 1px solid #ccc;
  }
  
  @media print {
	/* Show the extra info row only when printing */
	.reservations-page .extra-info-row {
	  display: block;
	  grid-column: 1 / -1; /* Span all columns */
	  
	}
  
	/* Optional: Adjust grid layout for printing */
	.reservations-page .reservations-grid {
	  grid-template-columns: 60px 70px repeat(auto-fill, minmax(100px, 1fr));
	}
  
	/* Hide elements that are not needed in print */
	.reservations-page .filter-button,
	.reservations-page .print-button,
	.reservations-page .pagination,
	.reservations-page .header-cell.sortable {
	  display: none;
	}
  
	/* Ensure the extra info content is styled appropriately */
	.reservations-page .extra-info-content {
	  font-size: 0.9em;
	  color: #333;
	}

	.reservations-page .reservation-row > div {
		border-bottom: 1px solid #ccc;
	  }

	  .reservations-page .new-user-icon {
		display: none;
	  }

	  .reservations-page .users-icon-gray {
		display: none;
	  }
  }
  

--- Dashboard/DayList/css/settingsTabs.css ---


.reservations-page .form-settings-page .tab-button {
  color: #777777;
}



--- Dashboard/DayList/index.js ---
// src/Components/ReservationsList/ReservationsList.js

import React, { useState, useContext, useMemo, useEffect } from 'react';
import { withHeader } from '../../../Components/Structural/Header/index.js';
import ReservationRow from './ReservationRow/index.js';
import Pagination from './Pagination.js';
import SearchFilters from './SearchFilters/index.js';
import { SearchContext } from '../../../Context/SearchContext.js';
import useIsMobile from './Hooks/useIsMobile.js';
import useFilteredReservations from './Hooks/useFilteredReservations.js';
import usePagination from './Hooks/usePagination.js';
import ShiftSelector from './Filters/ShiftSelector.js';
import DatePickerComponent from './Filters/DatePicker.js';
import useSortedReservations from './Hooks/useSortedReservation.js';
import { getNewSortConfig } from './Utils/sortUtils.js';
import { shifts } from './Utils/constants.js';
import { FaSortUp, FaSortDown, FaFilter, FaPrint } from 'react-icons/fa';
import './css/reservationList.css';
import './css/settingsTabs.css';

// Import the new useReservationsList hook
import useReservationsList from './Hooks/useReservationsList.js';
import useNotification from '../../../Components/Notification/index.js';
import ModalWithoutTabs from '../../../Components/Structural/Modal/Standard/index.js';

// Import localStorage utility functions
import { loadFromLocalStorage, saveToLocalStorage } from './Utils/localStorageUtils.js';

// Define a constant key for localStorage
const LOCAL_STORAGE_KEY = 'reservationsListVisibleFields';

// Define the FIELD_CONFIG outside the component to ensure consistency
const FIELD_CONFIG = [
  { key: 'aantalGasten', label: '#', alwaysVisible: true },
  { key: 'tijdstip', label: 'Uur', alwaysVisible: true },
  { key: 'zitplaats', label: 'Zitplaats', alwaysVisible: false },
  { key: 'fullName', label: 'Naam', defaultVisible: true },
  { key: 'email', label: 'Email', defaultVisible: true },
  { key: 'phone', label: 'Telefoon', defaultVisible: false },
  { key: 'personeel', label: 'Toewijzing', alwaysVisible: false },
  { key: 'menu', label: 'Menu', defaultVisible: false },
];

const ReservationsList = () => {
  const [currentPage, setCurrentPage] = useState(1);
  const [openTooltipId, setOpenTooltipId] = useState(null);
  const isMobile = useIsMobile();
  const [nameSearch, setNameSearch] = useState('');
  const [guestsSearch, setGuestsSearch] = useState('');
  const [timeSearch, setTimeSearch] = useState('');
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [isDatePickerOpen, setIsDatePickerOpen] = useState(false);
  const [isShiftOptionsOpen, setIsShiftOptionsOpen] = useState(false);
  const [selectedShift, setSelectedShift] = useState('');
  const { searchQuery } = useContext(SearchContext);
  const [itemsPerPage, setItemsPerPage] = useState(11);
  const [sortConfig, setSortConfig] = useState({ key: null, direction: null });
  const [isReadyToPrint, setIsReadyToPrint] = useState(false);
  const [isPrinting, setIsPrinting] = useState(false); // New state for tracking print status

  // Use the new hook to fetch reservations data
  const { reservationsData, loading, error } = useReservationsList();

  // Initialize the useNotification hook
  const { triggerNotification, NotificationComponent } = useNotification();

  // Filter, sort, and paginate the reservations data
  const filteredReservationsData = useFilteredReservations(reservationsData, {
    searchQuery,
    nameSearch,
    guestsSearch,
    timeSearch,
    selectedDate,
    selectedShift,
  });

  const sortedReservationsData = useSortedReservations(filteredReservationsData, sortConfig);

  // Calculate the total number of guests for the selected date
  const totalGuests = useMemo(() => {
    return sortedReservationsData.reduce((total, reservation) => {
      const guests = Number(reservation.aantalGasten);
      return total + (isNaN(guests) ? 0 : guests);
    }, 0);
  }, [sortedReservationsData]);

  const { currentData: currentReservations, totalPages } = usePagination(
    sortedReservationsData,
    currentPage,
    itemsPerPage
  );

  const handlePageClick = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const handleTooltipToggle = (id) => {
    if (openTooltipId === id) {
      setOpenTooltipId(null);
    } else {
      setOpenTooltipId(id);
    }
  };

  const handleTooltipClose = () => {
    setOpenTooltipId(null);
  };

  const handleDateChange = (date) => {
    setSelectedDate(date);
    setIsDatePickerOpen(false);
    setCurrentPage(1);
  };

  const handleSort = (key) => {
    const newSortConfig = getNewSortConfig(sortConfig, key);
    setSortConfig(newSortConfig);
  };

  // Initialize visibleFields from localStorage or use default
  const defaultVisibleFields = FIELD_CONFIG.filter(
    (field) => field.defaultVisible || field.alwaysVisible
  ).map((field) => field.key);

  const [visibleFields, setVisibleFields] = useState(() =>
    loadFromLocalStorage(LOCAL_STORAGE_KEY, defaultVisibleFields)
  );

  // Persist visibleFields to localStorage whenever it changes
  useEffect(() => {
    saveToLocalStorage(LOCAL_STORAGE_KEY, visibleFields);
  }, [visibleFields]);

  const [isFieldSelectorModalOpen, setIsFieldSelectorModalOpen] = useState(false);

  const handleFilterClick = () => {
    setIsFieldSelectorModalOpen(true);
  };

  const handlePrintClick = () => {
    setItemsPerPage(100000); // Increase items per page for printing
    setIsReadyToPrint(true); // Mark ready to wait for data to load
    setIsPrinting(true);
  };

  useEffect(() => {
    if (isReadyToPrint) {
      // Check if data is loaded and then trigger print
      if (!loading && reservationsData.length > 0) {
        window.print();
        setItemsPerPage(11); // Reset items per page
        setIsReadyToPrint(false); // Reset the print state
        setIsPrinting(false); // Reset the printing state
      }
    }
  }, [isReadyToPrint, loading, reservationsData]);

  const FieldSelectorModal = ({ visibleFields, setVisibleFields, onClose }) => {
    const [selectedFields, setSelectedFields] = useState(visibleFields);

    const handleCheckboxChange = (fieldKey) => {
      if (selectedFields.includes(fieldKey)) {
        setSelectedFields(selectedFields.filter((key) => key !== fieldKey));
      } else {
        setSelectedFields([...selectedFields, fieldKey]);
      }
    };

    const handleApply = () => {
      setVisibleFields(selectedFields);
      onClose();
      triggerNotification('Velden bijgewerkt', 'success'); // Optional: Notify the user
    };

    return (
      <ModalWithoutTabs
        content={
          <div className="field-selector-modal">
            <h2 className="secondary-title">Selecteer velden om weer te geven</h2>
            <div className="field-options">
              {FIELD_CONFIG.map((field) => (
                <div key={field.key} className="field-option">
                  <label>
                    <input
                      type="checkbox"
                      checked={selectedFields.includes(field.key)}
                      onChange={() => handleCheckboxChange(field.key)}
                      disabled={field.alwaysVisible}
                    />
                    {field.label}
                  </label>
                </div>
              ))}
            </div>
            <div className="modal-buttons">
              <button className="confirm-button" onClick={handleApply}>
                Toepassen
              </button>
            </div>
          </div>
        }
        onClose={onClose}
      />
    );
  };

  // Adjust the number of columns to include the Tooltip column
  const columnsCount = visibleFields.length + 1; // +1 for the Tooltip column

  return (
    <div className="reservations-page">
      {/* Render the NotificationComponent */}
      <NotificationComponent />

      {/* Include the FieldSelectorModal */}
      {isFieldSelectorModalOpen && (
        <FieldSelectorModal
          visibleFields={visibleFields}
          setVisibleFields={setVisibleFields}
          onClose={() => setIsFieldSelectorModalOpen(false)}
        />
      )}

      <DatePickerComponent
        selectedDate={selectedDate}
        setSelectedDate={setSelectedDate}
        isDatePickerOpen={isDatePickerOpen}
        setIsDatePickerOpen={setIsDatePickerOpen}
        handleDateChange={handleDateChange}
        totalGuests={totalGuests} // Pass the totalGuests prop
        selectedShift={selectedShift} // Pass the selectedShift prop
        isPrinting={isPrinting}
      />
      <ShiftSelector
        shifts={shifts}
        selectedShift={selectedShift}
        setSelectedShift={setSelectedShift}
        isShiftOptionsOpen={isShiftOptionsOpen}
        setIsShiftOptionsOpen={setIsShiftOptionsOpen}
        setCurrentPage={setCurrentPage}
      />
      <SearchFilters
        nameSearch={nameSearch}
        setNameSearch={setNameSearch}
        guestsSearch={guestsSearch}
        setGuestsSearch={setGuestsSearch}
        timeSearch={timeSearch}
        setTimeSearch={setTimeSearch}
      />

      <div className="reservations-container">
        {loading ? (
          <div>Loading...</div>
        ) : error ? (
          <div>Fout bij het laden</div>
        ) : (
          <>
            <div
              className={`reservations-grid ${isMobile ? 'mobile-grid' : ''}`}
              style={{ gridTemplateColumns: `60px 70px repeat(${columnsCount - 2}, 1fr)` }}
            >
              {!isMobile && (
                <div className="reservations-header reservation-row">
                  {visibleFields.map((fieldKey) => {
                    const fieldConfig = FIELD_CONFIG.find((field) => field.key === fieldKey);
                    return (
                      <div
                        key={fieldKey}
                        className={`header-cell ${fieldKey}-header`}
                        onClick={() => handleSort(fieldKey)}
                        style={{ cursor: 'pointer', userSelect: 'none' }}
                      >
                        {fieldConfig.label}
                        {fieldConfig.label && (
                          <span className="sort-icon">
                            {sortConfig.key === fieldKey && sortConfig.direction === 'asc' && <FaSortUp />}
                            {sortConfig.key === fieldKey && sortConfig.direction === 'desc' && <FaSortDown />}
                          </span>
                        )}
                      </div>
                    );
                  })}
                  {/* Always render the last column header for Tooltip */}
                  <div className="header-cell extra-header"></div>
                </div>
              )}

              {currentReservations.length > 0 ? (
                currentReservations.map((reservation) => (
                  <React.Fragment key={reservation.id}>
                    <ReservationRow
                      reservation={reservation}
                      visibleFields={visibleFields}
                      isMobile={isMobile}
                      isTooltipOpen={openTooltipId === reservation.id}
                      onTooltipToggle={handleTooltipToggle}
                      onTooltipClose={handleTooltipClose}
                      triggerNotification={triggerNotification}
                    />

                    {/* Extra Info Row - Visible Only When Printing */}
                    {/* Extra Info Row - Visible Only When Printing */}
                    {reservation.extra && reservation.extra !== '' && (
                      <div className="extra-info-row">
                        <div className="extra-info-content">
                          <strong>Extra info:</strong> {reservation.extra}
                        </div>
                      </div>
                    )}

                    
                  </React.Fragment>
                  
                ))
              ) : (
                <div
                  className={`no-reservations-row ${
                    isMobile ? 'no-reservations-mobile' : 'no-reservations-desktop'
                  }`}
                >
                  <span>
                    {selectedShift === 'Dag'
                      ? 'Geen reservaties voor deze dag.'
                      : 'Geen reservaties voor deze shift.'}
                  </span>
                </div>
              )}
            </div>
            {currentReservations.length > 0 && (
              <Pagination
                totalPages={totalPages}
                currentPage={currentPage}
                handlePageClick={handlePageClick}
              />
            )}

            {/* Buttons below the pagination */}
            <div className="buttons-container">
              <button className="filter-button" onClick={handleFilterClick}>
                <FaFilter className="button-icon" />
                Filter
              </button>
              <button className="print-button" onClick={handlePrintClick}>
                <FaPrint className="button-icon" />
                Print
              </button>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default withHeader(ReservationsList);


--- Diverse/Account/.DS_Store ---
   Bud1           	                                                           a r S e l e                                                                                                                                                                                                                                                                                                                                                                                                                                           a v a t a r S e l e c t i o n . c s sIlocblob      �   .������      A v a t a r S e l e c t i o n . j sIlocblob      A   .������      c s slg1Scomp      9    c s smoDDblob   ���IZ�A    c s smodDblob   ���IZ�A    c s sph1Scomp      0                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--- Diverse/Account/AvatarSelection.js ---
// src/components/AvatarSelection/AvatarSelection.jsx

import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useDispatch } from 'react-redux';
import { setAvatar } from '../../Redux/actions/avatarActions';
import { avatars, avatarNames } from './avatars';
import { useTranslation } from 'react-i18next';
import './css/avatarSelection.css';

const AvatarSelection = ({ onSelectAvatar }) => {
  const [selectedAvatar, setSelectedAvatar] = useState(null);
  const [avatarPosition, setAvatarPosition] = useState({ initialTop: 0, initialLeft: 0 });
  const [avatarTransform, setAvatarTransform] = useState({ deltaX: 0, deltaY: 0 });
  const [isReverting, setIsReverting] = useState(false);
  const [accountName, setAccountName] = useState('');
  const avatarRefs = useRef([]);
  const { t } = useTranslation("accountOnboarding");
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const [titleText, setTitleText] = useState(t('chooseAnAvatar'));
  const [subtitleText, setSubtitleText] = useState(t('Step 2/3'));

  useEffect(() => {
    if (selectedAvatar !== null && !isReverting) {
      setSubtitleText(t('Step 3/3'));
      setTitleText(t('chooseAccountName'));
    } else if (isReverting) {
      setSubtitleText(t('Step 2/3'));
      setTitleText(t('chooseAnAvatar'));
    }
  }, [selectedAvatar, isReverting, t]);

  useEffect(() => {
    const handleResize = () => {
      if (selectedAvatar !== null) {
        const avatarElement = avatarRefs.current[selectedAvatar];
        if (!avatarElement) return;

        const rect = avatarElement.getBoundingClientRect();
        const initialTop = rect.top;
        const initialLeft = rect.left;
        const avatarWidth = avatarElement.offsetWidth;
        const avatarHeight = avatarElement.offsetHeight;
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;
        const centerLeft = viewportWidth / 2 - avatarWidth / 2;
        const centerTop = viewportHeight / 2 - avatarHeight / 2;
        const deltaX = centerLeft - initialLeft;
        const deltaY = centerTop - initialTop;

        setAvatarPosition({ initialTop, initialLeft });
        setAvatarTransform({ deltaX, deltaY });
      }
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [selectedAvatar]);

  const handleSelectAvatar = (index) => {
    if (selectedAvatar === index || isReverting) return;

    const avatarElement = avatarRefs.current[index];
    if (!avatarElement) return;

    const rect = avatarElement.getBoundingClientRect();
    const initialTop = rect.top;
    const initialLeft = rect.left;
    const avatarWidth = avatarElement.offsetWidth;
    const avatarHeight = avatarElement.offsetHeight;
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;
    const centerLeft = viewportWidth / 2 - avatarWidth / 2;
    const centerTop = viewportHeight / 2 - avatarHeight / 2;
    const deltaX = centerLeft - initialLeft;
    const deltaY = centerTop - initialTop;
    
    setAvatarPosition({ initialTop, initialLeft });
    setAvatarTransform({ deltaX, deltaY });
    setSelectedAvatar(index);
  };

  const handleRevertAvatar = () => {
    if (selectedAvatar === null || isReverting) return;

    setIsReverting(true);

    setTimeout(() => {
      setSelectedAvatar(null);
      setAvatarPosition({ initialTop: 0, initialLeft: 0 });
      setAvatarTransform({ deltaX: 0, deltaY: 0 });
      setIsReverting(false);
    }, 1000);
  };

  const goToNextPage = () => {
    onSelectAvatar(selectedAvatar);

    if (accountName.trim() === '') {
      alert(t('pleaseEnterAccountName'));
      return;
    }

    localStorage.setItem('loginSuccessful', 'true');
    dispatch(setAvatar(avatarNames[selectedAvatar]));
    navigate('/');
    window.location.reload();
  };

  return (
    <div className="avatar-page avatar-page-container">
      <div className="avatar-title-and-selection">
        <h4 className="avatar-subtitle">{subtitleText}</h4>
        <h1 className="avatar-title">{titleText}</h1>
        <div className="avatar-selection-container">
          {avatars.map((avatar, index) => (
            <button
              key={index}
              className={`avatar-button ${
                selectedAvatar === index
                  ? isReverting
                    ? 'reverting'
                    : 'selected'
                  : selectedAvatar !== null
                  ? 'hidden'
                  : ''
              }`}
              onClick={() => handleSelectAvatar(index)}
              ref={(el) => (avatarRefs.current[index] = el)}
              style={
                selectedAvatar === index && !isReverting
                  ? {
                      position: 'fixed',
                      top: avatarPosition.initialTop,
                      left: avatarPosition.initialLeft,
                      transform: `translate(${avatarTransform.deltaX}px, ${avatarTransform.deltaY}px) scale(2)`,
                      zIndex: 10,
                      transition: 'transform 1s, top 1s, left 1s',
                    }
                  : {}
              }
            >
              <img
                src={avatar}
                alt={`${t('avatar')} ${index + 1}`}
                className={`avatar-image ${
                  selectedAvatar === index && !isReverting ? 'miraculous' : ''
                }`}
                onError={(e) => {
                  e.target.onerror = null;
                  e.target.src = 'path_to_placeholder_image';
                }}
              />
            </button>
          ))}
          {selectedAvatar !== null && (
            <input
              type="text"
              className={`account-input ${selectedAvatar !== null ? 'visible' : ''}`}
              placeholder={t('enterAccountName')}
              value={accountName}
              onChange={(e) => setAccountName(e.target.value)}
            />
          )}
        </div>
        {selectedAvatar !== null && (
          <div className="button-group">
            <button className="previous-button visible" onClick={handleRevertAvatar} disabled={isReverting}>
              {t('previous')}
            </button>
            <button className="next-button visible" onClick={goToNextPage} disabled={isReverting}>
              {t('next')}
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default AvatarSelection;


--- Diverse/Account/LanguageSelection.js ---
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import i18n from '../../i18n'; // Ensure the correct path to your i18n configuration
import './css/languageSelection.css';

// Import flag images as ES6 modules
import DutchFlag from '../../Assets/flags/BE.webp';
import FrenchFlag from '../../Assets/flags/FR.webp';
import EnglishFlag from '../../Assets/flags/EN.webp';
import SpanishFlag from '../../Assets/flags/ES.webp';
import GermanFlag from '../../Assets/flags/DE.webp';
import PlaceholderFlag from '../../Assets/flags/BE.webp';

const languages = [
  { code: 'nl', name: 'Nederlands', flag: DutchFlag, stepText: 'Stap 1/3', titleText: 'Kies een Taal' },
  { code: 'fr', name: 'Français', flag: FrenchFlag, stepText: 'Étape 1/3', titleText: 'Choisissez une Langue' },
  { code: 'en', name: 'English', flag: EnglishFlag, stepText: 'Step 1/3', titleText: 'Choose a Language' },
  { code: 'es', name: 'Español', flag: SpanishFlag, stepText: 'Paso 1/3', titleText: 'Elige un Idioma' },
  { code: 'de', name: 'Deutsch', flag: GermanFlag, stepText: 'Schritt 1/3', titleText: 'Wähle eine Sprache' },
];

const LanguageSelection = ({ onSelectLanguage }) => {
  const [selectedLanguage, setSelectedLanguage] = useState(null);
  const [currentText, setCurrentText] = useState(0);
  const [isVisible, setIsVisible] = useState(true);
  const { t } = useTranslation("accountOnboarding");

  useEffect(() => {
    const interval = setInterval(() => {
      setIsVisible(false);
      setTimeout(() => {
        setCurrentText((prevText) => (prevText + 1) % languages.length);
        setIsVisible(true);
      }, 1000);
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  const handleSelectLanguage = (language) => {
    setSelectedLanguage(language.code);
    i18n.changeLanguage(language.code);
    localStorage.setItem('selectedLanguage', language.code);
  };

  const handleNext = () => {
    if (selectedLanguage) {
      onSelectLanguage(selectedLanguage);
    } else {
      alert(t('Please select a language.'));
    }
  };

  useEffect(() => {
    const savedLanguage = localStorage.getItem('selectedLanguage');
    if (savedLanguage) {
      setSelectedLanguage(savedLanguage);
      i18n.changeLanguage(savedLanguage);
    }
  }, []);

  return (
    <div className="language-page language-page-container">
      <div className="language-title-and-selection">
        <h4 className={`language-subtitle ${isVisible ? 'fade-in' : 'fade-out'}`}>
          {languages[currentText].stepText}
        </h4>
        <h1 className={`language-title ${isVisible ? 'fade-in' : 'fade-out'}`}>
          {languages[currentText].titleText}
        </h1>
        <div className="language-selection-container">
          {languages.map((language) => (
            <div
              key={language.code}
              className={`language-option ${selectedLanguage === language.code ? 'selected' : ''}`}
              onClick={() => handleSelectLanguage(language)}
            >
              <img
                src={language.flag}
                alt={`${language.name} flag`}
                className="language-flag"
                onError={(e) => {
                  e.target.onerror = null;
                  e.target.src = PlaceholderFlag;
                }}
              />
              <span className="language-name">{language.name}</span>
            </div>
          ))}
        </div>
        {selectedLanguage && (
          <button className="next-button visible" onClick={handleNext}>
            {t('next')}
          </button>
        )}
      </div>
    </div>
  );
};

export default LanguageSelection;


--- Diverse/Account/WelcomeAnimation.js ---
import React, { useEffect, useRef, useState } from 'react';
import p5 from 'p5';
import { useTranslation } from 'react-i18next';
import './css/welcomeAnimation.css';

const WelcomeAnimation = ({ onComplete }) => {
  const sketchRef = useRef();
  const [showMessage, setShowMessage] = useState(false);
  const [showButton, setShowButton] = useState(false);
  const { t } = useTranslation("accountOnboarding");

  // Constants for adjustable parameters
  const DURATION = 4000; // Animation duration in ms
  const NUM_SHAPES = 10; // Number of squaresr
  const MAX_SCALE = 23; // Maximum zoom scale
  const ROTATION_SPEED = 0.5; // Rotation speed multiplier
  const COLOR_BRIGHTNESS = 100; // Brightness of colors (0 - 100)

  useEffect(() => {
    let animationEnded = false;

    const sketch = (p) => {
      let startTime;

      p.setup = () => {
        p.createCanvas(p.windowWidth, p.windowHeight);
        p.rectMode(p.CENTER);
        p.noFill();
        p.colorMode(p.HSB, 360, 100, 100); // HSB color mode
        startTime = p.millis();
      };

      p.draw = () => {
        const elapsedTime = p.millis() - startTime;

        // Calculate normalized progress (0 to 1)
        const progress = p.constrain(elapsedTime / DURATION, 0, 1);

        // Clear background to white
        p.background(255);

        // Easing function for smooth zoom (easeInOutCubic)
        const easeInOutCubic = (t) =>
          t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;

        const easedProgress = easeInOutCubic(progress);

        // Calculate the scaling factor for steady zoom
        const scaleFactor = p.lerp(1, MAX_SCALE, easedProgress);

        // Slow down rotation
        const rotationSpeed = ROTATION_SPEED * easedProgress * p.TWO_PI;

        for (let i = 0; i < NUM_SHAPES; i++) {
          const t = i / NUM_SHAPES;

          // Size decreases with each shape
          const size = p.map(t, 0, 1, p.min(p.width, p.height), 0);

          // Each shape rotates slightly more than the last
          const rotation = rotationSpeed * t;

          p.push();
          // Translate to center
          p.translate(p.width / 2, p.height / 2);
          // Apply steady zoom
          p.scale(scaleFactor);
          // Rotate
          p.rotate(rotation);

          // Set stroke color with vibrant hues
          const hue = p.map(i, 0, NUM_SHAPES, 0, 360);
          p.stroke(hue, 100, COLOR_BRIGHTNESS);

          // Draw rounded rectangle
          p.rect(0, 0, size, size, size / 10);
          p.pop();
        }

        if (progress >= 1 && !animationEnded) {
          animationEnded = true;
          p.noLoop();
          setShowMessage(true);

          // Show the button after 1 second
          setTimeout(() => {
            setShowButton(true);
          }, 1000);
        }
      };

      p.windowResized = () => {
        p.resizeCanvas(p.windowWidth, p.windowHeight);
      };
    };

    const myp5 = new p5(sketch, sketchRef.current);

    return () => {
      myp5.remove();
    };
  }, []);

  const handleButtonClick = () => {
    onComplete(); // Notify parent component to proceed to the next step
  };

  return (
    <div className="welcome-page welcome-animation-container">
      <div ref={sketchRef}></div>
      {showMessage && (
        <div className="welcome-message">
          <h1>{t('welcomeMessage')}</h1>
          <button
            className="next-button"
            onClick={handleButtonClick}
            style={{
              opacity: showButton ? 1 : 0,
              pointerEvents: showButton ? 'auto' : 'none',
            }}
          >
            {t('startNow')}
          </button>
        </div>
      )}
    </div>
  );
};

export default WelcomeAnimation;


--- Diverse/Account/avatars.js ---
// src/components/AvatarSelection/avatars.js

import blue1 from '../../Assets/avatars/blue1.webp';
import blue2 from '../../Assets/avatars/blue2.webp';
import blue3 from '../../Assets/avatars/blue3.webp';
import red1 from '../../Assets/avatars/red1.webp';
import red2 from '../../Assets/avatars/red2.webp';
import red3 from '../../Assets/avatars/red3.webp';
import green1 from '../../Assets/avatars/green1.webp';
import green2 from '../../Assets/avatars/green2.webp';
import green3 from '../../Assets/avatars/green3.webp';

export const avatars = [
  blue1,
  blue2,
  blue3,
  red1,
  red2,
  red3,
  green1,
  green2,
  green3,
];

export const avatarNames = [
  'blue1',
  'blue2',
  'blue3',
  'red1',
  'red2',
  'red3',
  'green1',
  'green2',
  'green3',
];


--- Diverse/Account/css/animations.css ---

@keyframes fadeIn {
	from {
	  opacity: 0;
	  transform: translate(-50%, -60%);
	}
	to {
	  opacity: 1;
	  transform: translate(-50%, -50%);
	}
  }
	
  @keyframes rainbowAnimation {
	  0% {
	  background-position: 0% 50%;
	  }
	  50% {
	  background-position: 100% 50%;
	  }
	  100% {
	  background-position: 0% 50%;
	  }
  }

  @keyframes shine {
	0% {
	  filter: brightness(1);
	}
	50% {
	  filter: brightness(1.5);
	}
	100% {
	  filter: brightness(1);
	}
  }

--- Diverse/Account/css/avatarSelection.css ---
/* avatarSelection.css */

.avatar-page-container {
  display: flex;
  height: 100vh;
  justify-content: center;
  align-items: center;
  transform: translateY(-5%);
}

.avatar-page .avatar-title-and-selection {
  display: flex;
  flex-direction: column;
  align-items: center;
  position: relative;
}

.avatar-page .avatar-title {
  margin-bottom: 30px;
  transition: all 0.5s ease;
}

.avatar-page .avatar-subtitle {
  margin-bottom: 0px;
  font-weight: 500;
  color: rgb(101, 101, 101);
}

.avatar-page .avatar-selection-container {
  display: grid;
  grid-template-columns: repeat(3, 100px);
  gap: 10px;
  margin-bottom: 25px;
}

.avatar-page .avatar-button {
  opacity: 0.5;
  transition: opacity 0.5s ease, transform 1s ease, top 1s ease, left 1s ease;
  background: none;
  border: none;
  width: 100px;
  height: 100px;
  cursor: pointer;
  padding: 0;
  position: relative;
}

.avatar-page .avatar-button.selected {
  opacity: 1;
}

.avatar-page .avatar-button.hidden {
  opacity: 0;
  pointer-events: none;
}

.avatar-page .avatar-button:hover:not(.selected) {
  transform: scale(1.1);
  opacity: 1;
}

.avatar-page .avatar-image {
  width: 100%;
  height: auto;
  display: block;
  opacity: 1;
  transition: opacity 0.3s ease;
}

.avatar-page .avatar-image.miraculous {
  animation: shine 1s forwards;
}

.avatar-page .button-group {
  display: flex;
  gap: 10px;
}

.avatar-page .next-button {
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  background-color: var(--color-blue);
  color: #fff;
  border: none;
  border-radius: 5px;
  transition: background-color 0.3s ease, opacity 0.3s ease, transform 0.3s ease;
  opacity: 0;
  transform: translateY(-50%);
}

.avatar-page .next-button.visible {
  opacity: 1;
  transform: translateY(0);
}

.avatar-page .next-button:hover {
  background-color: #0056b3;
}

.avatar-page .next-button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.avatar-page .previous-button {
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  background-color: #6c757d;
  color: #fff;
  border: none;
  border-radius: 5px;
  transition: background-color 0.3s ease, opacity 0.3s ease, transform 0.3s ease;
  opacity: 0;
  transform: translateY(-50%);
}

.avatar-page .previous-button.visible {
  opacity: 1;
  transform: translateY(0);
}

.avatar-page .previous-button:hover {
  background-color: #5a6268;
}

.avatar-page .previous-button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.avatar-page .avatar-button {
  opacity: 0.5;
  transition: opacity 0.5s ease, transform 1s ease, top 1s ease, left 1s ease;
  background: none;
  border: none;
  cursor: pointer;
}

.avatar-page .avatar-button:hover:not(.selected) {
  transform: scale(1.1);
  opacity: 1;
}

.avatar-page .avatar-button.selected {
  opacity: 1;
}

.avatar-page .avatar-button.hidden {
  opacity: 0;
  pointer-events: none;
}

.avatar-page .avatar-image {
  width: 100%;
  height: auto;
  display: block;
}

.avatar-page .account-input {
  position: absolute;
  top: calc(50% + 120px);
  left: 50%;
  transform: translateX(-50%);
  width: 200px;
  height: 40px;
  padding: 10px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 5px;
  transition: all 1s ease, opacity 1s ease;
  opacity: 0;
}

.avatar-page .account-input.visible {
  opacity: 1;
}

--- Diverse/Account/css/languageSelection.css ---
.language-page-container {
	display: flex;
	height: 100vh;
	justify-content: center;
	align-items: center;
	transform: translateY(-5%);
}

.language-page .language-title-and-selection {
	display: flex;
	flex-direction: column;
	align-items: center;
}

.language-page .language-subtitle {
	margin-bottom: 0px;
	font-weight: 500;
	color: rgb(101, 101, 101);
}

.language-page .language-title {
	margin-bottom: 30px;
	transition: all 0.5s ease;
}

.language-page .language-selection-container {
	background-color: #fff;
	border-radius: 10px;
	padding: 20px;
	display: flex;
	flex-direction: column;
	min-width: 350px;
	gap: 10px;
}

.language-page .language-option {
	display: flex;
	align-items: center;
	padding: 10px;
	cursor: pointer;
	border-radius: 5px;
	transition: background-color 0.3s ease;
}

.language-page .language-option.selected {
	background-color: var(--color-bg, #e0e0e0);
}

.language-page .language-option:hover {
	background-color: #f0f0f0;
}

.language-page .language-flag {
	width: 40px;
	height: 40px;
	margin-right: 10px;
	border-radius: 100px;
	margin-right: 15px;
}

.language-page .language-name {
	font-size: 18px;
}

.language-page .next-button {
	padding: 10px 20px;
	font-size: 16px;
	cursor: pointer;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	transition: background-color 0.3s ease, opacity 0.3s ease, transform 0.3s ease;
	opacity: 0;
	transform: translateY(-50%);
	margin-top: 20px;
}

.language-page .next-button.visible {
	opacity: 1;
	transform: translateY(0);
}

.language-page .next-button:hover {
	background-color: #0056b3;
}


.language-page .fade-in {
	opacity: 1;
	transition: opacity 1s ease-in;
  }
  
  .language-page .fade-out {
	opacity: 0;
	transition: opacity 1s ease-out;
  }
  

--- Diverse/Account/css/mobile.css ---

@media (max-width: 900px) {
	.welcome-page .welcome-message h1 {
		font-size: 25px;
		width: 100vw;
	  }
}

--- Diverse/Account/css/welcomeAnimation.css ---


.welcome-animation-container {
  position: relative;
  width: 100%;
  height: 100vh;
  background-color: #000000 !important;

}

.welcome-page .welcome-message {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: var(--color-black, #000000);
  text-align: center;
  animation: fadeIn 2s ease-in-out;
}

.welcome-page .welcome-message h1 {
  margin-bottom: 0px;
}

.welcome-page .next-button {
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  background-size: 800% 800%;
  border: none;
  border-radius: 5px;
  transition: opacity 0.3s ease;
  opacity: 0;
  margin-top: 20px;
  background-color: white !important;
  border: var(--color-black) 1px solid;
  color: var(--color-black);
  transition: all 0.4s ease;
}

.welcome-page .next-button:hover {
	background-color: var(--color-black) !important;
	color: var(--color-white)
  }

.welcome-page .next-button:hover {
  filter: brightness(1.1);
}

.welcome-page .next-button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}


--- Diverse/Account/index.js ---
// src/components/AccountManagement.jsx

import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import WelcomeAnimation from './WelcomeAnimation';
import LanguageSelection from './LanguageSelection';
import AvatarSelection from './AvatarSelection';
import useNotification from '../../Components/Notification/index';
import './css/animations.css';
import './css/mobile.css';

const AccountManagement = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const { triggerNotification, NotificationComponent } = useNotification();
  const [selectedLanguage, setSelectedLanguage] = useState(null);
  const [selectedAvatar, setSelectedAvatar] = useState(null);
  const { t } = useTranslation('accountOnboarding');

  const handleAnimationComplete = () => {
    setCurrentStep(2);
  };

  const handleLanguageSelect = (languageCode) => {
    console.log(`Selected Language Code: ${languageCode}`);
    setSelectedLanguage(languageCode);
    setCurrentStep(3);
    triggerNotification(t('languageSelected', { language: languageCode }));
  };

  const handleAvatarSelect = (avatarIndex) => {
    console.log(`Selected Avatar Index: ${avatarIndex}`);
    setSelectedAvatar(avatarIndex);
    triggerNotification(t('avatarSelected'));
  };

  return (
    <div>
      <NotificationComponent />
      {currentStep === 1 && (
        <WelcomeAnimation onComplete={handleAnimationComplete} />
      )}
      {currentStep === 2 && (
        <LanguageSelection onSelectLanguage={handleLanguageSelect} />
      )}
      {currentStep === 3 && (
        <AvatarSelection onSelectAvatar={handleAvatarSelect} />
      )}
    </div>
  );
};

export default AccountManagement;


--- Diverse/Notepad/.DS_Store ---
   Bud1                                                                     ocblob                                                                                                                                                                                c s sIlocblob      A   .������      c s slg1Scomp      �    c s smoDDblob   ��F�X�A    c s smodDblob   ��F�X�A    c s sph1Scomp           i n d e x . j sIlocblob      �   .������                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--- Diverse/Notepad/css/style.css ---

.notepad-page {
	height: 100vh;
	display: flex;
	flex-direction: column;
	background-color: var(--color-bg);
	box-sizing: border-box;
}
  
.notepad-page .notepad-textarea {
	flex: 1;
	background-color: var(--color-bg);
	color: var(--color-black);
	border: none;
	outline: none;
	font-size: 1.1rem;
	box-sizing: border-box;
	overflow-y: auto;
	padding-top: 10px;
	padding-right: 20px;
	margin-left: -10px;
}

.notepad-page .ql-container {
	height: calc(100vh - 200px);
}
  


--- Diverse/Notepad/index.js ---
import React, { useState, useEffect, useRef } from 'react';
import { withHeader } from '../../../Components/Structural/Header/index.js';
import './css/style.css';

const Notepad = () => {
  const [note, setNote] = useState(localStorage.getItem('notepadNote') || '');
  const editorRef = useRef(null);

  useEffect(() => {
    if (editorRef.current) {
      if (note === '') {
        editorRef.current.innerHTML = '';
      } else {
        editorRef.current.innerHTML = note;
      }
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('notepadNote', note);
  }, [note]);

  const resetToParagraph = () => {
    const selection = window.getSelection();
    if (selection.rangeCount > 0) {
      const range = selection.getRangeAt(0);
      let blockNode = range.startContainer;

      while (
        blockNode &&
        blockNode !== editorRef.current &&
        !['P', 'DIV', 'H1', 'H2', 'H3'].includes(blockNode.nodeName)
      ) {
        blockNode = blockNode.parentNode;
      }

      if (blockNode && blockNode.nodeName !== 'P') {
        document.execCommand('formatBlock', false, 'p');
      }
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === 'b' && e.ctrlKey) {
      document.execCommand('bold');
      e.preventDefault();
    } else if (e.key === 'i' && e.ctrlKey) {
      document.execCommand('italic');
      e.preventDefault();
    } else if (e.key === 'u' && e.ctrlKey) {
      document.execCommand('underline');
      e.preventDefault();
    } else if (e.key === 'Enter') {
      e.preventDefault();
      document.execCommand('insertParagraph');
      setTimeout(() => {
        resetToParagraph();
      }, 0);
    } else if (e.key === 'Delete') {
      const selection = window.getSelection();
      if (selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        const blockNode = range.startContainer.parentNode;

        if (blockNode.textContent.trim() === '') {
          e.preventDefault();
          resetToParagraph();
        }
      }
    }
  };

  const handleInputChange = (e) => {
    const editor = editorRef.current;
    const text = editor.innerHTML;
    setNote(text);

    const selection = window.getSelection();
    if (selection.rangeCount > 0) {
      const range = selection.getRangeAt(0);
      const node = range.startContainer;

      let blockNode = node;
      while (
        blockNode &&
        !['P', 'DIV', 'H1', 'H2', 'H3'].includes(blockNode.nodeName)
      ) {
        blockNode = blockNode.parentNode;
      }

      if (blockNode) {
        let blockText = blockNode.textContent;
        const lastThreeChars = blockText.slice(-3);

        if (
          lastThreeChars === '#h1' ||
          lastThreeChars === '#h2' ||
          lastThreeChars === '#h3'
        ) {
          blockText = blockText.slice(0, -3);

          if (blockNode === editor) {
            // Wrap content in a paragraph
            const p = document.createElement('p');
            p.textContent = blockText;
            editor.innerHTML = '';
            editor.appendChild(p);
            blockNode = p;
          } else {
            blockNode.textContent = blockText;
          }

          const format =
            lastThreeChars === '#h1'
              ? 'h1'
              : lastThreeChars === '#h2'
              ? 'h2'
              : 'h3';
          document.execCommand('formatBlock', false, format);

          const newRange = document.createRange();
          newRange.setStart(blockNode, blockNode.childNodes.length);
          newRange.collapse(true);
          selection.removeAllRanges();
          selection.addRange(newRange);
        }
      }
    }
  };

  return (
    <div className="notepad-page">
      <div
        ref={editorRef}
        className="notepad-textarea"
        contentEditable
        onInput={handleInputChange}
        onKeyDown={handleKeyDown}
        placeholder="Begin met typen...\nTip: gebruik #h1, #h2 of h3 in het begin van een zin voor titels"
        style={{
          minHeight: '300px',
          padding: '10px',
          direction: 'ltr',
          textAlign: 'left',
          color: note === '' ? 'lightgray' : 'black',
        }}
      >
        {note === ''
          ? 'Begin met typen...\nTip: gebruik #h1, #h2 of h3 in het begin van een zin voor titels'
          : ''}
      </div>
    </div>
  );
};

export default withHeader(Notepad);


--- Diverse/Pincode/PincodeInput.js ---
// src/components/PincodeScreen/PincodeInput.jsx

import React, { useState, useRef } from 'react';
import './css/pincodeInput.css';

const PincodeInput = ({ length }) => {
  const [digits, setDigits] = useState(
    Array.from({ length }, () => ({ value: '', masked: false }))
  );

  const timeoutRefs = useRef(Array(length).fill(null));

  const inputRefs = useRef([]);

  const handleChange = (index, e) => {
    const { value } = e.target;
    if (!/^\d*$/.test(value)) return;

    const newDigits = [...digits];
    newDigits[index].value = value;
    newDigits[index].masked = false;
    setDigits(newDigits);

    if (timeoutRefs.current[index]) {
      clearTimeout(timeoutRefs.current[index]);
    }

    timeoutRefs.current[index] = setTimeout(() => {
      const updatedDigits = [...digits];
      updatedDigits[index].masked = true;
      setDigits(updatedDigits);
      timeoutRefs.current[index] = null;
    }, 500);

    if (value && index < length - 1) {
      inputRefs.current[index + 1].focus();
    }
  };

  const handleKeyDown = (index, e) => {
    if (e.key === 'Backspace') {
      e.preventDefault();
      const newDigits = [...digits];

      if (digits[index].value === '' && index > 0) {
        newDigits[index - 1].value = '';
        newDigits[index - 1].masked = false;
        setDigits(newDigits);
        inputRefs.current[index - 1].focus();

        if (timeoutRefs.current[index - 1]) {
          clearTimeout(timeoutRefs.current[index - 1]);
          timeoutRefs.current[index - 1] = null;
        }
      } else {
        newDigits[index].value = '';
        newDigits[index].masked = false;
        setDigits(newDigits);

        if (timeoutRefs.current[index]) {
          clearTimeout(timeoutRefs.current[index]);
          timeoutRefs.current[index] = null;
        }
      }
    }
  };

  const handleFocus = (index) => {
    if (digits[index].masked) {
      const newDigits = [...digits];
      newDigits[index].masked = false;
      setDigits(newDigits);
    }
  };

  return (
    <div className="pincode-input-container">
      {digits.map((digit, index) => (
        <input
          key={index}
          type="text"
          inputMode="numeric"
          maxLength="1"
          className="pincode-input"
          value={digit.masked ? '•' : digit.value}
          onChange={(e) => handleChange(index, e)}
          onKeyDown={(e) => handleKeyDown(index, e)}
          onFocus={() => handleFocus(index)}
          ref={(el) => (inputRefs.current[index] = el)}
        />
      ))}
    </div>
  );
};

export default PincodeInput;


--- Diverse/Pincode/css/mobile.css ---
@media (max-width: 900px) {
	.pincode-page .pincode-input {
	  width: 40px;
	  height: 50px;
	  font-size: 24px;
	}
  }
  

--- Diverse/Pincode/css/pincodeInput.css ---
/* src/components/PincodeScreen/css/pincodeInput.css */

.pincode-page .pincode-input-container {
	display: flex;
	justify-content: center;
	align-items: center;
  }
  
  .pincode-page .pincode-input {
	width: 50px;
	height: 60px;
	margin: 0 5px;
	font-size: 28px;
	text-align: center;
	border: 1px solid #ccc;
	border-radius: 6px;
	outline: none;
	transition: border-color 0.2s, transform 0.2s;
  }
  
  .pincode-page .pincode-input:focus {
	border-color: #1890ff;
	transform: scale(1.05);
  }

--- Diverse/Pincode/css/pincodeScreen.css ---
/* src/components/PincodeScreen/css/pincodeScreen.css */

.pincode-page .pincode-screen {
	display: absolute;
	justify-content: center;
	margin-top: 30vh;
	height: 100vh; /* Full viewport height */
	box-sizing: border-box;
	/* No background color */
  }
  
  .pincode-page .pincode-container {
	display: flex;
	flex-direction: column;
	align-items: center;
  }

  .pincode-page .pincode-container h2 {
	margin-bottom: 20px;
  }

--- Diverse/Pincode/index.js ---
// src/components/PincodeScreen/PincodeScreen.jsx

import React from 'react';
import { withHeader } from '../../Components/Structural/Header/index.js';
import PincodeInput from './PincodeInput';
import './css/pincodeScreen.css';
import './css/mobile.css';

const PincodeScreen = () => {
  return (
    <div className="pincode-page">
      <div className="pincode-screen">
        <div className="pincode-container">
			<h2>Vul Uw Pincode In</h2>
          <PincodeInput length={6} />
        </div>
      </div>
    </div>
  );
};

export default withHeader(PincodeScreen);


--- FormEditor/.DS_Store ---
   Bud1           
                                                           u l t E l e                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           d e f a u l t E l e m e n t s . j sIlocblob      A   .������      D r a g A n d D r o pIlocblob      �   .������      F o r m S e t t i n g sIlocblob     �   .������      F o r m S e t t i n g sbwspblob   �bplist00�]ShowStatusBar[ShowToolbar[ShowTabView_ContainerShowSidebar\WindowBounds[ShowSidebar		_{{382, 479}, {920, 436}}	#/;R_klmno�             
               �    F o r m S e t t i n g svSrnlong       i n d e x . j sIlocblob     �   .������     
 L a u n c h P a g eIlocblob     g   .������      T h e m eIlocblob      A   �������                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--- FormEditor/DragAndDrop/Block.js ---
// src/components/DragAndDropEditor/Block.jsx

import React, { useState } from 'react';
import { FaTrashAlt, FaEdit, FaGripHorizontal, FaSave } from 'react-icons/fa';
import './css/block.css';
import './css/animations.css';
import './css/style.css';
import './css/mobile.css';

const Block = ({
  type,
  label,
  id,
  placeholder: initialPlaceholder,
  required: initialRequired,
  onDelete,
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [fieldLabel, setFieldLabel] = useState(label);
  const [placeholder, setPlaceholder] = useState(initialPlaceholder || '');
  const [isRequired, setIsRequired] = useState(initialRequired || false);

  // Determine if the block is a default block
  const isDefault = id.startsWith('default-');

  const renderLabel = () => (
    <label>
      {fieldLabel}
      {isRequired && <span className="required-warning">(*)</span>}
    </label>
  );

  const renderStaticContent = () => {
    // Render static content without input fields for default blocks
    return (
      <div className="static-content">
        <span className="static-placeholder">
          {fieldLabel || 'Informatie beschikbaar'}
        </span>
      </div>
    );
  };

  const renderEditableField = () => {
    // Render editable input fields for non-default blocks
    const commonProps = {
      placeholder: placeholder || 'Voer hier uw tekst in',
      required: isRequired,
    };

    return (
      <>
        {renderLabel()}
        {type === 'textarea' ? (
          <textarea {...commonProps}></textarea>
        ) : (
          <input type={type} {...commonProps} />
        )}
      </>
    );
  };

  const handleSave = () => {
    setIsEditing(false);
    // Add additional logic here to save changes if necessary
  };

  return (
    <div
      className={`block ${isHovered ? 'selected' : ''} ${isDefault ? 'default-block' : ''}`}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => {
        setIsHovered(false);
        setIsEditing(false);
      }}
    >
      {/* Conditionally render the drag handle only if not a default block */}
        <div className="drag-handle">
          <FaGripHorizontal />
        </div>
      

      <div className="block-content">
        {isEditing && !isDefault ? (
          <div className="editing-interface">
            <input
              type="text"
              value={fieldLabel}
              onChange={(e) => setFieldLabel(e.target.value)}
              placeholder="Naam"
            />
            <input
              type="text"
              value={placeholder}
              onChange={(e) => setPlaceholder(e.target.value)}
              placeholder="Placeholder"
            />
            <div className="required-switch">
              <label className="switch-label">Verplicht:</label>
              <label className="switch">
                <input
                  type="checkbox"
                  checked={isRequired}
                  onChange={() => setIsRequired(!isRequired)}
                />
                <span className="slider round"></span>
              </label>
            </div>
            <button className="button standard-button" onClick={handleSave}>
              <FaSave /> Opslaan
            </button>
          </div>
        ) : isDefault ? (
          renderStaticContent()
        ) : (
          renderEditableField()
        )}
      </div>

      {/* Conditionally render action icons for non-default blocks */}
      {isHovered && !isDefault && !isEditing && (
        <div className="action-icons">
          <button className="edit-button" onClick={() => setIsEditing(true)}>
            <FaEdit />
          </button>
          <button className="delete-button" onClick={() => onDelete(id)}>
            <FaTrashAlt />
          </button>
        </div>
      )}
    </div>
  );
};

export default Block;


--- FormEditor/DragAndDrop/Canvas.js ---
// src/components/DragAndDropEditor/Canvas.jsx

import React from 'react';
import { Droppable, Draggable } from 'react-beautiful-dnd';
import Block from './Block';
import './css/canvas.css';

const Canvas = ({ items, setItems, dropPosition, onDelete }) => {
  // Log items before rendering
  console.log('Canvas component received items:', items);

  return (
    <div className="canvas">
      <Droppable droppableId="Canvas">
        {(provided, snapshot) => (
          <div
            className={`canvas-area ${snapshot.isDraggingOver ? 'is-dragging-over' : ''}`}
            ref={provided.innerRef}
            {...provided.droppableProps}
          >
            {/* Render All Items as Draggable Blocks */}
            {items.map((item, index) => (
              <React.Fragment key={item.id}>
                {dropPosition === index && (
                  <div className="custom-drop-indicator">
                    <div className="drop-line"></div>
                    <div className="drop-dot">
                      <span className="plus-sign">+</span>
                    </div>
                  </div>
                )}
                <Draggable draggableId={item.id} index={index}>
                  {(provided, snapshot) => (
                    <div
                      className={`canvas-item ${snapshot.isDragging ? 'dragging' : ''}`}
                      ref={provided.innerRef}
                      {...provided.draggableProps}
                      {...provided.dragHandleProps}
                    >
                      <Block {...item} onDelete={onDelete} />
                    </div>
                  )}
                </Draggable>
              </React.Fragment>
            ))}

            {/* Drop Indicator for Adding at the End */}
            {dropPosition === items.length && (
              <div className="custom-drop-indicator">
                <div className="drop-line"></div>
                <div className="drop-dot">
                  <span className="plus-sign">+</span>
                </div>
              </div>
            )}

            {provided.placeholder}

            {/* Placeholder Message */}
            {items.length === 0 && (
              <div className="canvas-placeholder">
                Sleep hier uw elementen naartoe
              </div>
            )}
          </div>
        )}
      </Droppable>
    </div>
  );
};

export default Canvas;


--- FormEditor/DragAndDrop/Palette.js ---
// src/components/DragAndDropEditor/Palette.jsx

import React from 'react';
import { Droppable, Draggable } from 'react-beautiful-dnd';
import { FaGripHorizontal } from 'react-icons/fa';
import './css/palette.css';

const Palette = ({ blocks }) => (
  <div className="palette">
    <Droppable droppableId="Palette" isDropDisabled={true}>
      {(provided) => (
        <div
          className="palette-blocks"
          ref={provided.innerRef}
          {...provided.droppableProps}
        >
          {blocks.map((block, index) => (
            <Draggable key={block.id} draggableId={block.id} index={index}>
              {(provided, snapshot) => (
                <div
                  className={`palette-block ${
                    snapshot.isDragging ? 'dragging' : ''
                  }`}
                  ref={provided.innerRef}
                  {...provided.draggableProps}
                  {...provided.dragHandleProps}
                >
                  <span className="palette-drag-icon">
                    <FaGripHorizontal />
                  </span>
                  <span className="icon">{block.icon}</span>
                  <span className="label">{block.label}</span>
                </div>
              )}
            </Draggable>
          ))}
          {provided.placeholder}
        </div>
      )}
    </Droppable>
  </div>
);

export default Palette;


--- FormEditor/DragAndDrop/css/animations.css ---
  
  @keyframes popIn {
	0% {
	  transform: scale(0.8);
	  opacity: 0;
	}
	100% {
	  transform: scale(1);
	  opacity: 1;
	}
  }
  



--- FormEditor/DragAndDrop/css/block.css ---
/* src/components/DragAndDropEditor/css/block.css */

.form-editing-page .block {
	position: relative;
	display: flex;
	align-items: center;
	background-color: #fff;
	padding: 15px;
	border-radius: 8px;
	box-sizing: border-box;
	transition: border 0.2s ease, box-shadow 0.2s ease;
  }
  
  .form-editing-page .block.selected {
	border: 2px solid var(--color-bg);
	box-shadow: 0 0 10px var(--color-lightblue);
  }
  
  .form-editing-page .drag-handle {
	cursor: grab;
	margin-right: 10px;
	color: #ccc;
	display: flex;
	align-items: center;
	justify-content: center;
	height: 100%;
  }
  
  .form-editing-page .drag-handle:hover {
	color: #999;
  }
  
  .form-editing-page .block-content {
	flex-grow: 1;
  }
  
  .form-editing-page .block-content label {
	display: block;
	margin-bottom: 5px;
	font-size: 16px;
  }
  
  .form-editing-page .block-content input,
  .form-editing-page .block-content select,
  .form-editing-page .block-content textarea {
	width: 100%;
	padding: 12px;
	border-radius: 4px;
	border: 1px solid #ccc;
	box-sizing: border-box;
	font-size: 18px;
	margin-bottom: 10px;
	
  }
  
  .form-editing-page .block-content textarea {
	resize: vertical;
	height: 80px;
  }
  
  .form-editing-page .block-content p {
	margin: 0;
	font-size: 18px;
  }
  
  .form-editing-page .action-icons {
	display: flex;
	flex-direction: column;
	justify-content: center;
	margin-left: 10px;
  }
  
  .form-editing-page .action-icons button {
	background: transparent;
	border: none;
	cursor: pointer;
	padding: 5px;
	transition: transform 0.2s ease;
  }
  
  .form-editing-page .action-icons button:hover {
	transform: scale(1.2);
  }
  
  .form-editing-page .edit-button svg {
	color: #000;
	font-size: 18px;
  }
  
  .form-editing-page .delete-button svg {
	color: #f5222d;
	font-size: 18px;
  }
  
  .form-editing-page .action-icons button + button {
	margin-top: 5px;
  }
  
  .form-editing-page .block-content input[type='text'] {
	margin-bottom: 10px;
  }
  
  .form-editing-page .block:hover::before {
	content: '';
	position: absolute;
	top: -10px;
	left: -10px;
	right: -10px;
	bottom: -10px;
	border: 2px solid var(--color-lightblue);
	border-radius: 16px;
	pointer-events: none;
  }
  
  .form-editing-page .block.selected {
	border: 2px solid var(--color-bg);
  }

  .form-editing-page .required-switch {
	display: flex;
	align-items: center;
	margin-top: 10px;
	margin-bottom: 13px;
  }
  
  .form-editing-page .switch-label {
	display: flex;
	align-items: center;
	font-size: 14px;
  }
  
  .form-editing-page .switch {
	position: relative;
	display: inline-block;
	width: 40px;
	height: 20px;
	margin-left: 10px;
  }
  
  .form-editing-page .switch input {
	opacity: 0;
	width: 0;
	height: 0;
  }
  
  .form-editing-page .slider {
	position: absolute;
	cursor: pointer;
	top: 0; left: 0; right: 0; bottom: 0;
	background-color: #ccc;
	transition: 0.4s;
	border-radius: 34px;
  }
  
  .form-editing-page .slider:before {
	position: absolute;
	content: "";
	height: 14px; width: 14px;
	left: 3px; bottom: 3px;
	background-color: white;
	transition: 0.4s;
	border-radius: 50%;
  }
  
  .form-editing-page input:checked + .slider {
	background-color: var(--color-lightblue);
  }
  
  .form-editing-page input:focus + .slider {
	box-shadow: 0 0 1px var(--color-lightblue);
  }
  
  .form-editing-page input:checked + .slider:before {
	transform: translateX(20px);
  }
  
  .form-editing-page .slider.round {
	border-radius: 34px;
  }
  
  .form-editing-page .slider.round:before {
	border-radius: 50%;
  }

  .form-editing-page .required-warning {
	color: gray;
	font-size: 12px;
	margin-left: 5px;
  }
  
.form-editing-page .default-block {
	background-color: #e0f7fa;
	border: 1px solid #81d4fa;
	margin-bottom: 15px;
  }
  
  .form-editing-page .default-block .block-content {
	color: #006064;
  }
  

--- FormEditor/DragAndDrop/css/canvas.css ---

  .form-editing-page .canvas {
	flex-grow: 1;
	padding: 20px;
	box-sizing: border-box;
	overflow-y: auto;
  }
  
  .form-editing-page .canvas h2 {
	margin-top: 0;
  }
  
  .form-editing-page .canvas-area {
	
	position: relative;
  }
  
  .form-editing-page .canvas-item {
	background-color: var(--color-bg);
	border-radius: 8px;
	cursor: grab;
	position: relative;
	margin-bottom: 10px;
	transition: border 0.2s ease, box-shadow 0.2s ease;
  }
  
  .form-editing-page .canvas-item.dragging {
	opacity: 0.5;
	transform: scale(0.95);
  }
  
  .form-editing-page .canvas-item.selected {
	border: 2px solid var(--color-bg);
	box-shadow: 0 0 10px var(--color-blue);
  }
  
  .form-editing-page .canvas-placeholder {
	text-align: center;
	color: #888;
	font-size: 16px;
	padding: 20px;
  }
  
  .form-editing-page .custom-drop-indicator {
	display: flex;
	align-items: center;
	justify-content: center;
	margin: 10px 0;
  }
  
  .form-editing-page .drop-line {
	width: 100%;
	height: 4px;
	background-color: var(--color-lightblue);
	border-radius: 2px;
  }
  
  .form-editing-page .drop-dot {
	position: absolute;
	top: -12px;
	left: 50%;
	transform: translateX(-50%);
	background-color: var(--color-lightblue);
	width: 24px;
	height: 24px;
	border-radius: 50%;
	display: flex;
	align-items: center;
	justify-content: center;
  }
  
  .form-editing-page .plus-sign {
	color: white;
	font-weight: bold;
	font-size: 16px;
  }
  

.custom-drop-indicator {
	animation: popIn 0.3s ease-out forwards;
  }

--- FormEditor/DragAndDrop/css/mobile.css ---

@media (max-width: 900px) {
	.form-editing-page .palette {
	  width: 100%;
	  order: 2;
	  margin-bottom: 60px;
	  margin-left: 0px;
	}

	.form-editing-page .editor-container {
	  flex-direction: column;
	}

	.form-editing-page .canvas {
	  width: 100%;
	  order: 1;
	  min-height: 300px;
	  margin-bottom: 0px;
	  padding: 0 !important;
	}

	.form-editing-page .canvas-area {
		margin: 20px;
	  }

	    
  .form-editing-page .themes-button {
	margin-top: -40px;
	margin-right: -30px;
  }
  
  }

  .form-editing-pag .palette-responsive {
	width: 100% !important;
	order: 2;
	margin-bottom: 20px;
	margin-left: 0px;
	padding-right: 20px;
	flex-grow: 0;
  }
  
  .form-editing-pag .editor-container-responsive {
	flex-direction: column;
	display: flex;
  }
  
  .form-editing-pag .canvas-responsive {
	width: 100%;
	order: 1;
	margin-bottom: 60px;
	padding: 0 !important;
	height: calc(80%);
  }
  

--- FormEditor/DragAndDrop/css/palette.css ---

.form-editing-page .palette {
	width: 300px;
	padding: 20px;
	margin-left: -20px;
	box-sizing: border-box;
	overflow-y: auto;
	border-radius: 8px;
	display: flex;
	flex-direction: column;
  }
  
  .form-editing-page .palette-blocks {
	display: flex;
	flex-direction: column;
	gap: 10px;
  }
  
  .form-editing-page .palette-block {
	background-color: var(--color-white);
	padding: 10px;
	border-radius: 8px;
	cursor: grab;
	display: flex;
	align-items: center;
	transition: opacity 0.2s ease, transform 0.2s ease;
	box-sizing: border-box;
  }
  
  .form-editing-page .palette-block:hover {
	transform: scale(1.05);
  }
  
  .form-editing-page .palette-block.dragging {
	opacity: 0.5;
	transform: scale(0.95);
  }
  
  .form-editing-page .palette-drag-icon {
	font-size: 16px;
	margin-right: 10px;
	color: #ccc;
	display: flex;
	align-items: center;
	justify-content: center;
  }
  
  .form-editing-page .palette-block .icon {
	font-size: 24px;
	margin-right: 10px;
	align-items: center;
	justify-content: center;
	display: flex;
	padding-top: 5px;
	padding-bottom: 5px;
  }
  
  .form-editing-page .palette-block .label {
	font-size: 14px;
  }
  


.form-editing-page .palette-block {
	position: relative;
	background-color: var(--color-white);
	padding: 10px;
	border-radius: 8px;
	cursor: grab;
	display: flex;
	align-items: center;
	transition: opacity 0.2s ease, transform 0.2s ease;
	box-sizing: border-box;
  }
  
  .form-editing-page .palette-block:hover {
	transform: scale(1.05);
	z-index: 10000;
  }
  
  .form-editing-page .palette-block:hover::before {
	content: '';
	position: absolute;
	top: -10px;
	left: -10px;
	right: -10px;
	bottom: -10px;
	border: 2px solid var(--color-lightblue);
	border-radius: 16px;
	pointer-events: none;
	box-shadow: 0 0 10px var(--color-lightblue);
  }
  
  .form-editing-page .palette-block.dragging {
	opacity: 0.5;
	transform: scale(0.95);
  }
  

--- FormEditor/DragAndDrop/css/style.css ---

.form-editing-page .editor-container {
	display: flex;
	height: 100vh;
	width: 100%;
	margin-top: 30px;
  }
  
  .form-editing-page .themes-button {
	position: absolute;
	top: 120px;
	right: 50px;
	transition: transform 0.3s ease;
}



--- FormEditor/FormSettings/Colors/BackgroundTypeSelector.js ---
// src/components/FormSettings/BackgroundTypeSelector.jsx

import React from 'react';
import { FaSquareFull, FaGripLinesVertical, FaMagic } from 'react-icons/fa';
import './css/backgroundTypeSelector.css';

const BackgroundTypeSelector = ({ backgroundType, setBackgroundType }) => {
  const options = [
    {
      key: 'solid',
      label: 'Effen Kleur',
      icon: <FaSquareFull size={48} />,
    },
    {
      key: 'gradient',
      label: 'Kleur Overgang',
      icon: <FaGripLinesVertical size={48} />,
    },
    {
      key: 'animated',
      label: 'Kleur Animatie',
      icon: <FaMagic size={48} />,
    },
  ];

  const handleSelect = (key) => {
    setBackgroundType(key);
  };

  return (
    <div className="background-type-selector">
      <label>Achtergrondtype:</label>
      <div className="background-type-options">
        {options.map((option) => (
          <div
            key={option.key}
            className={`background-type-option ${
              backgroundType === option.key ? 'selected' : ''
            }`}
            onClick={() => handleSelect(option.key)}
          >
            <div className="icon-container">{option.icon}</div>
            <div className="option-label">{option.label}</div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default BackgroundTypeSelector;


--- FormEditor/FormSettings/Colors/ColorPicker.js ---
// src/components/FormSettings/ColorPicker.jsx

import React from 'react';

const ColorPicker = ({ label, name, value, onChange }) => {
  return (
    <div className="form-group color-picker-group">
      <label htmlFor={name}>{label}:</label>
      <input
        type="color"
        id={name}
        name={name}
        value={value}
        onChange={onChange}
      />
    </div>
  );
};

export default ColorPicker;


--- FormEditor/FormSettings/Colors/css/backgroundTypeSelector.css ---
/* src/components/FormSettings/css/backgroundTypeSelector.css */

.form-settings-page .background-type-selector {
	margin-bottom: 20px;
  }
  
  .form-settings-page .background-type-selector label {
	display: block;
	margin-bottom: 5px;
	font-weight: 500;
  }
  
  .form-settings-page .background-type-options {
	display: flex;
	width: 100%;
  }
  
  .form-settings-page .background-type-option {
	flex: 1;
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	padding: 20px;
	margin: 5px;
	border: 2px solid #ccc;
	border-radius: 5px;
	cursor: pointer;
	background-color: white;
	transition: border-color 0.3s;
	text-align: center;
  }
  
  .form-settings-page .background-type-option.selected {
	border-color: var(--color-blue);
  }
  
  .form-settings-page .icon-container {
	margin-bottom: 10px;
  }
  
  .form-settings-page .option-label {
	font-size: 14px;
  }
  

--- FormEditor/FormSettings/Colors/index.js ---
// src/components/FormSettings/Colors.jsx

import React, { useState, useEffect, forwardRef, useImperativeHandle, useRef, useMemo } from 'react';
import useNotification from '../../../../Components/Notification/index';
import ColorPicker from './ColorPicker';
import BackgroundTypeSelector from './BackgroundTypeSelector';
import useApi from '../../../../Hooks/useApi.js';

const Colors = forwardRef((props, ref) => {
  const { triggerNotification, NotificationComponent } = useNotification();

  const defaultAppearanceData = {
    backgroundType: 'solid',
    backgroundColor: '#000',
    gradientStartColor: '#FFFFFF',
    gradientEndColor: '#000000',
    animationType: 'none',
    widgetBackgroundColor: '#000000',
    widgetTextColor: '#FFFFFF',
    textColor: '#000000',
    containerColor: '#FFFFFF',
    buttonColor: '#000000',
    buttonTextColor: '#FFFFFF',
  };

  const [appearanceData, setAppearanceData] = useState(defaultAppearanceData);
  const [initialAppearanceData, setInitialAppearanceData] = useState(defaultAppearanceData);
  const [loading, setLoading] = useState(true);

  const isIframe = typeof window !== 'undefined' && window.isIframe;

  const saveTimeoutRef = useRef(null);
  const expiryTimeRef = useRef(null);

  const api = useApi();

  useEffect(() => {
    const fetchColors = async () => {
      try {
        console.log("Colors GET");
        const response = await api.get(`${window.baseDomain}api/colors/`);
        const data = response || {};
        const mergedData = { ...defaultAppearanceData, ...data };
        const missingFields = Object.keys(defaultAppearanceData).filter(
          (key) => !(key in data)
        );
        if (missingFields.length > 0) {
          console.warn('Missing color fields from server response:', missingFields);
        }

        setAppearanceData(mergedData);
        setInitialAppearanceData(mergedData);
      } catch (err) {
        console.error('Error fetching colors:', err);
        setAppearanceData(defaultAppearanceData);
        setInitialAppearanceData(defaultAppearanceData);
      } finally {
        setLoading(false);
      }
    };

    fetchColors();
  }, [api]);

  const handleChange = (e) => {
    const { name, value } = e.target;

    setAppearanceData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleBackgroundTypeChange = (backgroundType) => {
    setAppearanceData((prevData) => ({
      ...prevData,
      backgroundType,
    }));
  };

  const handleSave = async () => {
    try {
      await api.put(`${window.baseDomain}api/colors/`, appearanceData);
      triggerNotification('Kleuren aangepast', 'success');
      setInitialAppearanceData(appearanceData);
    } catch (err) {
      console.error('Error saving colors:', err);
      const errorCode = err.response?.status || 'unknown';
      triggerNotification(`Fout bij opslaan. Code: ${errorCode}`, 'error');
      throw err;
    }
  };

  const isDirty = useMemo(
    () => JSON.stringify(appearanceData) !== JSON.stringify(initialAppearanceData),
    [appearanceData, initialAppearanceData]
  );

  useImperativeHandle(ref, () => ({
    isDirty,
    handleSave,
  }));

  useEffect(() => {
    if (isIframe && isDirty) {
      const currentTime = Date.now();
      if (saveTimeoutRef.current) {
        expiryTimeRef.current += 2000;
      } else {
        expiryTimeRef.current = currentTime + 5000;
      }

      const delay = expiryTimeRef.current - currentTime;
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
      saveTimeoutRef.current = setTimeout(async () => {
        try {
          await handleSave();
        } catch (error) {
        }
        saveTimeoutRef.current = null;
        expiryTimeRef.current = null;
      }, delay);
    }

    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
        saveTimeoutRef.current = null;
        expiryTimeRef.current = null;
      }
    };
  }, [appearanceData, isIframe, isDirty, handleSave]);

  const { backgroundType } = appearanceData;

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="colors-container">
      <NotificationComponent />

      <BackgroundTypeSelector
        backgroundType={backgroundType}
        setBackgroundType={handleBackgroundTypeChange}
      />

      {backgroundType === 'solid' && (
        <ColorPicker
          label="Achtergrondkleur"
          name="backgroundColor"
          value={appearanceData.backgroundColor}
          onChange={handleChange}
        />
      )}

      {backgroundType === 'gradient' && (
        <>
          <ColorPicker
            label="Gradient Startkleur"
            name="gradientStartColor"
            value={appearanceData.gradientStartColor}
            onChange={handleChange}
          />
          <ColorPicker
            label="Gradient Eindkleur"
            name="gradientEndColor"
            value={appearanceData.gradientEndColor}
            onChange={handleChange}
          />
        </>
      )}

      <ColorPicker
        label="Widget Achtergrondkleur"
        name="widgetBackgroundColor"
        value={appearanceData.widgetBackgroundColor}
        onChange={handleChange}
      />
      <ColorPicker
        label="Widget Tekstkleur"
        name="widgetTextColor"
        value={appearanceData.widgetTextColor}
        onChange={handleChange}
      />

      <ColorPicker
        label="Tekstkleur"
        name="textColor"
        value={appearanceData.textColor}
        onChange={handleChange}
      />
      <ColorPicker
        label="Containerkleur"
        name="containerColor"
        value={appearanceData.containerColor}
        onChange={handleChange}
      />

      <ColorPicker
        label="Knopkleur"
        name="buttonColor"
        value={appearanceData.buttonColor}
        onChange={handleChange}
      />
      <ColorPicker
        label="Knoptekst kleur"
        name="buttonTextColor"
        value={appearanceData.buttonTextColor}
        onChange={handleChange}
      />

      {!isIframe && (
        <button
          type="button"
          className="button-style-3"
          onClick={handleSave}
          disabled={!isDirty}
        >
          Opslaan
        </button>
      )}
    </div>
  );
});

export default Colors;


--- FormEditor/FormSettings/Fonts/FontSelector.js ---
// src/components/FormSettings/FontCategorySelector.jsx

import React from 'react';
import { fontWeights } from './fontsConfig';
import './css/fonts.css';

const FontCategorySelector = ({
  categoryKey,
  label,
  fontsState,
  defaultFonts,
  handleFontSelect,
  handleWeightSelect,
  sansSerifFonts,
  serifFonts,
  fontLabels,
}) => {
  const selectedFont = fontsState[categoryKey]?.font || defaultFonts[categoryKey].font;
  const selectedWeight = fontsState[categoryKey]?.weight || defaultFonts[categoryKey].weight;

  const availableWeights = fontWeights[selectedFont] || ['400'];

  return (
    <div className="form-group">
      <label>{label}:</label>
      <div className="selectors-container">
        <div className="font-selector">
          <select
            value={selectedFont}
            onChange={(e) => handleFontSelect(categoryKey, e.target.value)}
          >
            <optgroup label="Modern">
              {sansSerifFonts.map((font) => (
                <option key={font} value={font}>
                  {font} {fontLabels[font] || ''}
                </option>
              ))}
            </optgroup>
            <optgroup label="Klassiek">
              {serifFonts.map((font) => (
                <option key={font} value={font}>
                  {font}
                </option>
              ))}
            </optgroup>
          </select>
        </div>
        <div className="weight-selector">
          <select
            value={selectedWeight}
            onChange={(e) => handleWeightSelect(categoryKey, e.target.value)}
          >
            {availableWeights.map((weight) => (
              <option key={weight} value={weight}>
                {weight}
              </option>
            ))}
          </select>
        </div>
      </div>
      <div
        className="font-preview"
        style={{ fontFamily: `'${selectedFont}', sans-serif`, fontWeight: selectedWeight }}
      >
        Voorbeeld tekst in {selectedFont} ({selectedWeight})
      </div>
    </div>
  );
};

export default FontCategorySelector;


--- FormEditor/FormSettings/Fonts/css/fonts.css ---
.form-settings-page .font-preview {
	margin-top: 20px;
	padding: 10px;
	border: 1px solid #ccc;
	min-height: 50px;
	display: flex;
	align-items: center;
	justify-content: center;
	background-color: #f9f9f9;
  }

 .weight-selector {
	margin-left: 10px;
	width: 100%;
 }

.form-group {
	margin-bottom: 20px;
  }
  
  .selectors-container {
	display: flex;
	width: 100%;
	margin-bottom: 10px;
  }
  
  .font-selector,
  .weight-selector {
	flex: 1;
  }

--- FormEditor/FormSettings/Fonts/fontsConfig.js ---
// src/components/FormSettings/fontsList.js

export const serifFonts = [
	'Merriweather',
	'Playfair Display',
	'Lora',
	'Bitter',
	'Arvo',
	'Slabo 27px',
  ];
  
  export const sansSerifFonts = [
	'Poppins',
	'Roboto',
	'Open Sans',
	'Lato',
	'Montserrat',
	'Nunito',
	'Raleway',
	'Oswald',
	'Ubuntu',
	'Noto Sans',
	'Rubik',
	'PT Sans',
	'Work Sans',
	'Inter',
	'Cabin',
	'Nunito Sans',
	'Mukta',
	'Fira Sans',
	'Josefin Sans',
	'Quicksand',
	'Anton',
	'Bebas Neue',
	'Comfortaa',
	'Karla',
	'Mulish',
	'Righteous',
	'Roboto Condensed',
	'Source Sans Pro',
  ];
  
  // Map each font to its available weights
  export const fontWeights = {
	'Poppins': ['100', '200', '300', '400', '500', '600', '700', '800', '900'],
	'Roboto': ['100', '300', '400', '500', '700', '900'],
	'Open Sans': ['300', '400', '600', '700', '800'],
	'Lato': ['100', '300', '400', '700', '900'],
	'Montserrat': ['100', '200', '300', '400', '500', '600', '700', '800', '900'],
	'Nunito': ['200', '300', '400', '600', '700', '800', '900'],
	'Raleway': ['100', '200', '300', '400', '500', '600', '700', '800', '900'],
	'Oswald': ['200', '300', '400', '500', '600', '700'],
	'Ubuntu': ['300', '400', '500', '700'],
	'Noto Sans': ['400', '700'],
	'Rubik': ['300', '400', '500', '700', '900'],
	'PT Sans': ['400', '700'],
	'Work Sans': ['100', '200', '300', '400', '500', '600', '700', '800', '900'],
	'Inter': ['100', '200', '300', '400', '500', '600', '700', '800', '900'],
	'Cabin': ['400', '500', '600', '700'],
	'Nunito Sans': ['200', '300', '400', '600', '700', '800', '900'],
	'Mukta': ['200', '300', '400', '500', '600', '700', '800'],
	'Fira Sans': ['100', '200', '300', '400', '500', '600', '700', '800', '900'],
	'Josefin Sans': ['100', '200', '300', '400', '600', '700'],
	'Quicksand': ['300', '400', '500', '600', '700'],
	'Anton': ['400'],
	'Bebas Neue': ['400'],
	'Comfortaa': ['300', '400'],
	'Karla': ['200', '300', '400', '500', '600', '700'],
	'Mulish': ['200', '300', '400', '500', '600', '700', '800', '900'],
	'Righteous': ['400'],
	'Roboto Condensed': ['300', '400', '700'],
	'Source Sans Pro': ['200', '300', '400', '600', '700', '900'],
	// Serif fonts
	'Merriweather': ['300', '400', '700', '900'],
	'Playfair Display': ['400', '500', '600', '700', '800', '900'],
	'Lora': ['400', '500', '600', '700'],
	'Bitter': ['400', '500', '600', '700'],
	'Arvo': ['400', '700'],
	'Slabo 27px': ['400'],
  };
  

--- FormEditor/FormSettings/Fonts/index.js ---
// src/components/FormSettings/Fonts.jsx

import React, { useState, useEffect, forwardRef, useImperativeHandle, useRef, useMemo } from 'react';
import useApi from '../../../../Hooks/useApi';
import useNotification from '../../../../Components/Notification/index';
import { sansSerifFonts, serifFonts, fontWeights } from './fontsConfig';
import FontCategorySelector from './FontSelector';
import useDynamicFontLoader from '../../../../Hooks/useFontLoader';
import './css/fonts.css';

const Fonts = forwardRef((props, ref) => {
  const defaultFonts = {
    titleFont: { font: 'Poppins', weight: '400' },
    subtitleFont: { font: 'Poppins', weight: '400' },
    labelFont: { font: 'Poppins', weight: '400' },
    buttonFont: { font: 'Poppins', weight: '400' },
  };

  const resetFonts = defaultFonts;

  const [fontsState, setFontsState] = useState(defaultFonts);
  const [initialFontsState, setInitialFontsState] = useState(defaultFonts);
  const { triggerNotification, NotificationComponent } = useNotification();
  const api = useApi();

  const isIframe = typeof window !== 'undefined' && window.isIframe;

  const saveTimeoutRef = useRef(null);
  const expiryTimeRef = useRef(null);

  const fontCategories = [
    { key: 'titleFont', label: 'Titel' },
    { key: 'subtitleFont', label: 'Subtitel' },
    { key: 'labelFont', label: 'Tekst' },
    { key: 'buttonFont', label: 'Knoppen' },
  ];

  const fontLabels = {
    Montserrat: '(populair)',
    Comfortaa: '(aanbevolen)',
  };

  useEffect(() => {
    const fetchFonts = async () => {
      try {
        const endpoint = `${window.baseDomain}api/fonts/`;
        console.log("Fonts GET");
        const response = await api.get(endpoint);

        if (response && Object.keys(response).length > 0) {
          const fetchedFonts = response;
          const transformedFonts = {};

          for (const key of Object.keys(fetchedFonts)) {
            const fontValue = fetchedFonts[key];
            if (typeof fontValue === 'string') {
              transformedFonts[key] = { font: fontValue, weight: '400' };
            } else if (fontValue && typeof fontValue === 'object') {
              transformedFonts[key] = fontValue;
            } else {
              transformedFonts[key] = defaultFonts[key];
            }
          }
          setFontsState(transformedFonts);
          setInitialFontsState(transformedFonts);
        } else {
          setFontsState(defaultFonts);
          setInitialFontsState(defaultFonts);
        }
      } catch (error) {
        console.error('Error fetching fonts:', error);
        triggerNotification('Fout bij het ophalen van lettertypes.', 'error');
        setFontsState(defaultFonts);
        setInitialFontsState(defaultFonts);
      }
    };

    fetchFonts();
  }, [api]);

  useDynamicFontLoader(fontsState);

  const handleFontSelect = (categoryKey, font) => {
    const availableWeights = fontWeights[font] || ['400'];
    const currentWeight = fontsState[categoryKey]?.weight || '400';
    const newWeight = availableWeights.includes(currentWeight) ? currentWeight : availableWeights[0];

    setFontsState((prev) => ({
      ...prev,
      [categoryKey]: { font: font, weight: newWeight },
    }));
  };

  const handleWeightSelect = (categoryKey, weight) => {
    setFontsState((prev) => ({
      ...prev,
      [categoryKey]: { ...prev[categoryKey], weight },
    }));
  };

  const handleSave = async () => {
    try {
      const endpoint = `${window.baseDomain}api/fonts/`;
      await api.put(endpoint, fontsState);
      triggerNotification('Lettertypes aangepast', 'success');
      setInitialFontsState(fontsState);
    } catch (error) {
      console.error('Error saving fonts:', error);
      const errorCode = error.response?.status || 'unknown';
      triggerNotification(`Fout bij opslaan. Code: ${errorCode}`, 'error');
      throw error; // Re-throw error to handle in parent
    }
  };

  const handleReset = async () => {
    try {
      const endpoint = `${window.baseDomain}api/fonts/`;
      await api.put(endpoint, resetFonts);
      setFontsState(resetFonts);
      triggerNotification('Lettertypes gereset naar standaard', 'success');
      setInitialFontsState(resetFonts);
    } catch (error) {
      console.error('Error resetting fonts:', error);
      const errorCode = error.response?.status || 'unknown';
      triggerNotification(`Fout bij resetten. Code: ${errorCode}`, 'error');
    }
  };

  const isDirty = useMemo(
    () => JSON.stringify(fontsState) !== JSON.stringify(initialFontsState),
    [fontsState, initialFontsState]
  );

  useImperativeHandle(ref, () => ({
    isDirty,
    handleSave,
  }), [isDirty, handleSave]);

  useEffect(() => {
    if (isIframe && isDirty) {
      const currentTime = Date.now();
      if (saveTimeoutRef.current) {
        // Timer is running
        // Increase expiryTime by 2000 ms
        expiryTimeRef.current += 2000;
      } else {
        // No timer running
        expiryTimeRef.current = currentTime + 5000; // 5 seconds from now
      }

      const delay = expiryTimeRef.current - currentTime;

      // Clear existing timer
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }

      // Start new timer
      saveTimeoutRef.current = setTimeout(async () => {
        try {
          await handleSave();
        } catch (error) {
          // Handle error if needed
        }
        saveTimeoutRef.current = null;
        expiryTimeRef.current = null;
      }, delay);
    }

    // Clean up on unmount
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
        saveTimeoutRef.current = null;
        expiryTimeRef.current = null;
      }
    };
  }, [fontsState, isIframe, isDirty, handleSave]);

  return (
    <div className="fonts-container">
      <NotificationComponent />
      {fontCategories.map(({ key, label }) => (
        <FontCategorySelector
          key={key}
          categoryKey={key}
          label={label}
          fontsState={fontsState}
          defaultFonts={defaultFonts}
          handleFontSelect={handleFontSelect}
          handleWeightSelect={handleWeightSelect}
          sansSerifFonts={sansSerifFonts}
          serifFonts={serifFonts}
          fontLabels={fontLabels}
        />
      ))}

      {!isIframe && (
        <>
          <button type="button" className="secondary-button-style-3" onClick={handleReset}>
            Reset naar Standaard
          </button>
          <button type="submit" className="button-style-3" onClick={handleSave} disabled={!isDirty}>
            Opslaan
          </button>
        </>
      )}
    </div>
  );
});

export default Fonts;


--- FormEditor/FormSettings/Settings/AlignmentSelector.js ---
// src/components/FormSettings/AlignmentSelector.jsx

import React from 'react';
import { FaSquareFull, FaColumns, FaImage } from 'react-icons/fa';
import './css/alignmentSelector.css';

const AlignmentSelector = ({ alignment, setAlignment }) => {
  const options = [
    {
      key: 'fullScreenColor',
      label: 'Volledig Scherm Kleur',
      icon: <FaSquareFull size={48} />,
    },
    {
      key: 'halfColorPicture',
      label: '50/50 Kleur en Banner',
      icon: <FaColumns size={48} />,
    },
    {
      key: 'fullScreenPicture',
      label: 'Enkel Bannerfoto',
      icon: <FaImage size={48} />,
    },
  ];

  const handleSelect = (key) => {
    setAlignment(key);
  };

  return (
    <div className="alignment-selector">
      <label>Indeling:</label>
      <div className="alignment-options">
        {options.map((option) => (
          <div
            key={option.key}
            className={`alignment-option ${
              alignment === option.key ? 'selected' : ''
            }`}
            onClick={() => handleSelect(option.key)}
          >
            <div className="icon-container">{option.icon}</div>
            <div className="option-label">{option.label}</div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default AlignmentSelector;


--- FormEditor/FormSettings/Settings/BackgroundBlurSelector.js ---
// src/components/FormSettings/BackgroundBlurSelector.jsx

import React from 'react';
import { FaCamera, FaMagic } from 'react-icons/fa';
import './css/backgroundBlur.css'; // Create a new CSS file
import PropTypes from 'prop-types';

const BackgroundBlurSelector = ({ backgroundBlur, setBackgroundBlur }) => {
  const options = [
    {
      key: 'sharpPicture',
      label: 'Scherpe Foto',
      icon: <FaCamera size={48} />,
    },
    {
      key: 'blurBackground',
      label: 'Blur Achtergrond',
      icon: <FaMagic size={48} />,
    },
  ];

  const handleSelect = (key) => {
    setBackgroundBlur(key);
  };

  return (
    <div className="background-blur-selector">
      <label>Achtergrond Blur:</label>
      <div className="background-blur-options">
        {options.map((option) => (
          <div
            key={option.key}
            className={`background-blur-option ${
              backgroundBlur === option.key ? 'selected' : ''
            }`}
            onClick={() => handleSelect(option.key)}
          >
            <div className="icon-container">{option.icon}</div>
            <div className="option-label">{option.label}</div>
          </div>
        ))}
      </div>
    </div>
  );
};

BackgroundBlurSelector.propTypes = {
  backgroundBlur: PropTypes.string.isRequired,
  setBackgroundBlur: PropTypes.func.isRequired,
};

export default BackgroundBlurSelector;


--- FormEditor/FormSettings/Settings/SettingsForm.js ---
// src/components/FormSettings/SettingsForm.jsx

import React from 'react';

const SettingsForm = ({ formData, handleChange, handleBlur }) => {
  return (
    <>
      <div className="form-group">
        <label htmlFor="pageTitle">Titel:</label>
        <input
          type="text"
          id="pageTitle"
          name="pageTitle"
          value={formData.pageTitle}
          onChange={handleChange}
          onBlur={handleBlur}
          required
          placeholder="Voer de paginatitel in"
        />
      </div>

      <div className="form-group">
        <label htmlFor="generalNotification">Mededeling:</label>
        <textarea
          id="generalNotification"
          name="generalNotification"
          value={formData.generalNotification}
          onChange={handleChange}
          placeholder="Voer een algemene mededeling in"
        ></textarea>
      </div>
    </>
  );
};

export default SettingsForm;


--- FormEditor/FormSettings/Settings/ThemePreview.js ---
// src/components/FormSettings/ThemePreview.jsx

import React, { useState } from 'react';
import ThemeSelectorModal from '../../Theme/index.js';
import './css/theme.css'

const ThemePreview = ({ selectedTheme, setSelectedTheme, triggerNotification }) => {
  const [showThemeModal, setShowThemeModal] = useState(false);

  return (
    <>
      <div className="form-group">
        <label>Banner:</label>
        {selectedTheme ? (
          <div
            className="theme-preview clickable"
            onClick={() => setShowThemeModal(true)}
            style={{ cursor: 'pointer' }}
            title="Klik om het thema te wijzigen"
          >
            <div className="theme-preview-content">

              <div className="theme-preview-right">
                <img src={selectedTheme.image} alt={selectedTheme.title} />
              </div>
            </div>
            <div className="theme-preview-title">{selectedTheme.title}</div>
          </div>
        ) : (
          <p>Geen banner geselecteerd</p>
        )}
      </div>

      {showThemeModal && (
        <ThemeSelectorModal
          onClose={() => setShowThemeModal(false)}
          onSuccess={(theme) => {
            setSelectedTheme(theme);
            triggerNotification('Thema aangepast', 'success');
          }}
        />
      )}
    </>
  );
};

export default ThemePreview;


--- FormEditor/FormSettings/Settings/css/alignmentSelector.css ---
/* src/components/FormSettings/css/alignmentSelector.css */

.form-settings-page .alignment-selector {
	margin-bottom: 20px;
  }
  
  .form-settings-page .alignment-selector label {
	display: block;
	font-weight: 500;
  }
  
  .form-settings-page .alignment-options {
	display: flex;
	width: 100%;
  }
  
  .form-settings-page .alignment-option {
	flex: 1;
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	padding: 20px;
	margin: 5px;
	border: 2px solid #ccc;
	background-color: white;
	border-radius: 5px;
	cursor: pointer;
	transition: border-color 0.3s;
	text-align: center;
  }
  
  .form-settings-page .alignment-option.selected {
	border-color: var(--color-blue);
  }
  
  .form-settings-page .icon-container {
	margin-bottom: 10px;
  }
  
  .form-settings-page .option-label {
	font-size: 14px;
  }
  

--- FormEditor/FormSettings/Settings/css/backgroundBlur.css ---
/* src/components/FormSettings/css/backgroundBlurSelector.css */

.form-settings-page .background-blur-selector {
	margin-bottom: 20px;
  }
  
  .form-settings-page .background-blur-selector label {
	display: block;
	font-weight: 500;
  }
  
  .form-settings-page .background-blur-options {
	display: flex;
	width: 100%;
  }
  
  .form-settings-page .background-blur-option {
	flex: 1;
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	padding: 20px;
	margin: 5px;
	border: 2px solid #ccc;
	background-color: white;
	border-radius: 5px;
	cursor: pointer;
	transition: border-color 0.3s;
	text-align: center;
  }
  
  .form-settings-page .background-blur-option.selected {
	border-color: var(--color-blue);
  }
  
  .form-settings-page .icon-container {
	margin-bottom: 10px;
  }
  
  .form-settings-page .option-label {
	font-size: 14px;
  }
  

--- FormEditor/FormSettings/Settings/css/theme.css ---
.form-settings-page .theme-preview-content {
	display: flex;
	height: 100px;
	border-radius: 10px 10px 0px 0px;
	overflow: hidden;
  }
  
  .form-settings-page .theme-preview-left,
  .form-settings-page .theme-preview-right {
	width: 100%;
	display: flex;
	align-items: center;
	justify-content: center;
  }
  
  .form-settings-page .theme-preview-left {
	background-color: currentColor;
  }
  
  .form-settings-page .theme-preview-right img {
	width: 100%;
	height: 100%;
	object-fit: cover;
  }
  
  .form-settings-page .theme-preview-title {
	text-align: center;
	padding: 12px;
	font-size: 16px;
	font-weight: 600;
	color: #333;
	width: 100%;
	box-sizing: border-box;
  }

  .form-settings-page .theme-preview {
	display: flex;
	flex-direction: column;
	border-radius: 8px;
	background: white;
	box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
	transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

--- FormEditor/FormSettings/Settings/index.js ---
// src/components/FormSettings/Settings.jsx

import React, { useState, useEffect, forwardRef, useImperativeHandle, useMemo, useCallback, useRef } from 'react';
import useNotification from '../../../../Components/Notification/index.js';
import useApi from '../../../../Hooks/useApi.js';
import SettingsForm from './SettingsForm.js';
import ThemePreview from './ThemePreview.js';
import AlignmentSelector from './AlignmentSelector.js';
import BackgroundBlurSelector from './BackgroundBlurSelector.js';

const Settings = forwardRef((props, ref) => {
  const defaultSettings = {
    pageTitle: 'Reserveer Nu',
    generalNotification: '',
    alignment: 'fullScreenPicture', // Default alignment
    backgroundBlur: 'blurBackground', // Default background blur
  };

  const [formData, setFormData] = useState(defaultSettings);
  const [initialFormData, setInitialFormData] = useState(defaultSettings);
  const [selectedTheme, setSelectedTheme] = useState(null);
  const { triggerNotification, NotificationComponent } = useNotification();
  const api = useApi();

  const isIframe = typeof window !== 'undefined' && window.isIframe;

  const saveTimeoutRef = useRef(null);
  const expiryTimeRef = useRef(null);

  useEffect(() => {
    const fetchSettings = async () => {
      try {
        console.log("Settings GET");
        const settingsResponse = await api.get(`${window.baseDomain}api/settings/`);
        if (settingsResponse) {
          const data = settingsResponse;
          const newFormData = {
            pageTitle: data.pageTitle || defaultSettings.pageTitle,
            generalNotification: data.generalNotification || '',
            alignment: data.alignment || defaultSettings.alignment,
            backgroundBlur: data.backgroundBlur || defaultSettings.backgroundBlur, // Added line
          };
          setFormData(newFormData);
          setInitialFormData(newFormData);
        }
      } catch (error) {
        console.error('Error fetching settings:', error);
        setFormData(defaultSettings);
        setInitialFormData(defaultSettings);
      }
    };

    const fetchTheme = async () => {
      try {
        console.log("Theme GET");
        const themeResponse = await api.get(`${window.baseDomain}api/theme/`);
        setSelectedTheme(themeResponse);
      } catch (error) {
        console.error('Error fetching theme:', error);
      }
    };

    fetchSettings();
    fetchTheme();
  }, [api]);

  const handleChange = useCallback((e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  }, []);

  const setAlignment = useCallback((alignmentValue) => {
    setFormData((prevData) => ({
      ...prevData,
      alignment: alignmentValue,
    }));
  }, []);

  const handleSave = useCallback(async () => {
    try {
      await api.put(`${window.baseDomain}api/settings/`, formData);
      triggerNotification('Instellingen aangepast', 'success');
      setInitialFormData(formData);
    } catch (error) {
      console.error('Error saving settings:', error);
      const errorCode = error.response?.status || 'unknown';
      triggerNotification(`Fout bij opslaan. Code: ${errorCode}`, 'error');
      throw error; // Re-throw the error to handle it in the parent
    }
  }, [api, formData, triggerNotification]);

  const handleBlur = useCallback((e) => {
    const { name, value } = e.target;
    if (name === 'pageTitle' && value.trim() === '') {
      setFormData((prevData) => ({
        ...prevData,
        pageTitle: 'Reserveer Nu',
      }));
    }
  }, []);

  const isDirty = useMemo(
    () => JSON.stringify(formData) !== JSON.stringify(initialFormData),
    [formData, initialFormData]
  );

  useImperativeHandle(
    ref,
    () => ({
      isDirty,
      handleSave,
    }),
    [isDirty, handleSave]
  );

  useEffect(() => {
    if (isIframe && isDirty) {
      const currentTime = Date.now();
      if (saveTimeoutRef.current) {
        // Timer is running
        // Increase expiryTime by 2000 ms
        expiryTimeRef.current += 3000;
      } else {
        // No timer running
        expiryTimeRef.current = currentTime + 1500; // 5 seconds from now
      }

      const delay = expiryTimeRef.current - currentTime;

      // Clear existing timer
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }

      // Start new timer
      saveTimeoutRef.current = setTimeout(async () => {
        try {
          await handleSave();
        } catch (error) {
          // Handle error if needed
        }
        saveTimeoutRef.current = null;
        expiryTimeRef.current = null;
      }, delay);
    }

    // Clean up on unmount
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
        saveTimeoutRef.current = null;
        expiryTimeRef.current = null;
      }
    };
  }, [formData, isIframe, isDirty, handleSave]);

  return (
    <div>
      <NotificationComponent />

      <SettingsForm
        formData={formData}
        handleChange={handleChange}
        handleBlur={handleBlur}
      />

      <AlignmentSelector
        alignment={formData.alignment}
        setAlignment={setAlignment}
      />

      <BackgroundBlurSelector
        backgroundBlur={formData.backgroundBlur}
        setBackgroundBlur={(value) =>
          setFormData((prevData) => ({ ...prevData, backgroundBlur: value }))
        }
      />

      {/* Conditionally render ThemePreview */}
      {formData.alignment !== 'fullScreenColor' && (
        <ThemePreview
          selectedTheme={selectedTheme}
          setSelectedTheme={setSelectedTheme}
          triggerNotification={triggerNotification}
        />
      )}

      {!isIframe && (
        <button
          type="button"
          className="button-style-3"
          onClick={handleSave}
          disabled={!isDirty}
        >
          Opslaan
        </button>
      )}
    </div>
  );
});

export default Settings;


--- FormEditor/FormSettings/SettingsTabs.js ---
// src/components/FormSettings/SettingsTabs.jsx

import React, { useState, useRef } from 'react';
import { motion } from 'framer-motion';
import Settings from './Settings/index.js';
import Colors from './Colors/index.js';
import Fonts from './Fonts/index.js'; 
import './css/settingsTabs.css';
import './css/formSettings.css';
import './css/mobile.css';

const SettingsTabs = () => {
  const [activeTab, setActiveTab] = useState('formSettings');
  const [activeTitle, setActiveTitle] = useState("Algemene Instellingen");
  const [pendingTab, setPendingTab] = useState(null);
  const [showUnsavedChangesModal, setShowUnsavedChangesModal] = useState(false);

  const settingsRef = useRef();
  const colorsRef = useRef();
  const fontsRef = useRef();

  const isIframe = typeof window !== 'undefined' && window.isIframe;

  const tabs = [
    { id: 'formSettings', label: 'Algemeen', title: "Algemene Instellingen" },
    { id: 'appearanceSettings', label: 'Kleuren', title: "Kleuren Instellingen" },
    { id: 'fontsSettings', label: 'Lettertypen', title: "Lettertype Instellingen" },
  ];

  const handleSubmit = (e) => {
    e.preventDefault();
  };

  const handleTabClick = async (tabId, tabTitle) => {
    let currentRef;
    if (activeTab === 'formSettings') {
      currentRef = settingsRef;
    } else if (activeTab === 'appearanceSettings') {
      currentRef = colorsRef;
    } else if (activeTab === 'fontsSettings') {
      currentRef = fontsRef;
    }

    if (currentRef && currentRef.current && currentRef.current.isDirty) {
      if (isIframe) {
        try {
          await currentRef.current.handleSave();
          setActiveTab(tabId);
          setActiveTitle(tabTitle);
        } catch (error) {
          console.error('Error saving before tab switch:', error);
        }
      } else {
        setPendingTab({ id: tabId, title: tabTitle });
        setShowUnsavedChangesModal(true);
      }
    } else {
      setActiveTab(tabId);
      setActiveTitle(tabTitle);
    }
  };

  const handleDiscardChanges = () => {
    setShowUnsavedChangesModal(false);
    if (pendingTab) {
      setActiveTab(pendingTab.id);
      setActiveTitle(pendingTab.title);
      setPendingTab(null);
    }
  };

  const handleCancelTabChange = () => {
    setShowUnsavedChangesModal(false);
    setPendingTab(null);
  };

  return (
    <div className="form-settings-page">
      <form className="form-settings-form central-container-style " onSubmit={handleSubmit}>
        <h2 className="secondary-title">{activeTitle}</h2>

        <div className="settings-tabs">
          <div className="tab-menu">
            <div className="buttons-container">
              {tabs.map((tab) => (
                <motion.button
                  key={tab.id}
                  type="button"
                  className={`tab-button ${activeTab === tab.id ? 'active' : ''}`}
                  onClick={() => handleTabClick(tab.id, tab.title)}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <span className="tab-label">{tab.label}</span>
                  {activeTab === tab.id && (
                    <motion.div
                      layoutId="underline-settings-tabs"
                      className="tab-underline"
                      initial={false}
                      animate={{ opacity: 1 }}
                      transition={{ duration: 0.3 }}
                    />
                  )}
                </motion.button>
              ))}
            </div>
          </div>

          <div className="tab-content">
            {activeTab === 'formSettings' && <Settings ref={settingsRef} />}
            {activeTab === 'appearanceSettings' && <Colors ref={colorsRef} />}
            {activeTab === 'fontsSettings' && <Fonts ref={fontsRef} />}
          </div>
        </div>
      </form>

      {!isIframe && showUnsavedChangesModal && (
        <div className="modal unsaved-changes-modal">
          <div className="modal-content">
            <h2 className='secondary-title'>Wijzigingen Niet Opgeslagen</h2>
            <p>Wilt doorgaan zonder op te slaan?</p>
            <div className="modal-buttons">
              <button type="button" className="button cancel-button cancel" onClick={handleCancelTabChange}>Annuleren</button>
              <button type="button" className="button discard-button red" onClick={handleDiscardChanges}>Doorgaan</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default SettingsTabs;


--- FormEditor/FormSettings/css/formSettings.css ---
/* src/components/FormSettings/css/formSettings.css */

.form-settings-page {
	display: flex;
	justify-content: center;
	padding: 20px;
	background-color: var(--color-bg);
  }
  
  .form-settings-page .form-group {
	display: flex;
	flex-direction: column;
	margin-bottom: 15px;
  }
  
  .form-settings-page .form-group label {
	margin-bottom: 5px;
	font-weight: 500;
	color: var(--color-black);
  }
  
  .form-settings-page .form-group input,
  .form-settings-page .form-group textarea,
  .form-settings-page .form-group select {
	padding: 10px 12px;
	border: 1px solid #cccccc;
	border-radius: 4px;
	font-size: 16px;
	transition: border-color 0.3s ease;
  }
  
  .form-settings-page .form-group input:focus,
  .form-settings-page .form-group textarea:focus,
  .form-settings-page .form-group select:focus {
	border-color: var(--color-blue);
	outline: none;
  }
  
  .form-settings-page .form-group textarea {
	resize: vertical;
	min-height: 80px;
  }



--- FormEditor/FormSettings/css/mobile.css ---
  
  @media (max-width: 900px) {

	.form-settings-page .form-settings-form {
		padding: 0px;
		margin-bottom: 55px;
		margin-left: 0;
	}
  
	.form-settings-page .form-settings-form h2 {
	  font-size: 20px;
	}
	
	.form-settings-page .form-settings-form {
		background-color: transparent;
		box-shadow: none;
		width: 100%;
		max-width: 100vw;
	  }
  }
  

--- FormEditor/FormSettings/css/settingsTabs.css ---
/* src/components/FormSettings/css/settingsTabs.css */

.form-settings-page .settings-tabs {
	width: 100%;
	max-width: 800px;
	margin: 0 auto;
  }
  
  .form-settings-page .tab-menu {
	display: flex;
	justify-content: center;
	margin-bottom: 20px;
  }
  
  .form-settings-page .buttons-container {
	display: flex;
  }

  .form-settings-page .tab-underline {
	border-radius: 5px;
  }
  
  .form-settings-page .tab-button {
	position: relative;
	padding: 10px 20px;
	background: none;
	border: none;
	outline: none;
	cursor: pointer;
	font-size: 16px;
	color: #333;
  }
  
  .form-settings-page .tab-button.active {
	color: var(--color-blue);
  }
  
  .form-settings-page .tab-underline {
	position: absolute;
	bottom: -2px;
	left: 0;
	right: 0;
	height: 2px;
	background-color: var(--color-blue);
  }
  
  .form-settings-page .unsaved-changes-modal {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background-color: rgba(0, 0, 0, 0.5);
	backdrop-filter: blur(10px);
	display: flex;
	justify-content: center;
	align-items: center;
  }
  
  .form-settings-page .modal-content {
	background-color: #fff;
	padding: 30px 20px;
	border-radius: 5px;
	width: 90%;
  }
  
  .form-settings-page .modal-content p {
	font-size: 16px;
	margin-bottom: 30px;
	text-align: center;
  }
  
  .form-settings-page .modal-buttons {
	display: flex;
	justify-content: center;
  }
  
  .form-settings-page .modal-buttons .cancel-button,
  .form-settings-page .modal-buttons .discard-button {
	padding: 10px 20px;
	font-size: 16px;
	cursor: pointer;
	border: none;
	position: relative;
	border-radius: 5px;
  }
  
  .form-settings-page .modal-buttons .cancel-button {
	margin-right: 10px;
  }
  
  
  .form-settings-page .modal-buttons .discard-button {
	margin-left: 20px;
  }
  
  .form-settings-page .modal-buttons .discard-button::after {
	content: '';
	position: absolute;
	top: -4px;
	left: -4px;
	bottom: -4px;
	right: -4px;
	border: 2px solid var(--color-red);
	pointer-events: none;
	border-radius: 10px;
  }
  
  .form-settings-page .modal-buttons .discard-button:hover {
	background-color: #b71c1c;
  }
  

--- FormEditor/FormSettings/index.js ---
// src/components/FormSettings/SettingsTabsWithHeader.jsx

import React from 'react';
import SettingsTabs from './SettingsTabs.js'; // Adjust the path based on your project structure
import { withHeader } from '../../../Components/Structural/Header/index.js'; // Ensure the path is correct

const SettingsTabsWithHeader = () => {
  return <SettingsTabs />;
};

export default withHeader(SettingsTabsWithHeader);


--- FormEditor/Hooks/fetchCanvas.js ---
// src/hooks/useCanvasItems.js

import { useState, useEffect, useRef } from 'react';
import useApi from '../../../Hooks/useApi.js';

const useCanvasItems = (triggerNotification) => {
  const [canvasItems, setCanvasItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const previousCanvasItemsRef = useRef(null);
  const api = useApi();

  useEffect(() => {
    const fetchCanvasItems = async () => {
      try {
        console.log("Fields GET");
        const response = await api.get(`${window.baseDomain}api/fields/`);
        console.log('Raw data received from server:', response);

        let data = response || [];
        let parsedData;

        if (Array.isArray(data)) {
          parsedData = data;
        } else if (typeof data === 'object' && data !== null) {
          parsedData = Object.values(data);
          console.log('Converted object data to array:', parsedData);
        } else {
          parsedData = [];
        }

        // Filter out any empty objects and ensure each item has an 'id'
        parsedData = parsedData.filter(item => item && item.id && !item.id.startsWith('default-'));

        setCanvasItems(parsedData);
        previousCanvasItemsRef.current = parsedData;
        setLoading(false);
      } catch (err) {
        console.error('Error fetching canvas items:', err);
        setError('Error fetching canvas items');
        setLoading(false);
      }
    };

    fetchCanvasItems();
  }, [api]);

  const updateCanvasItemsAPI = (newCanvasItems) => {
    if (JSON.stringify(previousCanvasItemsRef.current) !== JSON.stringify(newCanvasItems)) {
      const updateFields = async () => {
        try {
          console.log('Updating fields on server with:', newCanvasItems);
          await api.put(`${window.baseDomain}api/fields/`, newCanvasItems);
          console.log('Fields updated successfully');
        } catch (err) {
          console.error('Error updating fields:', err);
          const errorCode = err.response?.status || 'unknown';
          if (triggerNotification) {
            triggerNotification(`Fout bij opslaan. Code: ${errorCode}`, 'error');
          }
        }
      };

      updateFields();
      previousCanvasItemsRef.current = newCanvasItems;
    }
  };

  return { canvasItems, setCanvasItems, loading, error, updateCanvasItemsAPI };
};

export default useCanvasItems;


--- FormEditor/LaunchPage/EmailSample/EmailSampleTab.js ---
// src/Pages/FormEditor/LaunchPage/EmailSampleTab.jsx

import React from 'react';
import { FaEnvelopeOpenText } from 'react-icons/fa';
import './css/emailSample.css';

const EmailSampleTab = ({ emailSubject, emailBody, shareMessage, reservationLink }) => {
  return (
    <div className="email-section">
      <div className="email-header">
        <FaEnvelopeOpenText className="email-icon" />
        <h3 className="email-title">Uitnodiging per E-mail</h3>
      </div>

      <p className="email-intro">
        Hieronder vindt u een voorbeeld van een uitnodiging die u per e-mail kunt versturen naar uw klanten. U kunt de tekst aanpassen naar wens.
      </p>

      <div className="email-sample">
        <p>Beste klant,</p>
        <p>
          Wij zijn verheugd om u uit te nodigen voor een reservering bij ons. Via onderstaande link kunt u eenvoudig een afspraak maken op een tijdstip dat voor u het beste uitkomt.
        </p>
        <p>
          <strong>Reserveer nu:</strong>{' '}
          <a href={reservationLink}>{reservationLink}</a>
        </p>
        <p>
          Mocht u vragen hebben, aarzel dan niet om contact met ons op te nemen. We kijken ernaar uit u te verwelkomen!
        </p>
        <p>Met vriendelijke groet,<br />Uw bedrijfsteam</p>
      </div>

      {/* Send Email Button */}
      <a
        href={`mailto:?subject=${encodeURIComponent(
          emailSubject
        )}&body=${encodeURIComponent(emailBody)}`}
        className="email-button"
      >
        E-mail Versturen
      </a>
    </div>
  );
};

export default EmailSampleTab;


--- FormEditor/LaunchPage/EmailSample/css/emailSample.css ---

  .launch-page .email-header {
	display: flex;
	align-items: center;
	margin-bottom: 15px;
  }
  
  .launch-page .email-icon {
	font-size: 24px;
	color: var(--color-blue);
	margin-right: 10px;
  }
  
  .launch-page .email-title {
	font-size: 20px;
	color: var(--color-black);
	margin: 0;
  }
  
  .launch-page .email-intro {
	margin-bottom: 20px;
	font-size: 16px;
	color: var(--color-black);
  }
  
  .launch-page .email-sample {
	background-color: #f8f9fa;
	padding: 20px;
	border: 1px solid #ced4da;
	border-radius: 4px;
	margin-bottom: 20px;
  }
  
  .launch-page .email-sample p {
	margin-bottom: 15px;
	font-size: 16px;
	color: var(--color-black);
  }
  
  .launch-page .email-sample a {
	color: var(--color-blue);
	text-decoration: none;
  }
  
  .launch-page .email-sample a:hover {
	text-decoration: underline;
  }
  
  .launch-page .email-button {
	display: inline-block;
	padding: 12px 20px;
	background-color: #28a745;
	color: #ffffff;
	border-radius: 4px;
	text-decoration: none;
	font-size: 16px;
	transition: background-color 0.3s ease;
  }
  
  .launch-page .email-button:hover {
	background-color: #218838;
  }
  
  .launch-page .email-section {
	margin-bottom: 20px;
  }
  
  .launch-page .email-section p {
	margin-bottom: 15px;
	font-size: 16px;
	color: var(--color-black);
  }
  
  .launch-page .email-button {
	display: inline-block;
	padding: 12px 20px;
	background-color: var(--color-blue);
	color: #ffffff;
	border-radius: 4px;
	text-decoration: none;
	font-size: 16px;
	margin-bottom: 20px;
	transition: background-color 0.3s ease;
  }
  
  .launch-page .email-button:hover {
	background-color: #0056b3;
  }
  
  .launch-page .email-sample-text {
	font-weight: bold;
	margin-bottom: 10px;
  }
  
  .launch-page .email-sample {
	background-color: #f8f9fa;
	padding: 15px;
	border: 1px solid #ced4da;
	border-radius: 4px;
  }
  
  .launch-page .email-sample p {
	margin-bottom: 10px;
  }
  
  .launch-page .email-sample a {
	color: var(--color-blue);
	text-decoration: none;
  }
  
  .launch-page .email-sample a:hover {
	text-decoration: underline;
  }
  

--- FormEditor/LaunchPage/EmbedCode/EmbedCodeTab.js ---
// src/Pages/FormEditor/LaunchPage/EmbedCodeTab.jsx

import React from 'react';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';
import './css/embedCode.css';

const EmbedCodeTab = ({ embedCode }) => {
  return (
    <div className="embed-section">
      <p>
        Kopieer en plak de onderstaande code om de reserveringspagina op
        uw website in te sluiten:
      </p>
      <div className="code-container">
        <SyntaxHighlighter language="html" style={atomDark}>
          {embedCode}
        </SyntaxHighlighter>
        <button
          className="copy-button"
          onClick={() => {
            navigator.clipboard.writeText(embedCode);
            alert('Code gekopieerd naar klembord!');
          }}
        >
          Kopiëren
        </button>
      </div>
    </div>
  );
};

export default EmbedCodeTab;


--- FormEditor/LaunchPage/EmbedCode/css/embedCode.css ---
/* src/Pages/FormEditor/LaunchPage/css/embedCodeTab.css */

  .launch-page .embed-section {
	margin-bottom: 20px;
  }
  
  .launch-page .embed-section p {
	margin-bottom: 15px;
	font-size: 16px;
	color: var(--color-black);
  }
  
  .launch-page .code-container {
	position: relative;
  }
  
  .launch-page .copy-button {
	position: absolute;
	top: 10px;
	right: 10px;
	padding: 6px 12px;
	font-size: 14px;
	background-color: var(--color-blue);
	color: #ffffff;
	border: none;
	border-radius: 4px;
	cursor: pointer;
  }
  
  .launch-page .copy-button:hover {
	background-color: #0056b3;
  }
  

--- FormEditor/LaunchPage/css/launchPage.css ---
/* src/Pages/FormEditor/LaunchPage/css/launchPage.css */

  .launch-page {
	display: flex;
	flex-direction: column;
	align-items: center;
	padding: 20px;
  }
  
  .launch-page .link-section {
	width: 100%;
	margin-bottom: 30px;
  }
  
  .launch-page .link-section label {
	display: block;
	margin-bottom: 5px;
	font-weight: 500;
	color: var(--color-black);
  }
  
  .launch-page .link-input-container {
	position: relative;
	display: flex;
	align-items: center;
  }
  
  .launch-page .link-input-container input {
	flex: 1;
	padding: 10px 12px;
	padding-right: 35px;
	border: 1px solid #cccccc;
	border-radius: 4px;
	font-size: 16px;
	transition: border-color 0.3s ease;
  }
  
  .launch-page .link-input-container input:focus {
	border-color: var(--color-blue);
	outline: none;
  }
  
  .launch-page .link-input-container .link-icon {
	position: absolute;
	right: 10px;
	color: #777777;
	cursor: pointer;
	font-size: 18px;
	background-color: transparent;
	border: none;
  }
  
  .launch-page .link-input-container .link-icon:hover {
	color: #0056b3;
  }
  
  .launch-page .tab-menu {
	display: flex;
	justify-content: center;
	margin-bottom: 20px;
  }
  
  .launch-page .buttons-container {
	display: flex;
	gap: 40px;
	position: relative;
  }
  
  .launch-page .tab-button {
	position: relative;
	background: none;
	border: none;
	color: #777777;
	font-size: 16px;
	cursor: pointer;
	padding: 8px 0;
	transition: color 0.3s ease;
	text-decoration: none;
  }
  
  .launch-page .tab-button:hover {
	color: #0056b3;
  }
  
  .launch-page .tab-button.active {
	color: var(--color-blue);
  }
  
  .launch-page .tab-label {
	position: relative;
  }
  
  .launch-page .tab-underline {
	position: absolute;
	bottom: -5px;
	left: 0;
	right: 0;
	height: 3px;
	background-color: var(--color-blue);
	border-radius: 2px;
  }
  
  .launch-page .embed-section {
	margin-bottom: 20px;
  }
  
  .launch-page .embed-section p {
	margin-bottom: 15px;
	font-size: 16px;
	color: var(--color-black);
  }
  
  .launch-page .code-container {
	position: relative;
  }
  
  .launch-page .code-container pre {
	background-color: #f8f9fa;
	padding: 15px;
	border: 1px solid #ced4da;
	border-radius: 4px;
  }
  
  .launch-page .code-container code {
	font-family: monospace;
	font-size: 14px;
  }
  
  .launch-page .copy-button {
	position: absolute;
	top: 10px;
	right: 10px;
	padding: 6px 12px;
	font-size: 14px;
	background-color: var(--color-blue);
	color: #ffffff;
	border: none;
	border-radius: 4px;
	cursor: pointer;
  }
  
  .launch-page .copy-button:hover {
	background-color: #0056b3;
  }
  


--- FormEditor/LaunchPage/css/mobile.css ---


@media (max-width: 900px) {
	.launch-page .email-header {
	  flex-direction: column;
	  align-items: flex-start;
	}

	.launch-page .tab-button {
	  font-size: 14px;
	  padding: 6px 0;
	}

	.launch-page .launch-page-form {
		background-color: var(--color-bg);
		padding: 20px;
		margin-left: 0px;
		padding-right: 50px;
		padding-bottom: 0;
		border-radius: 8px;
		box-shadow: none;
		width: 100vw;
	  }
  }
  

--- FormEditor/LaunchPage/index.js ---
// src/Pages/FormEditor/LaunchPage/index.jsx

import React, { useState } from 'react';
import { withHeader } from '../../../Components/Structural/Header/index.js';
import { FaExternalLinkAlt } from 'react-icons/fa';
import { motion } from 'framer-motion';
import EmbedCodeTab from './EmbedCode/EmbedCodeTab.js';
import EmailSampleTab from './EmailSample/EmailSampleTab.js';
import './css/launchPage.css';
import './css/mobile.css';

const LaunchPage = () => {
  const [activeTab, setActiveTab] = useState('embedCode');
  const reservationLink = 'https://book.reservaties.net/';
  const shareMessage = 'Bekijk onze reserveringspagina!';
  const emailSubject = 'Uitnodiging voor Reservering';
  const emailBody = `${shareMessage} ${reservationLink}`;
  const embedCode = `<iframe src="${reservationLink}" width="600" height="800" frameborder="0"></iframe>`;

  const tabs = [
    { id: 'embedCode', label: 'Insluitcode' },
    { id: 'emailSample', label: 'E-mailvoorbeeld' },
  ];

  return (
    <div className="launch-page">

      <div className="launch-page-form central-container-style">
        <h2 className="secondary-title">Uw Reserveringspagina</h2>

        <div className="link-section">
          <label htmlFor="reservationLink">Reservatielink:</label>
          <div className="link-input-container">
            <input
              type="text"
              id="reservationLink"
              value={reservationLink}
              readOnly
            />
            <a
              href={reservationLink}
              target="_blank"
              rel="noopener noreferrer"
              className="link-icon"
            >
              <FaExternalLinkAlt />
            </a>
          </div>
        </div>

        <div className="tab-menu">
          <div className="buttons-container">
            {tabs.map((tab) => (
              <motion.button
                key={tab.id}
                className={`tab-button ${activeTab === tab.id ? 'active' : ''}`}
                onClick={() => setActiveTab(tab.id)}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <span className="tab-label">{tab.label}</span>
                {activeTab === tab.id && (
                  <motion.div
                    layoutId="underline-launch-page"
                    className="tab-underline"
                    initial={false}
                    animate={{ opacity: 1 }}
                    transition={{ duration: 0.3 }}
                  />
                )}
              </motion.button>
            ))}
          </div>
        </div>

        {activeTab === 'embedCode' && (
          <EmbedCodeTab embedCode={embedCode} />
        )}

        {activeTab === 'emailSample' && (
          <EmailSampleTab
            emailSubject={emailSubject}
            emailBody={emailBody}
            shareMessage={shareMessage}
            reservationLink={reservationLink}
          />
        )}
      </div>
    </div>
  );
};

export default withHeader(LaunchPage);


--- FormEditor/Theme/Square.js ---
// ThemeSquare.js
import React from 'react';
import './css/themeSquare.css';

const ThemeSquare = ({ theme, onClick }) => {
  return (
    <div className="theme-square" onClick={onClick}>
      <div className="theme-square-content">
        <div className="theme-square-right">
          <img src={theme.image} alt={theme.title} />
        </div>
      </div>
      <div className="theme-square-title">{theme.title}</div>
    </div>
  );
};

export default ThemeSquare;


--- FormEditor/Theme/css/animations.css ---
@keyframes modalFadeIn {
	from {
	  opacity: 0;
	  transform: translateY(20px);
	}
	to {
	  opacity: 1;
	  transform: translateY(0);
	}
  }


--- FormEditor/Theme/css/mobile.css ---
@media (max-width: 900px) {
	.theme-page .theme-grid {
	  flex-direction: column;
	  align-items: center;
	}
  }

  @media (max-width: 900px) {
	.theme-page .add-theme-square {
	  width: 100%;
	}
  }
  
  @media (max-width: 900px) {
	.theme-page .theme-square {
	  width: 100%;
	}
  }
  

--- FormEditor/Theme/css/themeSelectorModal.css ---
/* themeSelectorModal.css */

.theme-page .theme-selector-modal {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	display: flex;
	align-items: center;
	justify-content: center;
	z-index: var(--z-index-modal) !important;
	backdrop-filter: blur(5px);
  }
  
  .theme-page .modal-overlay {
	position: absolute;
	width: 100%;
	height: 100%;
	background: rgba(0, 0, 0, 0.5);
	z-index: 0;
  }
  
  .theme-page .modal-content {
	position: relative;
	background: #fff;
	padding: 30px;
	border-radius: 12px;
	max-width: 800px;
	width: 90%;
	max-height: 80%;
	overflow-y: auto;
	box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
	animation: modalFadeIn 0.3s ease-out;
  }
  
  .theme-page .modal-content h2 {
	margin-bottom: 20px;
	font-size: 24px;
	color: #333;
	text-align: center;
  }
  
  .theme-page .modal-close-button {
	position: absolute;
	top: 15px;
	right: 15px;
	background: transparent;
	border: none;
	font-size: 24px;
	color: #888;
	cursor: pointer;
	transition: color 0.3s ease;
  }
  
  .theme-page .modal-close-button:hover {
	color: #333;
  }
  
  .theme-page .theme-grid {
	display: flex;
	flex-wrap: wrap;
	gap: 20px;
	justify-content: center;
  }
  


--- FormEditor/Theme/css/themeSquare.css ---
/* themeSquare.css */

.theme-page .theme-square {
	width: 180px;
	border-radius: 12px;
	overflow: hidden;
	cursor: pointer;
	transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  .theme-page .theme-square:hover {
	transform: translateY(-5px);
	box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
  }
  
  .theme-page .theme-square-content {
	display: flex;
	height: 180px;
  }
  
  .theme-page .theme-square-left,
  .theme-page .theme-square-right {
	width: 100%;
	display: flex;
	align-items: center;
	justify-content: center;
  }
  
  .theme-page .theme-square-left {
	background-color: currentColor;
  }
  
  .theme-page .theme-square-right img {
	width: 100%;
	height: 100%;
	object-fit: cover;
  }
  
 .theme-page .theme-square-right img {
	width: 100%;
	height: 100%;
	object-fit: cover;
  }
    
  .theme-page .theme-square-title {
	text-align: center;
	padding: 12px;
	background: #fff;
	font-size: 16px;
	font-weight: 600;
	color: #333;
	width: 100%;
	box-sizing: border-box;
  }
  

--- FormEditor/Theme/defaultThemes.js ---
// themeData.js
import image1 from '../../../Assets/themes/small/1.webp';
import image2 from '../../../Assets/themes/small/2.webp';
import image3 from '../../../Assets/themes/small/3.webp';
import image4 from '../../../Assets/themes/small/4.webp';
import image5 from '../../../Assets/themes/small/5.webp';
import image6 from '../../../Assets/themes/small/6.webp';
import image7 from '../../../Assets/themes/small/7.webp';
import image8 from '../../../Assets/themes/small/8.webp';
import image9 from '../../../Assets/themes/small/9.webp';
import image10 from '../../../Assets/themes/small/10.webp';
import image11 from '../../../Assets/themes/small/11.webp';
import image12 from '../../../Assets/themes/small/12.webp';
import image13 from '../../../Assets/themes/small/13.webp';
import image14 from '../../../Assets/themes/small/14.webp';
import image15 from '../../../Assets/themes/small/15.webp';
import image16 from '../../../Assets/themes/small/16.webp';
import image17 from '../../../Assets/themes/small/17.webp';
import image18 from '../../../Assets/themes/small/18.webp';
import image19 from '../../../Assets/themes/small/19.webp';
import image20 from '../../../Assets/themes/small/20.webp';
import image21 from '../../../Assets/themes/small/21.webp';
import image22 from '../../../Assets/themes/small/22.webp';
import image23 from '../../../Assets/themes/small/23.webp';
import image24 from '../../../Assets/themes/small/24.webp';
import image25 from '../../../Assets/themes/small/25.webp';

export const themeImages = {
  image1,
  image2,
  image3,
  image4,
  image5,
  image6,
  image7,
  image8,
  image9,
  image10,
  image11,
  image12,
  image13,
  image14,
  image15,
  image16,
  image17,
  image18,
  image19,
  image20,
  image21,
  image22,
  image23,
  image24,
  image25,
};

export const initialThemes = [
  { id: 9, title: 'Oceaan Bries', color: '#5DADE2', image: themeImages.image9 },
  { id: 23, title: 'Zandstrand', color: '#F0E68C', image: themeImages.image23 },
  { id: 6, title: 'Floraal Oranje', color: '#FF7F50', image: themeImages.image6 },
  { id: 7, title: 'Pastel Dromen', color: '#7D3C98', image: themeImages.image7 },
  { id: 8, title: 'Diep Blauw', color: '#154360', image: themeImages.image8 },
  { id: 20, title: 'Japans Geluk', color: '#F8C8DC', image: themeImages.image20 },
  { id: 13, title: 'Bosfluistering', color: '#229954', image: themeImages.image13 },
  { id: 14, title: 'Gouden Uur', color: '#F4D03F', image: themeImages.image14 },
  { id: 18, title: 'Koraalrif', color: '#FF6F61', image: themeImages.image18 },
  { id: 11, title: 'Lavendel', color: '#AF7AC5', image: themeImages.image11 },
  { id: 3, title: 'Middernacht Blauw', color: '#34495E', image: themeImages.image3 },
  { id: 22, title: 'Hout', color: '#B03A2E', image: themeImages.image22 },
  { id: 4, title: 'Verse Munt', color: '#48C9B0', image: themeImages.image4 },
  { id: 10, title: 'Herfstbladeren', color: '#D35400', image: themeImages.image10 },
  { id: 25, title: 'Romig Beige', color: '#F5CBA7', image: themeImages.image25 },
  { id: 19, title: 'Grijze Heuvels', color: '#7F8C8D', image: themeImages.image19 },
  { id: 17, title: 'Blozend Roze', color: '#F1948A', image: themeImages.image17 },
  { id: 1, title: 'Smaragd Eiland', color: '#1ABC9C', image: themeImages.image1 },
  { id: 16, title: 'Koffie Genot', color: '#6E2C00', image: themeImages.image16 },
  { id: 5, title: 'Zonnebloem', color: '#F1C40F', image: themeImages.image5 },
  { id: 21, title: 'Diep Paars', color: '#4A235A', image: themeImages.image21 },
  { id: 12, title: 'Blauwgroene Twist', color: '#117A65', image: themeImages.image12 },
  { id: 2, title: 'Zonsondergang', color: '#D35400', image: themeImages.image2 },
  { id: 24, title: 'Zachte Perzik', color: '#FAD7A0', image: themeImages.image24 },
  { id: 15, title: 'Koningsblauw', color: '#2E86C1', image: themeImages.image15 },
];



--- FormEditor/Theme/index.js ---
// src/components/Theme/ThemeSelectorModal.jsx

import React, { useState } from 'react';
import ThemeSquare from './Square';
import useApi from '../../../Hooks/useApi'; // Adjust the import path as necessary

import './css/themeSelectorModal.css';
import './css/animations.css';
import './css/mobile.css';

import { initialThemes } from './defaultThemes';

const ThemeSelectorModal = ({ onClose, onSuccess }) => {
  const [themes, setThemes] = useState(initialThemes);
  const [showAddThemeModal, setShowAddThemeModal] = useState(false);
  const api = useApi();

  const handleThemeClick = async (theme) => {
    try {
      await saveThemeToBackend(theme);
      onSuccess(theme);
      onClose();
    } catch (error) {
    }
  };
  const handleAddThemeClick = () => {
    setShowAddThemeModal(true);
  };

  const saveThemeToBackend = async (theme) => {
    const themeData = {
      id: theme.id,
      title: theme.title,
      color: theme.color,
      image: theme.image,
    };

    try {
      await api.put(
        `${window.baseDomain}api/theme/`,
        themeData
      );
    } catch (error) {
      console.error('Error saving theme or updating background color:', error);
      throw error;
    }
  };

  const handleSaveNewTheme = (newTheme) => {
    setThemes([...themes, newTheme]);
    setShowAddThemeModal(false);
  };

  return (
    <div className="theme-page">
      <div className="theme-selector-modal">
        <div className="modal-overlay" onClick={onClose}></div>
        <div className="modal-content">
          <button className="modal-close-button" onClick={onClose}>
            ×
          </button>
          <h2 className="style-title">Kies een Banner</h2>
          <div className="theme-grid">

            {themes.map((theme) => (
              <ThemeSquare
                key={theme.id}
                theme={theme}
                onClick={() => handleThemeClick(theme)}
              />
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ThemeSelectorModal;


--- FormEditor/Utils/responsiveStyles.js ---
// src/utils/responsiveStyles.js

/**
 * Applies or removes responsive CSS classes based on the container's width.
 *
 * @param {React.RefObject} containerRef - The ref to the container element.
 */
export const applyResponsiveStyles = (containerRef) => {
	const container = containerRef.current;
  
	if (container) {
	  const containerWidth = container.offsetWidth;
	  const palette = container.querySelector('.palette');
	  const editorContainer = container.querySelector('.editor-container');
	  const canvas = container.querySelector('.canvas');
  
	  if (containerWidth <= 900) {
		palette?.classList.add('palette-responsive');
		editorContainer?.classList.add('editor-container-responsive');
		canvas?.classList.add('canvas-responsive');
	  } else {
		palette?.classList.remove('palette-responsive');
		editorContainer?.classList.remove('editor-container-responsive');
		canvas?.classList.remove('canvas-responsive');
	  }
	}
  };
  

--- FormEditor/defaultElements.js ---
// src/components/DragAndDropEditor/defaultElements.js

import React from 'react';
import {
  FaFont,
  FaEnvelope,
  FaPhone,
  FaList,
  FaHeading,
  FaKeyboard,
  FaParagraph,
} from 'react-icons/fa';

export const initialBlocks = [
  { id: '1', type: 'title', label: 'Titel', icon: <FaHeading /> },
  { id: '2', type: 'paragraph', label: 'Paragraaf', icon: <FaParagraph /> },
  { id: '3', type: 'input', label: 'Invoerveld', icon: <FaKeyboard /> },
  { id: '4', type: 'select', label: 'Selectievak', icon: <FaList /> },
  { id: '5', type: 'phone', label: 'Telefoon', icon: <FaPhone /> },
  { id: '6', type: 'email', label: 'Email', icon: <FaEnvelope /> },
  { id: '7', type: 'textarea', label: 'Tekstveld', icon: <FaFont /> },
  
];

// Predefined Default Canvas Items: Voornaam, Achternaam, Telefoon, Extra Info / Allergenen
export const defaultCanvasItems = [
  {
    id: 'default-voornaam',
    type: 'input',
    label: 'Voornaam',
    placeholder: 'Uw Voornaam',
    required: true,
  },
  {
    id: 'default-achternaam',
    type: 'input',
    label: 'Achternaam',
    placeholder: 'Uw Achternaam',
    required: true,
  },
  {
    id: 'default-email',
    type: 'input',
    label: 'Email',
    placeholder: 'Uw Eemail',
    required: true,
  },
  {
    id: 'default-telefoon',
    type: 'phone',
    label: 'Telefoon',
    placeholder: 'Uw Telefoonnummer',
    required: true,
  },
  {
    id: 'default-extra-info',
    type: 'textarea',
    label: 'Extra Info / Allergenen',
    placeholder: 'Eventuele extra informatie of allergenen',
    required: false,
  },
];


--- FormEditor/index.js ---
// src/components/DragAndDropEditor/DragAndDropEditor.js

import React, { useState, useEffect, useRef } from 'react';
import { withHeader } from '../../Components/Structural/Header/index.js';
import { FaMagic } from 'react-icons/fa';
import { DragDropContext } from 'react-beautiful-dnd';
import Palette from './DragAndDrop/Palette.js';
import Canvas from './DragAndDrop/Canvas.js';
import ThemeSelectorModal from './Theme/index.js';
import useNotification from '../../Components/Notification/index';
import { initialBlocks, defaultCanvasItems } from './defaultElements.js';

import { applyResponsiveStyles } from './Utils/responsiveStyles.js';
import useCanvasItems from './Hooks/fetchCanvas.js';

const DragAndDropEditor = () => {
  const [blocks] = useState(initialBlocks);
  const [dropPosition, setDropPosition] = useState(null);
  const [showThemeModal, setShowThemeModal] = useState(false);
  const [selectedTheme, setSelectedTheme] = useState(null);
  const formEditingPageRef = useRef(null);

  const { triggerNotification, NotificationComponent } = useNotification();
  const { canvasItems, setCanvasItems, loading, error, updateCanvasItemsAPI } = useCanvasItems(triggerNotification);

  const [allCanvasItems, setAllCanvasItems] = useState([...defaultCanvasItems, ...canvasItems]);

  useEffect(() => {
    setAllCanvasItems([...defaultCanvasItems, ...canvasItems]);
  }, [canvasItems]);

  useEffect(() => {
    const observer = new ResizeObserver(() => {
      applyResponsiveStyles(formEditingPageRef);
    });

    if (formEditingPageRef.current) {
      observer.observe(formEditingPageRef.current);
      applyResponsiveStyles(formEditingPageRef);
    }

    return () => {
      if (formEditingPageRef.current) {
        observer.unobserve(formEditingPageRef.current);
      }
    };
  }, []);

  const handleOnDragEnd = (result) => {
    setDropPosition(null);

    if (!result.destination) return;
    const { source, destination } = result;
    if (source.droppableId === 'Palette' && destination.droppableId === 'Canvas') {
      const item = blocks.find(block => block.id === result.draggableId);
      if (!item) return;

      const newItem = {
        ...item,
        id: `${item.id}-${Date.now()}`,
        placeholder: '',
        required: false,
      };

      const newAllCanvasItems = Array.from(allCanvasItems);
      newAllCanvasItems.splice(destination.index, 0, newItem);
      setAllCanvasItems(newAllCanvasItems);
      updateCanvasItemsAPI(newAllCanvasItems.filter(item => !item.id.startsWith('default-')));
    }
    else if (source.droppableId === 'Canvas' && destination.droppableId === 'Canvas') {
      const newAllCanvasItems = Array.from(allCanvasItems);
      const [movedItem] = newAllCanvasItems.splice(source.index, 1);
      newAllCanvasItems.splice(destination.index, 0, movedItem);
      setAllCanvasItems(newAllCanvasItems);
      updateCanvasItemsAPI(newAllCanvasItems.filter(item => !item.id.startsWith('default-')));
    }
  };

  const handleOnDragUpdate = (update) => {
    const { destination } = update;
    if (!destination) {
      setDropPosition(null);
      return;
    }
    setDropPosition(destination.index);
  };

  const handleDelete = (id) => {
    if (id.startsWith('default-')) return;

    const newCanvasItems = allCanvasItems.filter(item => item.id !== id);
    setAllCanvasItems(newCanvasItems);
    updateCanvasItemsAPI(newCanvasItems.filter(item => !item.id.startsWith('default-')));
  };

  console.log('All Canvas Items before rendering:', allCanvasItems);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  return (
    <div className="form-editing-page" ref={formEditingPageRef}>
      <NotificationComponent />
      <div className="editor-container">
        <DragDropContext onDragEnd={handleOnDragEnd} onDragUpdate={handleOnDragUpdate}>
          <Palette blocks={blocks} />
          <Canvas
            items={allCanvasItems}
            setItems={setAllCanvasItems}
            dropPosition={dropPosition}
            onDelete={handleDelete}
          />
        </DragDropContext>
      </div>
      <button className="button-style-2 themes-button" onClick={() => setShowThemeModal(true)}>
        <FaMagic className="button-style-2-icon icon" />
        Banner Kiezen
      </button>
      {showThemeModal && (
        <ThemeSelectorModal
          onClose={() => setShowThemeModal(false)}
          onSuccess={() => triggerNotification('Thema aangepast', 'success')}
        />
      )}
    </div>
  );
};

export default withHeader(DragAndDropEditor);


--- Giftcard/GiftCard/AddGiftcardSection/ValueSelector.js ---
import React, { useState } from 'react';
import './css/valueSelector.css';

const ValueSelector = ({ value, onChange }) => {
  const predefinedValues = [25, 50, 75, 100];
  const [customValue, setCustomValue] = useState(value || '');

  const handlePredefinedValueClick = (val) => {
    setCustomValue(val);
    onChange({ target: { name: 'value', value: val } });
  };

  const handleSliderChange = (e) => {
    const val = e.target.value;
    setCustomValue(val);
    onChange({ target: { name: 'value', value: val } });
  };

  const handleInputChange = (e) => {
    const val = e.target.value;
    setCustomValue(val);
    onChange({ target: { name: 'value', value: val } });
  };

  return (
    <div className="value-selector">
      <div className="predefined-values">
        {predefinedValues.map((val) => (
          <button
            key={val}
            type="button"
            className={`predefined-value-button ${parseFloat(customValue) === val ? 'active' : ''}`}
            onClick={() => handlePredefinedValueClick(val)}
          >
            €{val}
          </button>
        ))}
      </div>
      <div className="slider-container">
        <input
          type="range"
          min="5"
          max="500"
          step="5"
          value={customValue}
          onChange={handleSliderChange}
          className="slider"
        />
        <input
          type="number"
          name="value"
          value={customValue}
          onChange={handleInputChange}
          className="value-input"
          min="1"
          step="0.01"
        />
      </div>
    </div>
  );
};

export default ValueSelector;


--- Giftcard/GiftCard/AddGiftcardSection/css/addGiftCardSection.css ---
/* src/components/GiftCard/css/addGiftCardSection.css */

.gift-card-page .add-gift-card-section {
	display: flex;
	flex-direction: column;
	gap: 20px;
  }
  
  .gift-card-page .add-gift-card-section__title {
	margin-bottom: 20px;
  }
  
  .gift-card-page .add-gift-card-section__form {
	display: flex;
	flex-direction: column;
	gap: 15px; /* Reduced gap between inputs */
  }
  
  .gift-card-page .form-group {
	display: flex;
	flex-direction: column;
  }
  
  .gift-card-page .name-fields {
	display: flex;
	flex-wrap: nowrap;
	flex-direction: row;
	gap: 10px;
  }
  
  .gift-card-page .name-fields .input-container {
	flex: 1;
	width: 40%;
  }
  
  .gift-card-page .input-container {
	position: relative;
  }
  
  .gift-card-page .input-icon {
	position: absolute;
	top: 50%;
	left: 10px;
	transform: translateY(-50%);
	color: var(--color-gray);
	pointer-events: none;
  }
  
  .gift-card-page .input-container input,
  .gift-card-page .input-container select {
	width: 100%;
	padding: 10px 10px 10px 35px;
	border: 1px solid #ccc;
	border-radius: var(--border-radius);
	font-size: 1rem;
	transition: border-color 0.3s ease;
  }

  .gift-card-page #design {
	height: 46px;
  }
  
  .gift-card-page .input-container input:focus,
  .gift-card-page .input-container select:focus {
	border-color: var(--color-blue);
	outline: none;
  }
  
  .gift-card-page .input-container select {
	appearance: none;
	background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg xmlns='http://www.w3.org/2000/svg' width='4' height='5' viewBox='0 0 4 5'%3E%3Cpath fill='%236c757d' d='M2 0L0 2h4L2 0zM2 5L0 3h4l-2 2z'/%3E%3C/svg%3E");
	background-repeat: no-repeat;
	background-position: right 10px center;
	background-size: 8px 10px;
	cursor: pointer;
  }
  
  .gift-card-page .form-error {
	color: var(--color-red);
	font-size: 0.9rem;
	margin-top: 5px;
	display: flex;
	align-items: center;
	gap: 5px;
  }
  
  .gift-card-page .form-success {
	color: var(--color-green);
	font-size: 0.9rem;
	margin-top: 5px;
	display: flex;
	align-items: center;
	gap: 5px;
  }

  @media (max-width: 768px) {
	.gift-card-page .name-fields {
	  flex-direction: column;
	}
  
	.gift-card-page .add-gift-card-section__form {
	  gap: 10px;
	}
  }
  

--- Giftcard/GiftCard/AddGiftcardSection/css/valueSelector.css ---
.gift-card-page .value-selector {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  .gift-card-page .predefined-values {
	display: flex;
	gap: 10px;
  }
  
  .gift-card-page .predefined-value-button {
	flex: 1;
	padding: 12px;
	border: 1px solid #ccc;
	border-radius: var(--border-radius);
	background-color: var(--color-white);
	cursor: pointer;
	font-size: 1rem;
	transition: background-color 0.3s ease;
  }
  
  .gift-card-page .predefined-value-button.active,
  .gift-card-page .predefined-value-button:hover {
	background-color: var(--color-blue);
	color: var(--color-white);
  }
  
  .gift-card-page .slider-container {
	display: flex;
	align-items: center;
	gap: 15px;
  }
  
  .gift-card-page .slider {
	flex: 1;
	-webkit-appearance: none;
	height: 5px;
	background: #ddd;
	border-radius: 5px;
	outline: none;
  }
  
  .gift-card-page .slider::-webkit-slider-thumb {
	-webkit-appearance: none;
	appearance: none;
	width: 20px;
	height: 20px;
	background: var(--color-blue);
	cursor: pointer;
	border-radius: 50%;
  }
  
  .gift-card-page .value-input {
	width: 80px;
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: var(--border-radius);
	font-size: 1rem;
  }
  

--- Giftcard/GiftCard/AddGiftcardSection/index.js ---
import React, { useState } from 'react';
import './css/addGiftCardSection.css';
import { FaUser, FaEnvelope, FaImage, FaPlus } from 'react-icons/fa';
import ValueSelector from './ValueSelector';
import useApi from '../../../../Hooks/useApi';

const AddGiftCardSection = () => {
  const api = useApi();

  const [formData, setFormData] = useState({
    value: '',
    firstName: '',
    lastName: '',
    email: '',
    design: '',
  });

  const [errors, setErrors] = useState({});
  const [successMessage, setSuccessMessage] = useState('');

  const giftCardDesigns = [
    { value: '', label: 'Selecteer Ontwerp' },
    { value: 'design1', label: 'Klassiek' },
    { value: 'design2', label: 'Modern' },
    { value: 'design3', label: 'Feestelijk' },
  ];

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
    setErrors({ ...errors, [name]: '' });
    setSuccessMessage('');
  };

  const validate = () => {
    const newErrors = {};

    if (!formData.value || isNaN(formData.value) || parseFloat(formData.value) <= 0) {
      newErrors.value = 'Voer een geldig bedrag in Euro in.';
    }

    if (!formData.firstName.trim()) {
      newErrors.firstName = 'Voornaam is verplicht.';
    }

    if (!formData.lastName.trim()) {
      newErrors.lastName = 'Achternaam is verplicht.';
    }

    if (!formData.email.trim()) {
      newErrors.email = 'E-mailadres is verplicht.';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Voer een geldig e-mailadres in.';
    }

    if (!formData.design) {
      newErrors.design = 'Selecteer een ontwerp voor de kaart.';
    }

    return newErrors;
  };

  const generateUniqueCode = () => {
    // Simple code generation logic (you can make it more complex if needed)
    return Math.random().toString(36).substr(2, 8).toUpperCase();
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const validationErrors = validate();

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
    } else {
      try {
        const uniqueCode = generateUniqueCode(); // Generate the unique code here

        // Get current date in CEST and format as YYYY-MM-DD
        const creationDate = new Date();
        const options = {
          timeZone: 'Europe/Amsterdam', // CEST timezone
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
        };
        const formatter = new Intl.DateTimeFormat('nl-NL', options);
        const formattedDate = formatter.format(creationDate); // Gives DD-MM-YYYY

        // Reformat to YYYY-MM-DD
        const [day, month, year] = formattedDate.split('-');
        const formattedCreationDate = `${year}-${month}-${day}`;

        const giftCardData = {
          code: uniqueCode, // Include the code in the data sent to the server
          value: parseFloat(formData.value),
          firstName: formData.firstName.trim(),
          lastName: formData.lastName.trim(),
          email: formData.email.trim(),
          design: formData.design,
          status: 'Admin Cadeaubon', // Set the status to "Admin Cadeaubon"
          creationDate: formattedCreationDate, // Include the creation date
        };

        const response = await api.post(window.baseDomain + 'api/giftcards', giftCardData);

        if (response) {
          setSuccessMessage(`Cadeaubon succesvol aangemaakt! Uw code is: ${uniqueCode}`);
          setFormData({
            value: '',
            firstName: '',
            lastName: '',
            email: '',
            design: '',
          });
          setErrors({});
        } else {
          setErrors({ server: 'Er is een fout opgetreden bij het aanmaken van de cadeaubon.' });
        }
      } catch (error) {
        console.error(error);
        setErrors({ server: 'Er is een fout opgetreden bij het aanmaken van de cadeaubon.' });
      }
    }
  };

  return (
    <div className="add-gift-card-section">
      <h2 className="add-gift-card-section__title">Cadeaubon Toevoegen</h2>
      <form className="add-gift-card-section__form" onSubmit={handleSubmit} noValidate>
        <div className="form-group">
          <ValueSelector value={formData.value} onChange={handleChange} />
          {errors.value && <p className="form-error">{errors.value}</p>}
        </div>

        <div className="form-group">
          <div className="input-container">
            <FaUser className="input-icon" />
            <input
              type="text"
              id="firstName"
              name="firstName"
              placeholder="Voornaam Ontvanger"
              value={formData.firstName}
              onChange={handleChange}
            />
          </div>
          {errors.firstName && <p className="form-error">{errors.firstName}</p>}
        </div>

        <div className="form-group">
          <div className="input-container">
            <FaUser className="input-icon" />
            <input
              type="text"
              id="lastName"
              name="lastName"
              placeholder="Achternaam Ontvanger"
              value={formData.lastName}
              onChange={handleChange}
            />
          </div>
          {errors.lastName && <p className="form-error">{errors.lastName}</p>}
        </div>

        <div className="form-group">
          <div className="input-container">
            <FaEnvelope className="input-icon" />
            <input
              type="email"
              id="email"
              name="email"
              placeholder="email@voorbeeld.com"
              value={formData.email}
              onChange={handleChange}
            />
          </div>
          {errors.email && <p className="form-error">{errors.email}</p>}
        </div>

        <div className="form-group">
          <div className="input-container select-container">
            <FaImage className="input-icon" />
            <select
              id="design"
              name="design"
              value={formData.design}
              onChange={handleChange}
            >
              {giftCardDesigns.map((design) => (
                <option key={design.value} value={design.value}>
                  {design.label}
                </option>
              ))}
            </select>
          </div>
          {errors.design && <p className="form-error">{errors.design}</p>}
        </div>

        {successMessage && (
          <p className="form-success">
            <FaPlus /> {successMessage}
          </p>
        )}

        <button type="submit" className="button-style-3">
          Aanmaken
        </button>
      </form>
    </div>
  );
};

export default AddGiftCardSection;


--- Giftcard/GiftCard/OverviewSection/SearchBar.js ---
// SearchBar.js

import React from 'react';

const SearchBar = ({ value, onChange, placeholder, className }) => {
  return (
    <input
      type="text"
      placeholder={placeholder}
      value={value}
      onChange={onChange}
      className={className}
    />
  );
};

export default SearchBar;


--- Giftcard/GiftCard/OverviewSection/css/overviewSection.css ---
/* src/components/GiftCard/OverviewSection/css/overviewSection.css */

.gift-card-page .overview-section {
    display: flex;
    flex-direction: column;
    padding: 20px;
}

.gift-card-page .bubble-style {
    font-size: 0.8rem;
    color: var(--color-blue);
    text-align: center;
    border: var(--color-blue) 1px solid;
    border-radius: 200px;
    margin-bottom: 10px;
    padding: 6px 12px; /* Optional: more padding for better display */
    background-color: #f0f8ff; /* Optional: light background color for contrast */
}

.gift-card-page .bold-customer-name {
    font-weight: bold;
}

.gift-card-page .overview-section__controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 20px;
}

.gift-card-page .overview-section__search {
    flex: 1;
    min-width: 200px;
    width: 200px;
    padding: 10px;
    border: 1px solid var(--input-border);
    border-radius: var(--border-radius);
    font-size: var(--font-size);
    transition: border-color 0.3s ease;
}

.gift-card-page .overview-section__search:focus {
    border-color: var(--input-focus-border);
    outline: none;
}

.gift-card-page .overview-section__table-container {
    width: 100%;
    overflow-x: auto;
}

.gift-card-page .overview-section__table {
    width: 100%;
    border-collapse: collapse;
    box-shadow: var(--box-shadow);
    table-layout: fixed; /* Ensures fixed layout */
}

.gift-card-page .overview-section__table th,
.gift-card-page .overview-section__table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
    width: 12.5%; /* 100% / 8 columns */
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.gift-card-page .overview-section__table th {
    background-color: var(--table-header-bg);
    cursor: pointer;
    user-select: none;
    font-weight: bold;
    font-size: var(--font-size);
    position: relative; /* For sort icons positioning */
}

.gift-card-page .overview-section__table th .sort-icon {
    margin-left: 5px;
    display: inline-block;
}

.gift-card-page .overview-section__table tr:hover {
    background-color: var(--color-light-gray);
}

.gift-card-page .status {
    padding: 4px 8px;
    border-radius: 4px;
    color: white;
    font-weight: bold;
    text-align: center;
    display: inline-block;
}

.gift-card-page .status--used {
    background-color: var(--color-red);
}

.gift-card-page .status--unused {
    background-color: var(--color-green);
}

.gift-card-page .no-data {
    text-align: center;
    padding: 20px;
    color: var(--color-gray);
    font-size: var(--font-size);
}

.gift-card-page .overview-section__pagination {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 20px;
}

.gift-card-page .pagination__info {
    font-size: var(--font-size);
    color: var(--color-gray);
}

.gift-card-page .pagination__controls {
    display: flex;
    align-items: center;
    gap: 8px;
}

.gift-card-page .pagination__button {
    background-color: var(--color-blue);
    color: var(--color-white);
    border: none;
    border-radius: 5px;
    padding: 8px 12px;
    cursor: pointer;
    font-size: 0.9rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease;
}

.gift-card-page .pagination__button:disabled {
    background-color: var(--color-blue);
    opacity: 0.5;
    cursor: not-allowed;
}

.gift-card-page .pagination__button:hover:not(:disabled) {
    background-color: var(--button-hover-blue);
}

.gift-card-page .overview-section__export:hover {
    background-color: var(--color-green);
}

.gift-card-page .overview-section .search-bars-container {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
    margin-top: 25px;
    gap: 10px;
    padding: 0;
    background-color: var(--color-bg);
}

.gift-card-page .overview-section .search-bar {
    flex: 1;
    font-size: 15px;
    height: 40px;
    padding: 0 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: var(--color-bg);
}

/* Optional: Responsive adjustments */
@media (max-width: 768px) {
    .gift-card-page .overview-section__table th,
    .gift-card-page .overview-section__table td {
        padding: 8px 10px;
        font-size: 0.9rem;
    }
}


--- Giftcard/GiftCard/OverviewSection/index.js ---
import React, { useState, useEffect } from 'react';
import './css/overviewSection.css';
import SearchBar from './SearchBar';
import {
  FaSortUp,
  FaSortDown,
  FaSort,
  FaChevronLeft,
  FaChevronRight,
  FaAngleDoubleLeft,
  FaAngleDoubleRight,
} from 'react-icons/fa';
import useApi from '../../../../Hooks/useApi';

const OverviewSectionFlex = () => {
  const api = useApi();

  const [giftCards, setGiftCards] = useState([]);
  const [customerSearch, setCustomerSearch] = useState('');
  const [emailSearch, setEmailSearch] = useState('');
  const [amountSearch, setAmountSearch] = useState('');
  const [sortedColumn, setSortedColumn] = useState(null);
  const [sortDirection, setSortDirection] = useState('asc');
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  useEffect(() => {
    const fetchGiftCards = async () => {
      try {
        console.log("Giftcards GET");
        const data = await api.get(window.baseDomain + 'api/giftcards', { noCache: true });

        if (Array.isArray(data)) {
          setGiftCards(data);
        } else {
          console.error('Expected an array of gift cards, but received:', data);
          setGiftCards([]);
        }
      } catch (error) {
        console.error('Error fetching gift cards:', error);
        setGiftCards([]); // Set to empty array on error
      }
    };
    fetchGiftCards();
  }, [api]);

  // Handle sorting
  const handleSort = (column) => {
    if (sortedColumn === column) {
      // Toggle sort direction
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortedColumn(column);
      setSortDirection('asc');
    }
  };

  // Sort gift cards based on sortedColumn and sortDirection
  const getSortedGiftCards = (cards) => {
    if (!Array.isArray(cards)) return [];

    if (!sortedColumn) return cards;

    return [...cards].sort((a, b) => {
      let aVal = a[sortedColumn];
      let bVal = b[sortedColumn];

      // Handle undefined values
      if (aVal === undefined || aVal === null) aVal = '';
      if (bVal === undefined || bVal === null) bVal = '';

      // Numeric comparison for specific columns
      if (sortedColumn === 'value' || sortedColumn === 'availableBalance') {
        aVal = parseFloat(aVal) || 0;
        bVal = parseFloat(bVal) || 0;
      } else if (sortedColumn === 'creationDate' || sortedColumn === 'expirationDate') {
        // Date comparison
        aVal = new Date(aVal);
        bVal = new Date(bVal);
      } else {
        // String comparison
        aVal = aVal.toString().toLowerCase();
        bVal = bVal.toString().toLowerCase();
      }

      if (aVal < bVal) return sortDirection === 'asc' ? -1 : 1;
      if (aVal > bVal) return sortDirection === 'asc' ? 1 : -1;
      return 0;
    });
  };

  // Filter gift cards based on search queries
  const getFilteredGiftCards = (cards) => {
    if (!Array.isArray(cards)) return [];

    return cards.filter((card) => {
      const firstName = card.firstName || '';
      const lastName = card.lastName || '';
      const email = card.email || '';
      const value = card.value !== undefined ? card.value.toString() : '';

      const customerName = `${firstName} ${lastName}`.toLowerCase();
      const matchesCustomer = customerName.includes(customerSearch.toLowerCase());
      const matchesEmail = email.toLowerCase().includes(emailSearch.toLowerCase());
      const matchesAmount =
        amountSearch === '' || value.includes(amountSearch);

      return matchesCustomer && matchesEmail && matchesAmount;
    });
  };

  // Get the processed gift cards
  const sortedGiftCards = getSortedGiftCards(giftCards);
  const processedGiftCards = getFilteredGiftCards(sortedGiftCards);

  // Pagination calculations
  const totalPages = Math.ceil(processedGiftCards.length / itemsPerPage) || 1;
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentGiftCards = processedGiftCards.slice(indexOfFirstItem, indexOfLastItem);

  // Handle page navigation
  const goToFirstPage = () => setCurrentPage(1);
  const goToPreviousPage = () => setCurrentPage((prev) => Math.max(prev - 1, 1));
  const goToNextPage = () => setCurrentPage((prev) => Math.min(prev + 1, totalPages));
  const goToLastPage = () => setCurrentPage(totalPages);

  // Handle Export to CSV
  const handleExport = () => {
    const headers = [
      'Status',
      'Voornaam',
      'Achternaam',
      'Bedrag (€)',
      'Saldo (€)',
      'Aanmaak',
      'Verval',
      'Email'
    ];
    const rows = processedGiftCards.map((card) => {
      // Calculate expiration date by adding one year to creationDate
      let expirationDate = 'N.v.t.';
      if (card.creationDate) {
        // Parse creationDate and add one year
        const [year, month, day] = card.creationDate.split('-').map(Number);
        const creationDateObj = new Date(year, month - 1, day);
        creationDateObj.setFullYear(creationDateObj.getFullYear() + 1);
        // Format expiration date as YYYY-MM-DD
        const options = {
          timeZone: 'Europe/Amsterdam',
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
        };
        const formatter = new Intl.DateTimeFormat('nl-NL', options);
        const formattedExpirationDate = formatter.format(creationDateObj);
        const [expDay, expMonth, expYear] = formattedExpirationDate.split('-');
        expirationDate = `${expYear}-${expMonth}-${expDay}`;
      }

      return [
        statusMapping[card.status] || card.status,
        card.firstName || '',
        card.lastName || '',
        card.value || '',
        card.availableBalance || '',
        card.creationDate || 'N.v.t.',
        expirationDate,
        card.email || '',
      ];
    });

    const csvContent =
      'data:text/csv;charset=utf-8,' +
      [headers, ...rows].map((e) => e.join(',')).join('\n');

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement('a');
    link.setAttribute('href', encodedUri);
    link.setAttribute('download', 'cadeaubonnen.csv');
    document.body.appendChild(link);

    link.click();
    document.body.removeChild(link);
  };

  // Render sort icon based on current sort state
  const renderSortIcon = (column) => {
    if (sortedColumn !== column) {
      return <FaSort />;
    }
    return sortDirection === 'asc' ? <FaSortUp /> : <FaSortDown />;
  };

  // Status mapping
  const statusMapping = {
    Used: 'Gebruikt',
    Unused: 'Niet Gebruikt',
    'Admin Cadeaubon': 'Admin Cadeaubon',
    // Add more mappings if necessary
  };

  return (
    <div className="overview-section">
      <h2 className="overview-section__title">Cadeaubon Lijst</h2>

      {/* Search Bars */}
      <div className="search-bars-container">
        <SearchBar
          placeholder="Zoeken op klant"
          value={customerSearch}
          onChange={(e) => setCustomerSearch(e.target.value)}
          className="search-bar"
        />
        <SearchBar
          placeholder="Zoeken op email"
          value={emailSearch}
          onChange={(e) => setEmailSearch(e.target.value)}
          className="search-bar"
        />
        <SearchBar
          placeholder="Zoeken op bedrag"
          value={amountSearch}
          onChange={(e) => setAmountSearch(e.target.value)}
          className="search-bar"
        />
      </div>

      <div className="overview-section__table-container">
        <table className="overview-section__table">
          <thead>
            <tr className="table-header-row">
              <th
                onClick={() => handleSort('status')}
                style={{ width: '15%' }}
              >
                Status {renderSortIcon('status')}
              </th>
              <th onClick={() => handleSort('firstName')}>
                Voornaam {renderSortIcon('firstName')}
              </th>
              <th onClick={() => handleSort('lastName')}>
                Achternaam {renderSortIcon('lastName')}
              </th>
              <th onClick={() => handleSort('value')}>
                Bedrag (€) {renderSortIcon('value')}
              </th>
              <th onClick={() => handleSort('availableBalance')}>
                Beschikbaar Saldo (€) {renderSortIcon('availableBalance')}
              </th>
              <th onClick={() => handleSort('creationDate')}>
                Aanmaakdatum {renderSortIcon('creationDate')}
              </th>
              <th onClick={() => handleSort('expirationDate')}>
                Vervaldatum {renderSortIcon('expirationDate')}
              </th>
              <th onClick={() => handleSort('email')}>
                E-mailadres {renderSortIcon('email')}
              </th>
            </tr>
          </thead>
          <tbody>
            {currentGiftCards.length > 0 ? (
              currentGiftCards.map((card) => {
                // Calculate expiration date by adding one year to creationDate
                let expirationDate = 'N.v.t.';
                if (card.creationDate) {
                  // Parse creationDate and add one year
                  const [year, month, day] = card.creationDate.split('-').map(Number);
                  const creationDateObj = new Date(year, month - 1, day);
                  creationDateObj.setFullYear(creationDateObj.getFullYear() + 1);
                  // Format expiration date as YYYY-MM-DD
                  const options = {
                    timeZone: 'Europe/Amsterdam',
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                  };
                  const formatter = new Intl.DateTimeFormat('nl-NL', options);
                  const formattedExpirationDate = formatter.format(creationDateObj);
                  const [expDay, expMonth, expYear] = formattedExpirationDate.split('-');
                  expirationDate = `${expYear}-${expMonth}-${expDay}`;
                }

                return (
                  <tr key={card._id} className="table-body-row">
                    <td>
                      <span className="bubble-style">
                        {statusMapping[card.status] || card.status}
                      </span>
                    </td>
                    <td>{card.firstName || ''}</td>
                    <td>{card.lastName || ''}</td>
                    <td>€{parseFloat(card.value || 0).toFixed(2)}</td>
                    <td>€{parseFloat(card.availableBalance || 0).toFixed(2)}</td>
                    <td>{card.creationDate || 'N.v.t.'}</td>
                    <td>{expirationDate}</td>
                    <td>{card.email || ''}</td>
                  </tr>
                );
              })
            ) : (
              <tr className="no-data-row">
                <td colSpan="8" className="no-data">
                  Geen cadeaubonnen gevonden.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
      <div className="overview-section__pagination">
        <div className="pagination__info">
          Pagina {currentPage} van {totalPages}
        </div>
        <div className="pagination__controls">
          <button
            onClick={goToFirstPage}
            disabled={currentPage === 1}
            className="pagination__button"
            title="Eerste Pagina"
          >
            <FaAngleDoubleLeft />
          </button>
          <button
            onClick={goToPreviousPage}
            disabled={currentPage === 1}
            className="pagination__button"
            title="Vorige Pagina"
          >
            <FaChevronLeft />
          </button>
          <button
            onClick={goToNextPage}
            disabled={currentPage === totalPages}
            className="pagination__button"
            title="Volgende Pagina"
          >
            <FaChevronRight />
          </button>
          <button
            onClick={goToLastPage}
            disabled={currentPage === totalPages}
            className="pagination__button"
            title="Laatste Pagina"
          >
            <FaAngleDoubleRight />
          </button>
        </div>
        <div className="export-button-container">
          <button
            className="button-style-3 button-export"
            onClick={handleExport}
          >
            Exporteer naar CSV
          </button>
        </div>
      </div>
    </div>
  );
};

export default OverviewSectionFlex;


--- Giftcard/GiftCard/ValidationSection/ValidationPopup.js ---
// src/components/GiftCard/ValidationPopup/index.js

import React from 'react';
import './css/validationPopup.css';
import { FaTimesCircle } from 'react-icons/fa';

const ValidationPopup = ({
  giftCardData,
  code, // Nieuwe prop toegevoegd
  onClose,
  deductValue,
  setDeductValue,
  deductError,
  handleDeduct,
}) => {
  return (
    <div className="validation-popup__container">
      <div className="validation-popup__header">
        <h2 className="secondary-title center">Cadeaubon Details</h2>
        <div className='validation-popup__data-bubble'>Code {code}</div> {/* Dynamische weergave van de code */}
      </div>
      
      <div className="validation-popup__info">
        <div className="validation-popup__labels">
          <p>Status:</p>
          <p>Initieel Bedrag:</p>
          <p>Beschikbaar Saldo:</p>
          <p>Vervaldatum:</p>
          <p>Geldig voor maanden:</p>
          <p>Aanmaakdatum:</p>
        </div>
        <div className="validation-popup__values">
          <p>{giftCardData.status}</p>
          <p>{giftCardData.initialValue}</p>
          <p>€{giftCardData.availableBalance}</p>
          <p>{giftCardData.expirationDate}</p>
          <p>{giftCardData.monthsValid} maanden</p>
          <p>{giftCardData.reservationDate}</p>
        </div>
      </div>
      <div className="validation-popup__deduct">
        <label htmlFor="deduct">Cadeaubon Verminderen</label>
        <input
          type="number"
          id="deduct"
          value={deductValue}
          onChange={(e) => setDeductValue(e.target.value)}
          placeholder="Voer bedrag in"
        />
        {deductError && (
          <p className="validation-popup__deduct-error">
            <FaTimesCircle /> {deductError}
          </p>
        )}
      </div>
      <button
        className="button-style-3"
        onClick={handleDeduct}
      >
        Bedrag Afschrijven Cadeaubon
      </button>
    </div>
  );
};

export default ValidationPopup;


--- Giftcard/GiftCard/ValidationSection/css/validationPopup.css ---
/* src/components/GiftCard/ValidationPopup/css/validationPopup.css */

.gift-card-page .validation-popup__container {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  .gift-card-page .validation-popup__header {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
  }
  
  .gift-card-page .validation-popup__data-bubble {
	font-size: 0.8rem;
	color: var(--color-blue);
	text-align: center;
	border: var(--color-blue) 1px solid;
	border-radius: 200px;
	margin-bottom: 10px;
	padding: 6px 12px;
	background-color: #f0f8ff;
  }
  
  .gift-card-page .validation-popup__info {
	display: grid;
	grid-template-columns: 1fr 1fr;
	row-gap: 10px;
	column-gap: 20px;
  }
  
  .gift-card-page .validation-popup__info p {
	margin: 5px 0;
  }
  
  .gift-card-page .validation-popup__deduct {
	display: flex;
	flex-direction: column;
	gap: 5px;
  }
  
  .gift-card-page .validation-popup__deduct input {
	padding: 8px;
	border: 1px solid #ccc;
	border-radius: 8px;
	font-size: 1rem;
  }
  
  .gift-card-page .validation-popup__deduct-error {
	color: var(--color-red);
	font-size: 0.9rem;
	display: flex;
	align-items: center;
	gap: 5px;
  }
  
  @media (max-width: 768px) {
	.gift-card-page .validation-popup__info {
	  grid-template-columns: 1fr;
	}
  }
  
  .gift-card-page .validation-popup__validate-icon {
	margin-right: 5px;
  }
  

--- Giftcard/GiftCard/ValidationSection/css/validationSection.css ---
/* Main Validation Section */
.gift-card-page .validation-section {
	display: flex;
	flex-direction: column;
	gap: 15px;
}


.gift-card-page .validation-section__description {
	font-size: 0.9rem;
	font-style: italic;
	color: #6c757d;
	margin-top: -8px;
}

.gift-card-page .validation-section__input {
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: 8px;
	font-size: 1rem;
}

.gift-card-page .validation-section__error {
	color: var(--color-red);
	font-size: 0.9rem;
	display: flex;
	align-items: center;
	gap: 5px;
}



.validation-popup__content {
	position: absolute;
	top: 50%;
	left: 50%;
	width: 90%;
	max-width: 500px;
	background-color: #ffffff;
	border-radius: 8px;
	padding: 20px;
	transform: translate(-50%, -50%);
	box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
	display: flex;
	flex-direction: column;
	gap: 15px;
}

.validation-popup__header {
	display: flex;
	justify-content: space-between;
	align-items: center;
}

.validation-popup__header h3 {
	margin: 0;
	display: flex;
	align-items: center;
	gap: 5px;
}

.validation-popup__date {
	font-size: 0.8rem;
	color: #6c757d;
}

.validation-popup__info {
	display: flex;
	gap: 10px;
}

.validation-popup__labels,
.validation-popup__values {
	flex: 1;
}


.validation-popup__values p {
	margin: 5px 0;
}

.validation-popup__deduct {
	display: flex;
	flex-direction: column;
	gap: 5px;
}

.validation-popup__deduct label {
	font-weight: bold;
}

.validation-popup__deduct input {
	padding: 8px;
	border: 1px solid #ccc;
	border-radius: 8px;
	font-size: 1rem;
}

.validation-popup__deduct-error {
	color: var(--color-red);
	font-size: 0.9rem;
	display: flex;
	align-items: center;
	gap: 5px;
}

.validation-popup__validate-button {
	padding: 10px;
	background-color: var(--color-blue);
	color: #ffffff;
	border: none;
	border-radius: 8px;
	cursor: pointer;
	font-size: 1rem;
	display: flex;
	align-items: center;
	justify-content: center;
	transition: background-color 0.3s ease;
}

.validation-popup__validate-button:hover {
	background-color: darken(var(--color-blue), 10%);
}

/* Responsive Design */
@media (max-width: 768px) {
	.validation-popup__content {
		width: 95%;
	}

	.validation-popup__info {
		flex-direction: column;
	}
}


--- Giftcard/GiftCard/ValidationSection/index.js ---
// src/components/GiftCard/ValidationSection/index.js

import React, { useState } from 'react';
import ModalWithoutTabs from '../../../../Components/Structural/Modal/Standard'; // Adjusted import path
import './css/validationSection.css';
import { FaTimesCircle } from 'react-icons/fa';
import ValidationPopup from './ValidationPopup'; // Import the ValidationPopup component

const ValidationSection = () => {
  const [code, setCode] = useState('');
  const [isValid, setIsValid] = useState(null); // null: no attempt, true: valid, false: invalid
  const [showPopup, setShowPopup] = useState(false);
  const [deductValue, setDeductValue] = useState('');
  const [deductError, setDeductError] = useState('');

  // Mock data for demonstration purposes
  const giftCardData = {
    status: 'Active',
    initialValue: '€100', // Aangepast naar Euro-teken
    availableBalance: 100,
    expirationDate: '31-12-2025', // Formaat aangepast indien nodig
    monthsValid: 24,
    reservationDate: '27-04-2024', // Formaat aangepast indien nodig
  };

  const handleValidateCode = () => {
    // Simple validation logic (for demonstration)
    if (code.trim().toUpperCase() === 'GIFT2024') { // Case-insensitive vergelijking
      setIsValid(true);
      setShowPopup(true);
    } else {
      setIsValid(false);
    }
  };

  const handleDeduct = () => {
    const value = parseFloat(deductValue);
    if (isNaN(value) || value <= 0) {
      setDeductError('Voer een geldig bedrag in.');
      return;
    }
    if (value > giftCardData.availableBalance) {
      setDeductError('Afschrijving overschrijdt beschikbaar saldo.');
      return;
    }
    // Proceed with deduction logic (e.g., API call)
    // For demonstration, we'll just close the popup
    setDeductError('');
    setShowPopup(false);
    alert(`€${value} is afgeschreven van uw cadeaubon.`);
  };

  return (
    <div className="validation-section">
      <h2 className="validation-section__title">Valideer</h2>
      <p className="validation-section__description">
        Voer hier uw cadeaubon code in
      </p>
      <input
        type="text"
        className="validation-section__input"
        placeholder="Voer Cadeaubon Code in"
        value={code}
        onChange={(e) => setCode(e.target.value)}
      />
      <button
        className="button-style-3"
        onClick={handleValidateCode}
      >
        Code Valideren
      </button>
      {isValid === false && (
        <p className="validation-section__error">
          <FaTimesCircle /> Voer een geldige code in
        </p>
      )}

      {showPopup && (
        <ModalWithoutTabs
          onClose={() => setShowPopup(false)}
          content={
            <ValidationPopup
              giftCardData={giftCardData}
              code={code} // Nieuwe prop toegevoegd
              onClose={() => setShowPopup(false)}
              deductValue={deductValue}
              setDeductValue={setDeductValue}
              deductError={deductError}
              handleDeduct={handleDeduct}
            />
          }
        />
      )}
    </div>
  );
};

export default ValidationSection;


--- Giftcard/GiftCard/css/giftCard.css ---
/* src/components/GiftCard/css/giftCard.css */

.gift-card-page {
	display: grid;
	grid-template-rows: auto auto;
	grid-gap: 20px;
	margin-top: 30px;
  }
  
  .gift-card-page .gift-card-page__top-row,
  .gift-card-page .gift-card-page__bottom-row {
	display: grid;
	grid-gap: 20px;
  }
  
  .gift-card-page .gift-card-page__top-row {
	grid-template-columns: repeat(2, 1fr);
  }
  
  .gift-card-page .gift-card-page__bottom-row {
	grid-template-columns: 1fr;
  }
  

--- Giftcard/GiftCard/index.js ---
// src/components/GiftCard/index.js

import React from 'react';
import { withHeader } from '../../../Components/Structural/Header/index.js';
import './css/giftCard.css';
import ValidationSection from './ValidationSection/index.js';
import OverviewSection from './OverviewSection/index.js';
import AddGiftCardSection from './AddGiftcardSection/index.js';

const GiftCard = () => {
  return (
    <div className="gift-card-page">
      <div className="gift-card-page__top-row">
        <div className="gift-card-page__section">
          <ValidationSection />
        </div>
        <div className="gift-card-page__section">
			    <AddGiftCardSection/>
        </div>
      </div>
      <div className="gift-card-page__bottom-row">
        <div className="gift-card-page__section">
          <OverviewSection />
        </div>
      </div>
    </div>
  );
};

export default withHeader(GiftCard);


--- Giftcard/GiftcardEditor/index.js ---
import React, { useEffect } from 'react';
import { withHeader } from '../../../Components/Structural/Header';

const GiftcardEditor = () => {
  useEffect(() => {
    const script = document.createElement('script');
    script.src = 'https://editor.unlayer.com/embed.js';
    script.async = true;

    document.body.appendChild(script);

    script.onload = () => {
      if (window.unlayer) {
        window.unlayer.init({
          id: 'editor',
          projectId: 255501,
          templateId: 565564,
          locale: 'nl-NL', // Set the desired locale here
        });
      }
    };

    return () => {
      document.body.removeChild(script);
    };
  }, []);

  return (
    <div
      id="editor"
      style={{
        height: '90vh',
        width: '100%',
      }}
    ></div>
  );
};

export default withHeader(GiftcardEditor);


--- Login/OTPLogin/index.js ---
import React, { useEffect } from 'react';
import useApi from '../../../Hooks/useApi';

const OTPLogin = () => {
  const api = useApi();

  useEffect(() => {
    const loginWithOTP = async () => {
      try {
        // Extract otp and username from URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const otp = urlParams.get('otp');
        const username = urlParams.get('username');

        if (!otp || !username) {
          throw new Error('OTP or username not provided in URL parameters');
        }

        const data = {
          otp: otp,
        };

        const response = await api.post(window.baseDomain + 'api/auth/login/one-time-password/' + username, data);

		console.log(response);
		
        const { accessToken, refreshToken } = response;

        if (accessToken) {
          localStorage.setItem('accessToken', accessToken);
          localStorage.setItem('refreshToken', refreshToken);
          localStorage.setItem('loginSuccessful', true);
          localStorage.setItem('username', username); // Use username from URL params

          // Set the JWT as a cookie based on the environment
          const cookieDomain = window.isProduction ? '.reservaties.net' : 'localhost';
          const cookieSettings = `authToken=${accessToken}; path=/; ${
            window.isProduction ? `domain=${cookieDomain}; Secure; SameSite=None` : ''
          }`;
          document.cookie = cookieSettings;

          console.log('OTP login successful. Current document cookies:', document.cookie);

          // Remove OTP and username from URL
          window.history.replaceState({}, document.title, window.location.pathname);

          // Redirect to main app
          window.location.href = '/';
        } else {
          throw new Error('Token not received');
        }
      } catch (err) {
        console.error('OTP Login failed:', err);

        // Redirect to login page if OTP login fails
        window.location.href = '/login';
      }
    };

    loginWithOTP();
  }, [api]);

  return (
    <div className="otp-login-container">
      
    </div>
  );
};

export default OTPLogin;


--- Login/css/login.css ---
/* Reset default styles */
* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
  }
  
  body {
	font-family: Arial, sans-serif;
	background-color: #fff; /* Light background for a clean look */
  }
  
  .login-container {
	display: flex;
	justify-content: center;
	align-items: center;
	height: 100vh; /* Full viewport height */
  }
  
  .login-form {
	padding: 1.5rem 2rem;
	border: 1px solid #ddd; /* Light border */
	border-radius: 5px;
	width: 280px; /* Smaller width */
	background-color: #f9f9f9; /* Subtle background color */
  }
  
  .login-title {
	margin-bottom: 1rem;
	font-size: 1.25rem;
	color: #333;
	text-align: center;
  }
  
  .login-input {
	width: 100%;
	padding: 8px 10px;
	margin-bottom: 0.75rem;
	border: 1px solid #ccc; /* Light border */
	border-radius: 3px;
	background-color: #fff;
	font-size: 0.95rem;
  }
  
  .login-input:focus {
	border-color: var(--color-blue); /* Subtle focus effect */
	outline: none;
  }
  
  .login-button {
	width: 100%;
	padding: 8px 10px;
	background-color: var(--color-blue); /* Primary button color */
	color: #fff;
	border: none;
	border-radius: 3px;
	cursor: pointer;
	font-size: 0.95rem;
	transition: background-color 0.3s ease;
  }
  
  .login-button:hover {
	background-color: #0056b3; /* Darker shade on hover */
  }
  
  .error-message {
	color: rgb(255, 153, 0);
	font-size: 0.9rem;
	margin-bottom: 1rem;
	text-align: center;
  }
  

--- Login/index.js ---
import React, { useState } from 'react';
import useApi from '../../Hooks/useApi';
import './css/login.css';

const Login = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const api = useApi();

  const handleUsernameChange = (e) => setUsername(e.target.value);
  const handlePasswordChange = (e) => setPassword(e.target.value);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(''); // Reset error message on new attempt

    try {
      const data = {
        username: username,
        password: password,
      };
      const response = await api.post(window.baseDomain + 'api/auth/jwt-sign-in/', data);
      const { accessToken, refreshToken } = response;

      if (accessToken) {
        localStorage.setItem('accessToken', accessToken);
        localStorage.setItem('refreshToken', refreshToken);
        localStorage.setItem('loginSuccessful', true);
        localStorage.setItem('username', username);

        const cookieDomain = window.isProduction ? '.reservaties.net' : 'localhost';
        const cookieSettings = `authToken=${accessToken}; path=/; ${
          window.isProduction ? `domain=${cookieDomain}; Secure; SameSite=None` : ''
        }`;
        document.cookie = cookieSettings;

        window.location.reload();
      } else {
        throw new Error('Token not received');
      }
    } catch (err) {
      console.error('Login failed:', err);
      setError('Onjuiste gebruikersnaam of wachtwoord.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="login-container">
      <form className="login-form" onSubmit={handleSubmit}>
        <h2 className="login-title">Login</h2>

        {error && <p className="error-message">{error}</p>}

        <input
          type="text"
          placeholder="Gebruikersnaam"
          value={username}
          onChange={handleUsernameChange}
          className="login-input"
          required
        />
        <input
          type="password"
          placeholder="Wachtwoord"
          value={password}
          onChange={handlePasswordChange}
          className="login-input"
          required
        />

        <button type="submit" className="login-button" disabled={loading}>
          {loading ? 'Logging in...' : 'Login'}
        </button>
      </form>
    </div>
  );
};

export default Login;


--- Mededeling/EditMededelingModal.js ---
// src/Pages/Mededeling/EditMededelingModal.js

import React, { useState } from 'react';
import ModalWithoutTabs from '../../Components/Structural/Modal/Standard';
import './css/mededeling.css';

const EditMededelingModal = ({
  isVisible,
  mededeling,
  api,
  triggerNotification,
  refreshMededelingen,
  onClose,
}) => {
  const [formData, setFormData] = useState({
    mededeling: mededeling.mededeling || '',
    startDate: mededeling.startDate || '',
    endDate: mededeling.endDate || '',
    startTime: mededeling.startTime || '',
    endTime: mededeling.endTime || '',
    daysOfWeek: mededeling.daysOfWeek || [],
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;

    if (type === 'checkbox') {
      const day = value;
      setFormData((prev) => {
        let daysOfWeek = [...prev.daysOfWeek];
        if (checked) {
          daysOfWeek.push(day);
        } else {
          daysOfWeek = daysOfWeek.filter((d) => d !== day);
        }
        return { ...prev, daysOfWeek };
      });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    setErrors({ ...errors, [name]: '' });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const validationErrors = {};
    if (!formData.mededeling.trim()) validationErrors.mededeling = 'Mededeling is verplicht.';
    if (!formData.startDate) validationErrors.startDate = 'Startdatum is verplicht.';
    if (!formData.endDate) validationErrors.endDate = 'Einddatum is verplicht.';
    if (!formData.startTime) validationErrors.startTime = 'Starttijd is verplicht.';
    if (!formData.endTime) validationErrors.endTime = 'Eindtijd is verplicht.';
    if (formData.daysOfWeek.length === 0) validationErrors.daysOfWeek = 'Selecteer minstens één dag.';

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    const payload = {
      ...formData,
    };

    try {
      const response = await api.put(`${window.baseDomain}api/mededeling/${mededeling._id}`, payload);
      if (response) {
        triggerNotification('Mededeling succesvol bijgewerkt', 'success');
        refreshMededelingen();
        onClose();
      } else {
        triggerNotification('Fout bij het bijwerken van de mededeling', 'error');
      }
    } catch (error) {
      console.error('Error updating mededeling:', error);
      triggerNotification('Fout bij het bijwerken van de mededeling', 'error');
    }
  };

  if (!isVisible) return null;

  return (
    <ModalWithoutTabs
      onClose={onClose}
      content={
        <div className="mededeling-component__edit-modal">
          <form className="mededeling-component__form" onSubmit={handleSubmit}>
            <div className="mededeling-component__form-group">
              <label>Mededeling</label>
              <input
                type="text"
                name="mededeling"
                value={formData.mededeling}
                onChange={handleChange}
                className="mededeling-component__input"
              />
              {errors.mededeling && <p className="mededeling-component__error">{errors.mededeling}</p>}
            </div>

            <div className="mededeling-component__form-group">
              <label>Start Datum</label>
              <input
                type="date"
                name="startDate"
                value={formData.startDate}
                onChange={handleChange}
                className="mededeling-component__input"
              />
              {errors.startDate && <p className="mededeling-component__error">{errors.startDate}</p>}
            </div>

            <div className="mededeling-component__form-group">
              <label>Eind Datum</label>
              <input
                type="date"
                name="endDate"
                value={formData.endDate}
                onChange={handleChange}
                className="mededeling-component__input"
              />
              {errors.endDate && <p className="mededeling-component__error">{errors.endDate}</p>}
            </div>

            <div className="mededeling-component__form-group">
              <label>Start Tijd</label>
              <input
                type="time"
                name="startTime"
                value={formData.startTime}
                onChange={handleChange}
                className="mededeling-component__input"
              />
              {errors.startTime && <p className="mededeling-component__error">{errors.startTime}</p>}
            </div>

            <div className="mededeling-component__form-group">
              <label>Eind Tijd</label>
              <input
                type="time"
                name="endTime"
                value={formData.endTime}
                onChange={handleChange}
                className="mededeling-component__input"
              />
              {errors.endTime && <p className="mededeling-component__error">{errors.endTime}</p>}
            </div>

            <div className="mededeling-component__form-group">
              <label>Dagen van de week</label>
              <div className="mededeling-component__checkbox-group">
                {['maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag', 'zondag'].map(
                  (day) => (
                    <label key={day} className="mededeling-component__checkbox-label">
                      <input
                        type="checkbox"
                        name="daysOfWeek"
                        value={day}
                        checked={formData.daysOfWeek.includes(day)}
                        onChange={handleChange}
                        className="mededeling-component__checkbox"
                      />
                      {day.charAt(0).toUpperCase() + day.slice(1)}
                    </label>
                  )
                )}
              </div>
              {errors.daysOfWeek && <p className="mededeling-component__error">{errors.daysOfWeek}</p>}
            </div>

            <button type="submit" className="button-style-3">
              Mededeling Bijwerken
            </button>
          </form>
        </div>
      }
    />
  );
};

export default EditMededelingModal;


--- Mededeling/MededelingForm.js ---
// src/Pages/Mededeling/MededelingForm.js

import React, { useState } from 'react';
import './css/mededeling.css';

const MededelingForm = ({ api, triggerNotification, refreshMededelingen }) => {
  const [formData, setFormData] = useState({
    mededeling: '',
    startDate: '',
    endDate: '',
    startTime: '',
    endTime: '',
    daysOfWeek: [],
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;

    if (type === 'checkbox') {
      const day = value;
      setFormData((prevFormData) => {
        let daysOfWeek = [...prevFormData.daysOfWeek];
        if (checked) {
          daysOfWeek.push(day);
        } else {
          daysOfWeek = daysOfWeek.filter((d) => d !== day);
        }
        return { ...prevFormData, daysOfWeek };
      });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    setErrors({ ...errors, [name]: '' });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const validationErrors = {};
    if (!formData.mededeling.trim()) validationErrors.mededeling = 'Mededeling is verplicht.';
    if (!formData.startDate) validationErrors.startDate = 'Startdatum is verplicht.';
    if (!formData.endDate) validationErrors.endDate = 'Einddatum is verplicht.';
    if (!formData.startTime) validationErrors.startTime = 'Starttijd is verplicht.';
    if (!formData.endTime) validationErrors.endTime = 'Eindtijd is verplicht.';
    if (formData.daysOfWeek.length === 0) validationErrors.daysOfWeek = 'Selecteer minstens één dag.';

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    const payload = {
      mededeling: formData.mededeling,
      startDate: formData.startDate,
      endDate: formData.endDate,
      startTime: formData.startTime,
      endTime: formData.endTime,
      daysOfWeek: formData.daysOfWeek,
    };

    try {
      const response = await api.post(`${window.baseDomain}api/mededeling`, payload);
      if (response) {
        setFormData({
          mededeling: '',
          startDate: '',
          endDate: '',
          startTime: '',
          endTime: '',
          daysOfWeek: [],
        });
        setErrors({});
        triggerNotification('Mededeling succesvol toegevoegd', 'success');
        refreshMededelingen();
      } else {
        triggerNotification('Fout bij het toevoegen van de mededeling', 'error');
      }
    } catch (error) {
      console.error('Error adding mededeling:', error);
      triggerNotification('Fout bij het toevoegen van de mededeling', 'error');
    }
  };

  return (
    <form className="mededeling-component__form" onSubmit={handleSubmit}>
      <div className="mededeling-component__form-group">
        <label>Mededeling</label>
        <input
          type="text"
          name="mededeling"
          value={formData.mededeling}
          onChange={handleChange}
          placeholder="Mededeling"
          className="mededeling-component__input"
        />
        {errors.mededeling && <p className="mededeling-component__error">{errors.mededeling}</p>}
      </div>

      <div className="mededeling-component__form-group">
        <label>Start Datum</label>
        <input
          type="date"
          name="startDate"
          value={formData.startDate}
          onChange={handleChange}
          className="mededeling-component__input"
        />
        {errors.startDate && <p className="mededeling-component__error">{errors.startDate}</p>}
      </div>

      <div className="mededeling-component__form-group">
        <label>Eind Datum</label>
        <input
          type="date"
          name="endDate"
          value={formData.endDate}
          onChange={handleChange}
          className="mededeling-component__input"
        />
        {errors.endDate && <p className="mededeling-component__error">{errors.endDate}</p>}
      </div>

      <div className="mededeling-component__form-group">
        <label>Start Tijd</label>
        <input
          type="time"
          name="startTime"
          value={formData.startTime}
          onChange={handleChange}
          className="mededeling-component__input"
        />
        {errors.startTime && <p className="mededeling-component__error">{errors.startTime}</p>}
      </div>

      <div className="mededeling-component__form-group">
        <label>Eind Tijd</label>
        <input
          type="time"
          name="endTime"
          value={formData.endTime}
          onChange={handleChange}
          className="mededeling-component__input"
        />
        {errors.endTime && <p className="mededeling-component__error">{errors.endTime}</p>}
      </div>

      <div className="mededeling-component__form-group">
        <label>Dagen van de week</label>
        <div className="mededeling-component__checkbox-group">
          {['maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag', 'zondag'].map(
            (day) => (
              <label key={day} className="mededeling-component__checkbox-label">
                <input
                  type="checkbox"
                  name="daysOfWeek"
                  value={day}
                  checked={formData.daysOfWeek.includes(day)}
                  onChange={handleChange}
                  className="mededeling-component__checkbox"
                />
                {day.charAt(0).toUpperCase() + day.slice(1)}
              </label>
            )
          )}
        </div>
        {errors.daysOfWeek && <p className="mededeling-component__error">{errors.daysOfWeek}</p>}
      </div>

      <button type="submit" className="button-style-3">
        Mededeling Toevoegen
      </button>
    </form>
  );
};

export default MededelingForm;


--- Mededeling/MededelingItem.js ---
// src/Pages/Mededeling/MededelingItem.js

import React, { useState } from 'react';
import './css/mededeling.css';
import { FaEllipsisV, FaPencilAlt, FaTrashAlt } from 'react-icons/fa';
import ConfirmationModal from '../../Components/Structural/Modal/Delete';
import EditMededelingModal from './EditMededelingModal';

const MededelingItem = ({ mededeling, api, triggerNotification, refreshMededelingen }) => {
  const [isTooltipOpen, setIsTooltipOpen] = useState(false);
  const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
  const [isEditModalVisible, setIsEditModalVisible] = useState(false);

  const handleEllipsisClick = () => {
    setIsTooltipOpen(!isTooltipOpen);
  };

  const handleDeleteClick = () => {
    setIsDeleteModalVisible(true);
    setIsTooltipOpen(false);
  };

  const handleEditClick = () => {
    setIsEditModalVisible(true);
    setIsTooltipOpen(false);
  };

  const handleConfirmDelete = async () => {
    setIsDeleteModalVisible(false);
    try {
      await api.delete(`${window.baseDomain}api/mededeling/${mededeling._id}`);
      triggerNotification('Mededeling succesvol verwijderd', 'success');
      refreshMededelingen();
    } catch (error) {
      console.error('Error deleting mededeling:', error);
      triggerNotification('Fout bij het verwijderen van de mededeling', 'error');
    }
  };

  const handleCancelDelete = () => {
    setIsDeleteModalVisible(false);
  };

  return (
    <div className="mededeling-component__mededeling-item">
      <div className="mededeling-component__mededeling-content">
        <h4>{mededeling.mededeling}</h4>
        <p>
          Geldig van {mededeling.startDate} tot {mededeling.endDate}
        </p>
        <p>
          Van {mededeling.startTime} tot {mededeling.endTime}
        </p>
        <p>Dagen: {mededeling.daysOfWeek.join(', ')}</p>
      </div>
      <div className="mededeling-component__mededeling-actions">
        <FaEllipsisV onClick={handleEllipsisClick} className="mededeling-component__ellipsis-icon" />
        {isTooltipOpen && (
          <div className="tooltip-container">
            <div className="tooltip-item" onClick={handleEditClick}>
              <FaPencilAlt className="tooltip-icon" />
              Bewerken
            </div>
            <div className="tooltip-separator"></div>
            <div className="tooltip-item delete-item" onClick={handleDeleteClick}>
              <FaTrashAlt className="tooltip-icon" />
              Verwijderen
            </div>
          </div>
        )}
      </div>
      {isDeleteModalVisible && (
        <ConfirmationModal
          isVisible={isDeleteModalVisible}
          title="Mededeling Verwijderen"
          message="Weet u zeker dat u deze mededeling wilt verwijderen?"
          onConfirm={handleConfirmDelete}
          onCancel={handleCancelDelete}
          confirmText="Verwijderen"
          cancelText="Annuleren"
          confirmButtonClass="discard-button red"
          cancelButtonClass="cancel-button"
        />
      )}
      {isEditModalVisible && (
        <EditMededelingModal
          isVisible={isEditModalVisible}
          mededeling={mededeling}
          api={api}
          triggerNotification={triggerNotification}
          refreshMededelingen={refreshMededelingen}
          onClose={() => setIsEditModalVisible(false)}
        />
      )}
    </div>
  );
};

export default MededelingItem;


--- Mededeling/MededelingList.js ---
// src/Pages/Mededeling/MededelingList.js

import React from 'react';
import './css/mededeling.css';
import MededelingItem from './MededelingItem';

const MededelingList = ({ mededelingen, api, triggerNotification, refreshMededelingen }) => {
  return (
    <div className="mededeling-component__list">
      <h3>Mededelingen</h3>
      {mededelingen.length > 0 ? (
        <div className="mededeling-component__mededeling-list">
          {mededelingen.map((mededeling) => (
            <MededelingItem
              key={mededeling._id}
              mededeling={mededeling}
              api={api}
              triggerNotification={triggerNotification}
              refreshMededelingen={refreshMededelingen}
            />
          ))}
        </div>
      ) : (
        <p>Geen mededelingen gevonden.</p>
      )}
    </div>
  );
};

export default MededelingList;


--- Mededeling/css/mededeling.css ---
/* src/Pages/Mededeling/css/mededeling.css */

.mededeling-component {
	display: flex;
	flex-direction: column;
	gap: 20px;
	margin-top: 30px;
	padding-bottom: 80px;
  }
  
  .mededeling-component__title {
	font-size: 2rem;
	text-align: center;
  }
  
  .mededeling-component__container {
	display: flex;
	flex-direction: row;
	gap: 20px;
	flex-wrap: wrap;
  }
  
  .mededeling-component__form {
	flex: 1;
	display: flex;
	flex-direction: column;
	gap: 15px;
	max-width: 100%;
  }
  
  .mededeling-component__form-group {
	display: flex;
	flex-direction: column;
  }
  
  .mededeling-component__form-group label {
	margin-bottom: 5px;
	font-weight: 500;
  }
  
  .mededeling-component__input {
	width: 100%;
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: 5px;
	font-size: 1rem;
  }
  
  .mededeling-component__checkbox-group {
	display: flex;
	flex-wrap: wrap;
	gap: 10px;
  }
  
  .mededeling-component__checkbox-label {
	display: flex;
	align-items: center;
  }
  
  .mededeling-component__checkbox {
	margin-right: 5px;
  }
  
  .mededeling-component__submit-button {
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	transition: background-color 0.3s ease;
	align-self: flex-start;
  }
  
  .mededeling-component__submit-button:hover {
	background-color: #0056b3;
  }
  
  .mededeling-component__error {
	color: red;
	font-size: 0.9rem;
  }
  
  .mededeling-component__list {
	flex: 1;
  }
  
  .mededeling-component__mededeling-list {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  .mededeling-component__mededeling-item {
	border: 1px solid #ccc;
	border-radius: 8px;
	padding: 15px;
	position: relative;
	display: flex;
	justify-content: space-between;
	align-items: center;
  }
  
  .mededeling-component__mededeling-content h4 {
	margin: 0 0 5px 0;
  }
  
  .mededeling-component__mededeling-actions {
	position: relative;
  }
  
  .mededeling-component__ellipsis-icon {
	cursor: pointer;
	font-size: 18px;
	color: #555;
  }
  
  .tooltip-container {
	position: absolute;
	bottom: 100%;
	right: 0;
	transform: translateY(-10px);
	background-color: white;
	border: 1px solid lightgray;
	border-radius: 5px;
	padding: 5px 0;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
	z-index: 1000;
  }
  
  .tooltip-item {
	display: flex;
	align-items: center;
	padding: 8px 15px;
	cursor: pointer;
  }
  
  .tooltip-item:hover {
	background-color: #f0f0f0;
  }
  
  .tooltip-icon {
	margin-right: 8px;
  }
  
  .tooltip-item.delete-item {
	color: red;
  }
  
  .tooltip-item.delete-item .tooltip-icon {
	color: red;
  }
  
  .tooltip-separator {
	height: 1px;
	background-color: lightgray;
	margin: 5px 0;
  }
  
  @media (max-width: 900px) {
	.mededeling-component__container {
	  flex-direction: column;
	  padding: 10px;
	}
  
	.mededeling-component__mededeling-item {
	  flex-direction: column;
	  align-items: flex-start;
	}
  
	.mededeling-component__mededeling-actions {
	  position: absolute;
	  top: 15px;
	  right: 15px;
	}
  }
  
  /* Existing Mededeling Form Styles */
  
  .mededeling-component__form {
	display: flex;
	flex-direction: column;
	gap: 20px;
  }
  
  .mededeling-component__form-group {
	display: flex;
	flex-direction: column;
  }
  
  .mededeling-component__label-with-tooltip {
	display: flex;
	align-items: center;
	margin-bottom: 5px;
  }
  
  .mededeling-component__input-container {
	display: flex;
	flex-wrap: wrap;
	gap: 20px;
  }
  
  .mededeling-component__date-time-group {
	display: flex;
	gap: 20px;
	width: 100%;
  }
  
  .mededeling-component__date-picker-wrapper,
  .mededeling-component__time-picker-wrapper {
	flex: 1;
	display: flex;
	flex-direction: column;
  }
  
  .mededeling-component__checkbox-group {
	display: flex;
	flex-wrap: wrap;
	gap: 10px;
	margin-top: 10px; /* Added margin for spacing */
  }
  
  .mededeling-component__checkbox-label {
	display: flex;
	align-items: center;
  }
  
  .mededeling-component__checkbox {
	margin-right: 5px;
  }
  
  .mededeling-component__submit-button {
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	transition: background-color 0.3s ease;
	align-self: flex-start;
  }
  
  .mededeling-component__submit-button:hover {
	background-color: #0056b3;
  }
  
  .mededeling-component__error {
	color: red;
	font-size: 0.9rem;
  }
  
  /* Header with Icon */
  .mededeling-component__header {
	display: flex;
	align-items: center;
	gap: 10px;
	margin-bottom: 20px;
  }
  
  .mededeling-icon {
	font-size: 24px;
	color: var(--color-blue);
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
	.mededeling-component__date-time-group {
	  flex-direction: column;
	}
  }
  

--- Mededeling/index.js ---
// src/Pages/Mededeling/index.js

import React, { useState, useEffect } from 'react';
import { withHeader } from '../../Components/Structural/Header/index.js';
import './css/mededeling.css';
import useApi from '../../Hooks/useApi';
import useNotification from '../../Components/Notification';
import MededelingForm from './MededelingForm';
import MededelingList from './MededelingList';

const Mededeling = () => {
  const api = useApi();
  const { triggerNotification, NotificationComponent } = useNotification();

  // State for the list of mededelingen
  const [mededelingen, setMededelingen] = useState([]);

  // Fetch the mededelingen at component mount
  useEffect(() => {
    const fetchMededelingen = async () => {
      try {
        const data = await api.get(`${window.baseDomain}api/mededeling`, { noCache: true });
        if (Array.isArray(data)) {
          setMededelingen(data);
        } else {
          setMededelingen([]);
        }
      } catch (error) {
        console.error('Error fetching mededelingen:', error);
        setMededelingen([]);
        triggerNotification('Fout bij het ophalen van mededelingen.', 'error');
      }
    };
    fetchMededelingen();
  }, [api, triggerNotification]);

  // Handler to refresh mededelingen
  const refreshMededelingen = async () => {
    try {
      const data = await api.get(`${window.baseDomain}api/mededeling`, { noCache: true });
      if (Array.isArray(data)) {
        setMededelingen(data);
      } else {
        setMededelingen([]);
      }
    } catch (error) {
      console.error('Error fetching mededelingen:', error);
      setMededelingen([]);
      triggerNotification('Fout bij het ophalen van mededelingen.', 'error');
    }
  };

  return (
    <div className="mededeling-component">
      <NotificationComponent />
      <div className="mededeling-component__container">
        <MededelingForm
          api={api}
          triggerNotification={triggerNotification}
          refreshMededelingen={refreshMededelingen}
        />
        <MededelingList
          mededelingen={mededelingen}
          api={api}
          triggerNotification={triggerNotification}
          refreshMededelingen={refreshMededelingen}
        />
      </div>
    </div>
  );
};

export default withHeader(Mededeling);


--- Menu/EditMenuModal.js ---
import React, { useState } from 'react';
import ModalWithoutTabs from '../../Components/Structural/Modal/Standard';
import './css/menu.css';

const EditMenuModal = ({
  isVisible,
  menu,
  api,
  triggerNotification,
  refreshMenus,
  onClose,
}) => {
  const [formData, setFormData] = useState({
    name: menu.name || '',
    startDate: menu.startDate || '',
    endDate: menu.endDate || '',
    startHour: menu.startHour || '',
    endHour: menu.endHour || '',
    daysOfWeek: menu.daysOfWeek || [],
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;

    if (type === 'checkbox') {
      const day = value;
      setFormData((prev) => {
        let daysOfWeek = [...prev.daysOfWeek];
        if (checked) {
          daysOfWeek.push(day);
        } else {
          daysOfWeek = daysOfWeek.filter((d) => d !== day);
        }
        return { ...prev, daysOfWeek };
      });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    setErrors({ ...errors, [name]: '' });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const validationErrors = {};
    if (!formData.name.trim()) validationErrors.name = 'Menu naam is verplicht.';
    if (!formData.startDate) validationErrors.startDate = 'Startdatum is verplicht.';
    if (!formData.endDate) validationErrors.endDate = 'Einddatum is verplicht.';
    if (!formData.startHour) validationErrors.startHour = 'Startuur is verplicht.';
    if (!formData.endHour) validationErrors.endHour = 'Einduur is verplicht.';
    if (formData.daysOfWeek.length === 0) validationErrors.daysOfWeek = 'Selecteer minstens één dag.';

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    const payload = {
      ...formData,
    };

    try {
      const response = await api.put(`${window.baseDomain}api/menu/${menu._id}`, payload);
      if (response) {
        triggerNotification('Menu succesvol bijgewerkt', 'success');
        refreshMenus();
        onClose();
      } else {
        triggerNotification('Fout bij het bijwerken van het menu', 'error');
      }
    } catch (error) {
      console.error('Error updating menu:', error);
      triggerNotification('Fout bij het bijwerken van het menu', 'error');
    }
  };

  if (!isVisible) return null;

  return (
    <ModalWithoutTabs
      onClose={onClose}
      content={
        <div className="menu-component__edit-modal">
          <form className="menu-component__form" onSubmit={handleSubmit}>
            <div className="menu-component__form-group">
              <label>Menu Naam</label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className="menu-component__input"
              />
              {errors.name && <p className="menu-component__error">{errors.name}</p>}
            </div>

            <div className="menu-component__form-group">
              <label>Start Datum</label>
              <input
                type="date"
                name="startDate"
                value={formData.startDate}
                onChange={handleChange}
                className="menu-component__input"
              />
              {errors.startDate && <p className="menu-component__error">{errors.startDate}</p>}
            </div>

            <div className="menu-component__form-group">
              <label>Eind Datum</label>
              <input
                type="date"
                name="endDate"
                value={formData.endDate}
                onChange={handleChange}
                className="menu-component__input"
              />
              {errors.endDate && <p className="menu-component__error">{errors.endDate}</p>}
            </div>

            <div className="menu-component__form-group">
              <label>Start Uur</label>
              <input
                type="time"
                name="startHour"
                value={formData.startHour}
                onChange={handleChange}
                className="menu-component__input"
              />
              {errors.startHour && <p className="menu-component__error">{errors.startHour}</p>}
            </div>

            <div className="menu-component__form-group">
              <label>Eind Uur</label>
              <input
                type="time"
                name="endHour"
                value={formData.endHour}
                onChange={handleChange}
                className="menu-component__input"
              />
              {errors.endHour && <p className="menu-component__error">{errors.endHour}</p>}
            </div>

            <div className="menu-component__form-group">
              <label>Dagen van de week</label>
              <div className="menu-component__checkbox-group">
                {['maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag', 'zondag'].map(
                  (day) => (
                    <label key={day} className="menu-component__checkbox-label">
                      <input
                        type="checkbox"
                        name="daysOfWeek"
                        value={day}
                        checked={formData.daysOfWeek.includes(day)}
                        onChange={handleChange}
                        className="menu-component__checkbox"
                      />
                      {day}
                    </label>
                  )
                )}
              </div>
              {errors.daysOfWeek && <p className="menu-component__error">{errors.daysOfWeek}</p>}
            </div>

            <button type="submit" className="button-style-3">
              Menu Bijwerken
            </button>
          </form>
        </div>
      }
    />
  );
};

export default EditMenuModal;


--- Menu/MenuForm.js ---
import React, { useState } from 'react';
import './css/menu.css';

const MenuForm = ({ api, triggerNotification, refreshMenus }) => {
  const [formData, setFormData] = useState({
    name: '',
    startDate: '',
    endDate: '',
    startHour: '',
    endHour: '',
    daysOfWeek: [],
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;

    if (type === 'checkbox') {
      const day = value;
      setFormData((prevFormData) => {
        let daysOfWeek = [...prevFormData.daysOfWeek];
        if (checked) {
          daysOfWeek.push(day);
        } else {
          daysOfWeek = daysOfWeek.filter((d) => d !== day);
        }
        return { ...prevFormData, daysOfWeek };
      });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    setErrors({ ...errors, [name]: '' });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const validationErrors = {};
    if (!formData.name.trim()) validationErrors.name = 'Menu naam is verplicht.';
    if (!formData.startDate) validationErrors.startDate = 'Startdatum is verplicht.';
    if (!formData.endDate) validationErrors.endDate = 'Einddatum is verplicht.';
    if (!formData.startHour) validationErrors.startHour = 'Startuur is verplicht.';
    if (!formData.endHour) validationErrors.endHour = 'Einduur is verplicht.';
    if (formData.daysOfWeek.length === 0) validationErrors.daysOfWeek = 'Selecteer minstens één dag.';

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    const payload = {
      name: formData.name,
      startDate: formData.startDate,
      endDate: formData.endDate,
      startHour: formData.startHour,
      endHour: formData.endHour,
      daysOfWeek: formData.daysOfWeek,
    };

    try {
      const response = await api.post(`${window.baseDomain}api/menu`, payload);
      if (response) {
        setFormData({
          name: '',
          startDate: '',
          endDate: '',
          startHour: '',
          endHour: '',
          daysOfWeek: [],
        });
        setErrors({});
        triggerNotification('Menu succesvol toegevoegd', 'success');
        refreshMenus();
      } else {
        triggerNotification('Fout bij het toevoegen van het menu', 'error');
      }
    } catch (error) {
      console.error('Error adding menu:', error);
      triggerNotification('Fout bij het toevoegen van het menu', 'error');
    }
  };

  return (
    <form className="menu-component__form" onSubmit={handleSubmit}>
      <div className="menu-component__form-group">
        <label>Menu Naam</label>
        <input
          type="text"
          name="name"
          value={formData.name}
          onChange={handleChange}
          placeholder="Menu Naam"
          className="menu-component__input"
        />
        {errors.name && <p className="menu-component__error">{errors.name}</p>}
      </div>

      <div className="menu-component__form-group">
        <label>Start Datum</label>
        <input
          type="date"
          name="startDate"
          value={formData.startDate}
          onChange={handleChange}
          className="menu-component__input"
        />
        {errors.startDate && <p className="menu-component__error">{errors.startDate}</p>}
      </div>

      <div className="menu-component__form-group">
        <label>Eind Datum</label>
        <input
          type="date"
          name="endDate"
          value={formData.endDate}
          onChange={handleChange}
          className="menu-component__input"
        />
        {errors.endDate && <p className="menu-component__error">{errors.endDate}</p>}
      </div>

      <div className="menu-component__form-group">
        <label>Start Uur</label>
        <input
          type="time"
          name="startHour"
          value={formData.startHour}
          onChange={handleChange}
          className="menu-component__input"
        />
        {errors.startHour && <p className="menu-component__error">{errors.startHour}</p>}
      </div>

      <div className="menu-component__form-group">
        <label>Eind Uur</label>
        <input
          type="time"
          name="endHour"
          value={formData.endHour}
          onChange={handleChange}
          className="menu-component__input"
        />
        {errors.endHour && <p className="menu-component__error">{errors.endHour}</p>}
      </div>

      <div className="menu-component__form-group">
        <label>Dagen van de week</label>
        <div className="menu-component__checkbox-group">
          {['maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag', 'zondag'].map(
            (day) => (
              <label key={day} className="menu-component__checkbox-label">
                <input
                  type="checkbox"
                  name="daysOfWeek"
                  value={day}
                  checked={formData.daysOfWeek.includes(day)}
                  onChange={handleChange}
                  className="menu-component__checkbox"
                />
                {day.charAt(0).toUpperCase() + day.slice(1)}
              </label>
            )
          )}
        </div>
        {errors.daysOfWeek && <p className="menu-component__error">{errors.daysOfWeek}</p>}
      </div>

      <button type="submit" className="button-style-3">
        Menu Toevoegen
      </button>
    </form>
  );
};

export default MenuForm;


--- Menu/MenuItem.js ---
import React, { useState } from 'react';
import './css/menu.css';
import { FaEllipsisV, FaPencilAlt, FaTrashAlt } from 'react-icons/fa'; // Import additional icons
import ConfirmationModal from '../../Components/Structural/Modal/Delete'; // Adjust the path if necessary
import EditMenuModal from './EditMenuModal';

const MenuItem = ({ menu, api, triggerNotification, refreshMenus }) => {
  const [isTooltipOpen, setIsTooltipOpen] = useState(false);
  const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
  const [isEditModalVisible, setIsEditModalVisible] = useState(false);

  const handleEllipsisClick = () => {
    setIsTooltipOpen(!isTooltipOpen);
  };

  const handleDeleteClick = () => {
    setIsDeleteModalVisible(true);
    setIsTooltipOpen(false);
  };

  const handleEditClick = () => {
    setIsEditModalVisible(true);
    setIsTooltipOpen(false);
  };

  const handleConfirmDelete = async () => {
    setIsDeleteModalVisible(false);
    try {
      await api.delete(`${window.baseDomain}api/menu/${menu._id}`);
      triggerNotification('Menu succesvol verwijderd', 'success');
      refreshMenus();
    } catch (error) {
      console.error('Error deleting menu:', error);
      triggerNotification('Fout bij het verwijderen van het menu', 'error');
    }
  };

  const handleCancelDelete = () => {
    setIsDeleteModalVisible(false);
  };

  return (
    <div className="menu-component__menu-item">
      <div className="menu-component__menu-content">
        <h4>{menu.name}</h4>
        <p>
          Geldig van {menu.startDate} tot {menu.endDate}
        </p>
        <p>
          Van {menu.startHour} tot {menu.endHour}
        </p>
        <p>Dagen: {menu.daysOfWeek.join(', ')}</p>
      </div>
      <div className="menu-component__menu-actions">
        <FaEllipsisV onClick={handleEllipsisClick} className="menu-component__ellipsis-icon" />
        {isTooltipOpen && (
          <div className="tooltip-container">
            <div className="tooltip-item" onClick={handleEditClick}>
              <FaPencilAlt className="tooltip-icon" />
              Bewerken
            </div>
            <div className="tooltip-separator"></div>
            <div className="tooltip-item delete-item" onClick={handleDeleteClick}>
              <FaTrashAlt className="tooltip-icon" />
              Verwijderen
            </div>
          </div>
        )}
      </div>
      {isDeleteModalVisible && (
        <ConfirmationModal
          isVisible={isDeleteModalVisible}
          title="Menu Verwijderen"
          message="Weet u zeker dat u dit menu wilt verwijderen?"
          onConfirm={handleConfirmDelete}
          onCancel={handleCancelDelete}
          confirmText="Verwijderen"
          cancelText="Annuleren"
          confirmButtonClass="discard-button red"
          cancelButtonClass="cancel-button"
        />
      )}
      {isEditModalVisible && (
        <EditMenuModal
          isVisible={isEditModalVisible}
          menu={menu}
          api={api}
          triggerNotification={triggerNotification}
          refreshMenus={refreshMenus}
          onClose={() => setIsEditModalVisible(false)}
        />
      )}
    </div>
  );
};

export default MenuItem;


--- Menu/MenuList.js ---
// src/Pages/Menu/MenuList.js

import React from 'react';
import './css/menu.css';
import MenuItem from './MenuItem';

const MenuList = ({ menus, api, triggerNotification, refreshMenus }) => {
  return (
    <div className="menu-component__list">
      <h3>Menu's</h3>
      {menus.length > 0 ? (
        <div className="menu-component__menu-list">
          {menus.map((menu) => (
            <MenuItem
              key={menu._id}
              menu={menu}
              api={api}
              triggerNotification={triggerNotification}
              refreshMenus={refreshMenus}
            />
          ))}
        </div>
      ) : (
        <p>Geen menu's gevonden.</p>
      )}
    </div>
  );
};

export default MenuList;


--- Menu/css/menu.css ---
.menu-component {
	display: flex;
	flex-direction: column;
	gap: 20px;
	margin-top: 30px;
	padding-bottom: 80px;

  }
  
  .menu-component__title {
	font-size: 2rem;
	text-align: center;
  }
  
  .menu-component__container {
	display: flex;
	flex-direction: row;
	gap: 20px;
	flex-wrap: wrap;
  }
  
  .menu-component__form {
	flex: 1;
	display: flex;
	flex-direction: column;
	gap: 15px;
	max-width: 100%;
  }
  
  .menu-component__form-group {
	display: flex;
	flex-direction: column;
  }
  
  .menu-component__form-group label {
	margin-bottom: 5px;
	font-weight: 500;
  }
  
  .menu-component__input {
	width: 100%;
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: 5px;
	font-size: 1rem;
  }
  
  .menu-component__checkbox-group {
	display: flex;
	flex-wrap: wrap;
	gap: 10px;
  }
  
  .menu-component__checkbox-label {
	display: flex;
	align-items: center;
  }
  
  .menu-component__checkbox {
	margin-right: 5px;
  }
  
  .menu-component__submit-button {
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	transition: background-color 0.3s ease;
  }
  
  .menu-component__submit-button:hover {
	background-color: #0056b3;
  }
  
  .menu-component__error {
	color: var(--color-red);
	font-size: 0.9rem;
  }
  
  .menu-component__list {
	flex: 1;
  }
  
  .menu-component__menu-list {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  .menu-component__menu-item {
	border: 1px solid #ccc;
	border-radius: 8px;
	padding: 15px;
	position: relative;
	display: flex;
	justify-content: space-between;
	align-items: center;
  }
  
  .menu-component__menu-content h4 {
	margin: 0 0 5px 0;
  }
  
  .menu-component__menu-actions {
	position: relative;
  }
  
  .menu-component__ellipsis-icon {
	cursor: pointer;
	font-size: 18px;
	color: #555;
  }

  
  .menu-component__tooltip-item {
	padding: 8px 15px;
	cursor: pointer;
	display: flex;
	align-items: center;
	gap: 8px;
  }
  
  .menu-component__tooltip-item:hover {
	background-color: #f0f0f0;
  }
  
  .menu-component__tooltip-item.delete-item {
	color: red;
  }
  
  .menu-component__tooltip-item.delete-item:hover {
	background-color: #ffe6e6;
  }
  
  .menu-component__modal-title {
	text-align: center;
	margin-bottom: 20px;
  }
  
  .menu-component__edit-modal {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  /* Remove existing tooltip styles from menu.css */
  /* The following tooltip-related styles have been removed:
  .menu-component .label-with-tooltip {
	display: flex;
	align-items: center;
  }
  
  .menu-component .label-with-tooltip label {
	margin-right: 5px;
  }
  
  .menu-component .button-with-tooltip {
	position: relative;
	display: inline-block;
  }
  
  .menu-component .button-with-tooltip .tooltip {
	display: none; /* Initially hidden */
  /*   ... */
  /* }
  .menu-component .button-with-tooltip svg {
	cursor: pointer;
	color: #555;
	font-size: 16px;
  }
  .menu-component .button-with-tooltip svg:hover {
	color: #000;
  }
  */
  
  @media (max-width: 900px) {
	.menu-component__container {
	  flex-direction: column;
	  padding: 10px;

	}
  
	.menu-component__menu-item {
	  flex-direction: column;
	  align-items: flex-start;
	}
  
	.menu-component__menu-actions {
	  position: absolute;
	  top: 15px;
	  right: 15px;
	}
  }
  

  /* Existing Menu Form Styles */

.menu-component__form {
	display: flex;
	flex-direction: column;
	gap: 20px;
  }
  
  .menu-component__form-group {
	display: flex;
	flex-direction: column;
  }
  
  .menu-component__label-with-tooltip {
	display: flex;
	align-items: center;
	margin-bottom: 5px;
  }
  
  .menu-component__input-container {
	display: flex;
	flex-wrap: wrap;
	gap: 20px;
  }
  
  .menu-component__date-time-group {
	display: flex;
	gap: 20px;
	width: 100%;
  }
  
  .menu-component__date-picker-wrapper,
  .menu-component__time-picker-wrapper {
	flex: 1;
	display: flex;
	flex-direction: column;
  }
  
  .menu-component__checkbox-group {
	display: flex;
	flex-wrap: wrap;
	gap: 10px;
	margin-top: 10px; /* Added margin for spacing */
  }
  
  .menu-component__checkbox-label {
	display: flex;
	align-items: center;
  }
  
  .menu-component__checkbox {
	margin-right: 5px;
  }
  
  .menu-component__submit-button {
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	transition: background-color 0.3s ease;
	align-self: flex-start;
  }
  
  .menu-component__submit-button:hover {
	background-color: #0056b3;
  }
  
  .menu-component__error {
	color: red;
	font-size: 0.9rem;
  }
  
  /* Tooltip styles for Actions (Bewerken & Verwijderen) */
  .tooltip-container {
	position: absolute;
	bottom: 100%;
	right: 0;
	transform: translateY(-10px);
	background-color: white;
	border: 1px solid lightgray;
	border-radius: 5px;
	padding: 5px 0;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
	z-index: 1000;
  }
  
  .tooltip-item {
	display: flex;
	align-items: center;
	padding: 8px 15px;
	cursor: pointer;
  }
  
  .tooltip-item:hover {
	background-color: #f0f0f0;
  }
  
  .tooltip-icon {
	margin-right: 8px;
  }
  
  .tooltip-item.delete-item {
	color: red;
  }
  
  .tooltip-item.delete-item .tooltip-icon {
	color: red;
  }
  
  .tooltip-separator {
	height: 1px;
	background-color: lightgray;
	margin: 5px 0;
  }
  
  /* Header with Icon */
  .menu-component__header {
	display: flex;
	align-items: center;
	gap: 10px;
	margin-bottom: 20px;
  }
  
  .menu-icon {
	font-size: 24px;
	color: var(--color-blue);
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
	.menu-component__date-time-group {
	  flex-direction: column;
	}
  }
  

--- Menu/index.js ---
// src/Pages/Menu/index.js

import React, { useState, useEffect } from 'react';
import { withHeader } from '../../Components/Structural/Header/index.js';
import './css/menu.css';
import useApi from '../../Hooks/useApi';
import useNotification from '../../Components/Notification';
import MenuForm from './MenuForm';
import MenuList from './MenuList';

const Menu = () => {
  const api = useApi();
  const { triggerNotification, NotificationComponent } = useNotification();

  // State for the list of menus
  const [menus, setMenus] = useState([]);

  // Fetch the menus at component mount
  useEffect(() => {
    const fetchMenus = async () => {
      try {
        const data = await api.get(window.baseDomain + 'api/menu', { noCache: true });
        if (Array.isArray(data)) {
          setMenus(data);
        } else {
          setMenus([]);
        }
      } catch (error) {
        console.error('Error fetching menus:', error);
        setMenus([]);
        triggerNotification('Fout bij het ophalen van menu\'s.', 'error');
      }
    };
    fetchMenus();
  }, [api, triggerNotification]);

  // Handler to refresh menus
  const refreshMenus = async () => {
    try {
      const data = await api.get(window.baseDomain + 'api/menu', { noCache: true });
      if (Array.isArray(data)) {
        setMenus(data);
      } else {
        setMenus([]);
      }
    } catch (error) {
      console.error('Error fetching menus:', error);
      setMenus([]);
      triggerNotification('Fout bij het ophalen van menu\'s.', 'error');
    }
  };

  return (
    <div className="menu-component">
      <NotificationComponent />
      <div className="menu-component__container">
        <MenuForm
          api={api}
          triggerNotification={triggerNotification}
          refreshMenus={refreshMenus}
        />
        <MenuList
          menus={menus}
          api={api}
          triggerNotification={triggerNotification}
          refreshMenus={refreshMenus}
        />
      </div>
    </div>
  );
};

export default withHeader(Menu);


--- NewReservation/FormField.js ---
// src/components/Profile/FormField.jsx

import React from 'react';

const FormField = ({
  label,
  name,
  type = 'text',
  icon: Icon,
  value,
  onChange,
  error,
  placeholder,
  halfWidth,
  options = [], // New prop for select options
  selectPlaceholder = 'Selecteer een menu', // New prop for select placeholder
}) => {
  return (
    <div className={`form-group ${halfWidth ? 'half-width' : ''}`}>
      <div className="input-container">
        {Icon && <Icon className="input-icon" />}
        
        {type === 'select' ? (
          <select
            name={name}
            value={value}
            onChange={onChange}
            aria-label={label}
            className={`form-control ${error ? 'input-error' : ''}`}
          >
            <option value="">{selectPlaceholder}</option> {/* Dynamic placeholder */}
            {options.map((option) => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        ) : type === 'textarea' ? (
          <textarea
            name={name}
            value={value}
            onChange={onChange}
            placeholder={placeholder}
            aria-label={label}
            className={`form-control ${error ? 'input-error' : ''}`}
          />
        ) : (
          <input
            type={type}
            name={name}
            placeholder={placeholder}
            value={value}
            onChange={onChange}
            aria-label={label}
            className={`form-control ${error ? 'input-error' : ''}`}
          />
        )}
      </div>
      {error && <p className="form-error">{error}</p>}
    </div>
  );
};

export default FormField;


--- NewReservation/ReservationSidebar.js ---
// src/components/ReservationSidebar.js

import React, { useEffect, useState } from 'react';
import ReservationStepOne from './StepOne';
import ReservationStepTwoFiltering from './ReservationStepTwo';
import ReservationSummary from './ReservationSummary';
import { FaTimes } from 'react-icons/fa';
import './css/reservationSidebar.css';
import useApi from '../../Hooks/useApi';
import moment from 'moment-timezone'; // Import moment-timezone for timezone handling
import FormField from './FormField';

const ReservationSidebar = ({
  isOpen,
  onClose,
  formData,
  errors,
  handleChange,
  handleFinalSubmit,
  setFormData,
  isSubmitting,
  reservationSubmitted,
  onNewReservation,
}) => {
  const api = useApi();
  const [timeblocks, setTimeblocks] = useState([]);
  const [loadingTimeblocks, setLoadingTimeblocks] = useState(false);
  const [timeblocksError, setTimeblocksError] = useState(null);
  const [menuData, setMenuData] = useState([]);
  const [restaurantData, setRestaurantData] = useState([]);
  
  // New states for personeel
  const [availablePersoneel, setAvailablePersoneel] = useState([]);

  useEffect(() => {
    if (isOpen) {
      setLoadingTimeblocks(true);
      const fetchData = async () => {
        try {
          console.log("New Reservation GET");
          const data = await api.get(`${window.baseDomain}api/auth-restaurant/`, { noCache: true });
          setTimeblocks(data.timeblocks || []);
          window.timeblocks = data.timeblocks || [];
          const generalSettings = data['general-settings'] || {};
          window.generalSettings = generalSettings;
          setMenuData(data.menu || []);
          setRestaurantData(data);

          
          // Fetch personeel data
          const personeelData = await api.get(`${window.baseDomain}api/personeel`, { noCache: true });
          const currentDateCEST = moment().tz('Europe/Amsterdam').startOf('day'); // CEST timezone

          const filteredPersoneel = personeelData.filter((personeel) => {
            const startDate = moment(personeel.startDate, 'YYYY-MM-DD').tz('Europe/Amsterdam').startOf('day');
            const endDate = moment(personeel.endDate, 'YYYY-MM-DD').tz('Europe/Amsterdam').endOf('day');
            return currentDateCEST.isBetween(startDate, endDate, null, '[]'); // Inclusive
          });

          setAvailablePersoneel(filteredPersoneel);
        } catch (err) {
          setTimeblocksError(err);
          console.error('Error fetching data:', err);
        } finally {
          setLoadingTimeblocks(false);
        }
      };
      fetchData();
    }
  }, [isOpen, api]);

  return (
    <div className={`reservation-sidebar-component ${isOpen ? 'open' : ''}`}>
      <div className="reservation-sidebar-content">
        <h2 className='admin-title'>Admin Reservatie</h2>

        <button className="close-sidebar-button" onClick={onClose}>
          <FaTimes size={20} color="#000" />
        </button>
        {reservationSubmitted ? (
          <ReservationSummary
            formData={formData}
            onNewReservation={() => {
              setFormData({
                guests: '',
                date: '',
                time: '',
                firstName: '',
                lastName: '',
                email: '',
                phone: '',
                extraInfo: '',
                menu: '',
                personeel: '', // Reset personeel selection
              });
              onNewReservation();
            }}
          />
        ) : (
          <>
            {/* Personeel Selection Box */}
            {availablePersoneel.length > 0 && (
              <div className="sidebar-section-personeel">
                <FormField
                  label=""
                  name="personeel"
                  type="select"
                  options={availablePersoneel.map((personeel) => ({
                    value: `${personeel.voornaam} ${personeel.achternaam}`,
                    label: `${personeel.voornaam} ${personeel.achternaam}`,
                  }))}
                  value={formData.personeel}
                  onChange={handleChange}
                  error={errors.personeel}
				  selectPlaceholder="Toewijzen aan persoon"
                />
              </div>
            )}

            <div className="sidebar-section-one">
              <ReservationStepOne
                formData={formData}
                errors={errors}
                handleChange={handleChange}
                setFormData={setFormData}
                timeblocks={timeblocks}
                loadingTimeblocks={loadingTimeblocks}
                timeblocksError={timeblocksError}
                restaurantData={restaurantData}
              />
            </div>
            <div className="sidebar-section-two">
              <ReservationStepTwoFiltering
                formData={formData}
                errors={errors}
                handleChange={handleChange}
                isSubmitting={isSubmitting}
                menuData={menuData}
              />
            </div>
            <div className="reservation-footer">
              <button
                type="button"
                className="store-reservation-button"
                onClick={handleFinalSubmit}
                disabled={isSubmitting}
              >
                {isSubmitting ? 'Opslaan...' : 'Opslaan'}
              </button>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default ReservationSidebar;


--- NewReservation/ReservationStepTwo.js ---
import React, { useState, useEffect } from 'react';
import FormField from './FormField';
import { FaUser, FaPhone, FaInfoCircle, FaEnvelope } from 'react-icons/fa';
import moment from 'moment';
import 'moment/locale/nl'; // Import Dutch locale
import './css/reservationsStepTwo.css';

const ReservationStepTwoFiltering = ({
  formData,
  errors,
  handleChange,
  isSubmitting,
  menuData,
}) => {
  const [availableMenus, setAvailableMenus] = useState([]);

  useEffect(() => {
    moment.locale('nl'); // Set locale to Dutch
    if (formData.date && formData.time && menuData.length > 0) {
      const selectedDate = formData.date; // 'YYYY-MM-DD' format
      const selectedTime = formData.time; // 'HH:mm' format
      const selectedDateTime = moment(`${selectedDate} ${selectedTime}`, 'YYYY-MM-DD HH:mm');

      const filteredMenus = menuData.filter((menu) => {
        const menuStartDate = moment(menu.startDate, 'YYYY-MM-DD');
        const menuEndDate = moment(menu.endDate, 'YYYY-MM-DD');
        const isDateInRange = selectedDateTime.isBetween(menuStartDate, menuEndDate, 'day', '[]');

        const menuStartTime = moment(menu.startHour, 'HH:mm');
        const menuEndTime = moment(menu.endHour, 'HH:mm');
        const selectedTimeMoment = moment(selectedTime, 'HH:mm');
        const isTimeInRange = selectedTimeMoment.isBetween(menuStartTime, menuEndTime, 'minute', '[]');

        const selectedDayOfWeek = selectedDateTime.format('dddd').toLowerCase();
        const daysOfWeek = menu.daysOfWeek.map((day) => day.toLowerCase());
        const isDayMatching = daysOfWeek.length === 0 || daysOfWeek.includes(selectedDayOfWeek);

        return isDateInRange && isTimeInRange && isDayMatching;
      });

      setAvailableMenus(filteredMenus);
    } else {
      setAvailableMenus([]);
    }
  }, [formData.date, formData.time, menuData]);

  return (
    <div className="reservation-step-two">
      <div className="account-manage-form" noValidate>
        {/* Name Fields Container */}


        {/* Menu Selection Box */}
        {availableMenus.length > 0 && (
          <FormField
            label="Menu"
            name="menu"
            type="select"
            options={availableMenus.map((menu) => ({
              value: menu.name, // Adjust according to your data structure
              label: menu.name,
            }))}
            value={formData.menu}
            onChange={handleChange}
            error={errors.menu}
          />
        )}
        
        <div className="name-fields">
          <FormField
            label="Voornaam"
            name="firstName"
            placeholder="Voornaam"
            value={formData.firstName}
            onChange={handleChange}
            error={errors.firstName}
            icon={FaUser}
          />
          <FormField
            label="Achternaam"
            name="lastName"
            placeholder="Achternaam"
            value={formData.lastName}
            onChange={handleChange}
            error={errors.lastName}
            icon={FaUser}
          />
        </div>

        {/* Other Form Fields */}
        <FormField
          label="E-mail"
          name="email"
          type="email"
          placeholder="E-mailadres"
          value={formData.email}
          onChange={handleChange}
          error={errors.email}
          icon={FaEnvelope}
        />
        <FormField
          label="Telefoonnummer"
          name="phone"
          type="tel"
          placeholder="Telefoonnummer"
          value={formData.phone}
          onChange={handleChange}
          error={errors.phone}
          icon={FaPhone}
        />
        <FormField
          label="Extra info"
          name="extraInfo"
          type="textarea"
          placeholder="Extra informatie"
          value={formData.extraInfo}
          onChange={handleChange}
          error={errors.extraInfo}
          icon={FaInfoCircle}
        />
      </div>
    </div>
  );
};

export default ReservationStepTwoFiltering;


--- NewReservation/ReservationSummary.js ---
// src/components/ReservationForm/ReservationSummary.jsx

import React from 'react';
import './css/reservationSummary.css'; // Import the CSS file

const ReservationSummary = ({ formData, onNewReservation }) => {
  return (
    <div className="reservation-summary">
      <ul className="reservation-details">
        <li><strong>Reservatie Gegevens:</strong></li> 
        <li><strong>Aantal gasten:</strong> {formData.guests}</li> {/* Uses guests */}
        <li><strong>Datum:</strong> {formData.date}</li>
        <li><strong>Tijd:</strong> {formData.time}</li>
        <li><strong>Voornaam:</strong> {formData.firstName}</li>
        <li><strong>Achternaam:</strong> {formData.lastName}</li>
        <li><strong>Email:</strong> {formData.email}</li>
        <li><strong>Telefoonnummer:</strong> {formData.phone}</li>
        {formData.menu && (
          <li><strong>Menu:</strong> {formData.menu}</li>
        )}
        {formData.personeel && (
          <li><strong>Aangemaakt door:</strong> {formData.personeel}</li>
        )}
        {formData.extraInfo && (
          <li><strong>Extra informatie:</strong> {formData.extraInfo}</li>
        )}
      </ul>
      <button className="button-style-3" onClick={onNewReservation}>
        Nieuwe Reservatie Maken
      </button>
    </div>
  );
};

export default ReservationSummary;


--- NewReservation/StepOne/Calendar.js ---
import React, { useState, useEffect, useRef } from 'react';
import moment from 'moment-timezone';
import 'moment/locale/nl';
import { isWeekInPast, isSameDay } from './Utils/dateUtils';
import './css/calendar.css';
import { isDateAvailable } from './algorithm/isDateAvailable'; // Import isDateAvailable

moment.locale('nl'); // Set moment to Dutch locale

const Calendar = ({
  guests,
  selectedDate,
  onSelectDate,
  autoExpand,
  reservationMode, // Receive reservationMode as prop
  restaurantData,
  startDate,
  onWeekChange,
  reservations,
}) => {
  const [isExpanded, setIsExpanded] = useState(autoExpand || false);
  const calendarRef = useRef(null);

  const maxDate = moment().tz('Europe/Amsterdam').add(1, 'year').endOf('day');

  useEffect(() => {
    if (autoExpand) {
      setIsExpanded(true);
    }
  }, [autoExpand]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        calendarRef.current &&
        !calendarRef.current.contains(event.target)
      ) {
        setIsExpanded(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const generateCalendarDays = (startDate) => {
    const days = [];
    const today = moment().tz('Europe/Amsterdam').startOf('day');
    const twoWeeksFromStart = startDate.clone().add(13, 'days');

    let date = startDate.clone();
    while (date.isSameOrBefore(twoWeeksFromStart, 'day')) {
      const formattedDate = date.format('YYYY-MM-DD');
      const adjustedGuests =
        reservationMode !== 'met_limieten' ? -10000 : guests; // Adjust guests

      const isAvailable = isDateAvailable(
        restaurantData,
        formattedDate,
        reservations,
        adjustedGuests // Use adjustedGuests
      );

      days.push({
        date: date.clone(),
        isPast: date.isBefore(today, 'day'),
        isFuture: date.isAfter(maxDate, 'day'),
        isAvailable: isAvailable,
      });

      date.add(1, 'day');
    }

    return days;
  };

  const handleDateClick = (day) => {
    if (day.isAvailable && !day.isPast && !day.isFuture) {
      const formattedDate = day.date.format('YYYY-MM-DD');
      onSelectDate(formattedDate); // Notify parent
      setIsExpanded(false);
    } else {
      console.log('Date is not available for selection.');
    }
  };

  const handlePrevWeek = () => {
    const newStartDate = startDate.clone().subtract(1, 'week');
    if (isWeekInPast(newStartDate)) {
      console.log('Cannot go to previous week. It is in the past.');
      return;
    }
    onWeekChange(newStartDate);
  };

  const handleNextWeek = () => {
    const newStartDate = startDate.clone().add(1, 'week');
    onWeekChange(newStartDate);
  };

  const formatDisplayDate = () => {
    if (!selectedDate) {
      return 'Selecteer een datum'; // "Select a date" in Dutch
    }

    const selectedMoment = moment(selectedDate, 'YYYY-MM-DD')
      .tz('Europe/Amsterdam')
      .startOf('day');
    const today = moment().tz('Europe/Amsterdam').startOf('day');
    const tomorrow = moment()
      .tz('Europe/Amsterdam')
      .add(1, 'day')
      .startOf('day');

    if (selectedMoment.isSame(today, 'day')) {
      return 'Vandaag'; // "Today" in Dutch
    } else if (selectedMoment.isSame(tomorrow, 'day')) {
      return 'Morgen'; // "Tomorrow" in Dutch
    } else {
      // Format: e.g., "Maandag 1 Januari 2023"
      return selectedMoment.format('dddd D MMMM YYYY');
    }
  };

  // Recalculate days whenever startDate, guests, reservations, restaurantData, or reservationMode change
  const days = startDate ? generateCalendarDays(startDate) : [];

  return (
    <div className="calendar-container" ref={calendarRef}>
      <div
        className="calendar-display"
        onClick={() => {
          setIsExpanded(!isExpanded);
        }}
      >
        <span>{formatDisplayDate()}</span>
        <span className="arrow">
          <svg
            width="12"
            height="12"
            viewBox="0 0 24 24"
            style={{
              transform: isExpanded ? 'rotate(180deg)' : 'rotate(0deg)',
              transition: 'transform 0.2s',
            }}
          >
            <path
              d="M7 10l5 5 5-5"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
            />
          </svg>
        </span>
      </div>
      {isExpanded && startDate && (
        <div className="calendar">
          <div className="calendar-header">
            <button type="button" onClick={handlePrevWeek}>
              &lt;
            </button>
            <span>
              {startDate.format('DD MMM')} -{' '}
              {startDate.clone().add(13, 'days').format('DD MMM YYYY')}
            </span>
            <button type="button" onClick={handleNextWeek}>
              &gt;
            </button>
          </div>
          <div className="calendar-weeks-wrapper">
            <table className="calendar-table">
              <thead>
                <tr>
                  {['Ma', 'Di', 'Wo', 'Do', 'Vr', 'Za', 'Zo'].map((day) => (
                    <th key={day}>{day}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {Array.from({ length: 2 }).map((_, weekIndex) => (
                  <tr key={weekIndex}>
                    {days
                      .slice(weekIndex * 7, weekIndex * 7 + 7)
                      .map((dayObj, index) => {
                        const isSelected =
                          selectedDate &&
                          isSameDay(
                            dayObj.date,
                            moment(selectedDate, 'YYYY-MM-DD').tz(
                              'Europe/Amsterdam'
                            )
                          );
                        const classNames = [];
                        if (dayObj.isPast) {
                          classNames.push('gray-out');
                        } else if (dayObj.isAvailable) {
                          classNames.push('available');
                        } else {
                          classNames.push('unavailable');
                        }
                        if (isSelected) {
                          classNames.push('selected');
                        }

                        return (
                          <td
                            key={index}
                            className={classNames.join(' ')}
                            onClick={() => handleDateClick(dayObj)}
                            style={{
                              '--animation-order': index + weekIndex * 7,
                            }}
                          >
                            <div className="day-square">
                              {dayObj.date.date()}
                            </div>
                          </td>
                        );
                      })}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  );
};

export default Calendar;


--- NewReservation/StepOne/DateSelector.js ---
import React from 'react';
import Calendar from './Calendar';
import moment from 'moment';

const DateSelector = ({
  guests,
  formData,
  handleChange,
  resetFormDataFields,
  timeblocks,
  restaurantData,
  reservations,
  startDate,
  onWeekChange,
  reservationMode, // Receive reservationMode as prop
}) => {
  const handleDateSelect = (date) => {
    const formattedDate = moment(date).format('YYYY-MM-DD');
    console.log('Selected date:', formattedDate);
    handleChange({
      target: { name: 'date', value: formattedDate },
    });
    resetFormDataFields(['time']);
  };

  return (
    <div className="form-group date-selector-container">
      <Calendar
        guests={guests}
        selectedDate={formData.date || null}
        onSelectDate={handleDateSelect}
        autoExpand={false}
        reservationMode={reservationMode} // Pass reservationMode to Calendar
        restaurantData={restaurantData}
        startDate={startDate}
        onWeekChange={onWeekChange}
        reservations={reservations}
      />
    </div>
  );
};

export default DateSelector;


--- NewReservation/StepOne/TimeSelector.js ---
import React, { useState, useEffect, useRef } from 'react';
import './css/timeSelector.css';
import { getAvailableTimeblocks } from './algorithm/getAvailableTimeblocks';

const TimeSelector = ({
  guests,
  formData,
  handleChange,
  field,
  selectedDate,
  expanded,
  setCurrentExpandedField,
  restaurantData,
  reservations,
  reservationMode, // Receive reservationMode as prop
}) => {
  const [isExpanded, setIsExpanded] = useState(expanded || false);
  const [availableTimes, setAvailableTimes] = useState([]);
  const timeSelectorRef = useRef(null);

  useEffect(() => {
    if (selectedDate && guests && restaurantData && reservations) {
      const adjustedGuests =
        reservationMode !== 'met_limieten' ? -10000 : guests; // Adjust guests
      const timeblocks = getAvailableTimeblocks(
        restaurantData,
        selectedDate,
        reservations,
        adjustedGuests // Use adjustedGuests
      );

      // Convert timeblocks object to array suitable for rendering
      const times = Object.keys(timeblocks).map((time) => ({
        value: time,
        label: timeblocks[time].name || time,
      }));

      // Sort times
      times.sort((a, b) => {
        const [aHours, aMinutes] = a.value.split(':').map(Number);
        const [bHours, bMinutes] = b.value.split(':').map(Number);
        return aHours * 60 + aMinutes - (bHours * 60 + bMinutes);
      });

      setAvailableTimes(times);
    } else {
      setAvailableTimes([]);
    }
  }, [
    selectedDate,
    guests,
    restaurantData,
    reservations,
    reservationMode, // Add reservationMode to dependencies
  ]);

  const handleTimeSelect = (timeValue) => {
    handleChange({
      target: { name: field.id, value: timeValue },
    });
    setIsExpanded(false);
    if (setCurrentExpandedField) {
      setCurrentExpandedField(null);
    }
  };

  const formatDisplayTime = () => {
    if (formData[field.id]) {
      const selected = availableTimes.find(
        (time) => time.value === formData[field.id]
      );
      return selected ? selected.label : 'Selecteer een tijd';
    }
    return 'Selecteer een tijd';
  };

  if (!field) {
    return null;
  }

  return (
    <div className="form-group time-selector-container" ref={timeSelectorRef}>
      {!selectedDate ? (
        <p className="info-text">Selecteer eerst een datum.</p>
      ) : (
        <>
          <div
            className="time-display"
            onClick={() => {
              setIsExpanded(!isExpanded);
              if (!isExpanded && setCurrentExpandedField) {
                setCurrentExpandedField('time');
              }
            }}
          >
            <span>{formatDisplayTime()}</span>
            <span className="arrow">
              <svg
                width="12"
                height="12"
                viewBox="0 0 24 24"
                style={{
                  transform: isExpanded ? 'rotate(180deg)' : 'rotate(0deg)',
                  transition: 'transform 0.2s',
                }}
              >
                <path
                  d="M7 10l5 5 5-5"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                />
              </svg>
            </span>
          </div>
          {isExpanded && (
            <div className="time-selector">
              {availableTimes.length === 0 ? (
                <div className="no-times">Geen beschikbare tijden.</div>
              ) : (
                <div className="time-options">
                  {availableTimes.map((time) => (
                    <div
                      key={time.value}
                      className={`time-option ${
                        formData[field.id] === time.value ? 'selected' : ''
                      }`}
                      onClick={() => handleTimeSelect(time.value)}
                    >
                      {time.label}
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default TimeSelector;


--- NewReservation/StepOne/Utils/dateUtils.js ---
// src/Pages/NewReservation/Utils/dateUtils.js

import moment from 'moment-timezone';

export const isWeekInPast = (weekStartDate) => {
  const today = moment().tz('Europe/Brussels').startOf('day');
  const weekEndDate = weekStartDate.clone().add(6, 'days').endOf('day');
  return weekEndDate.isBefore(today);
};

export const isSameDay = (date1, date2) => date1.isSame(date2, 'day');


--- NewReservation/StepOne/Utils/dates/blockDates.js ---
// src/Pages/NewReservation/Utils/dates/blockDates.js

import { DateTime } from 'luxon';

const getOrInitializeArray = (dict, key) => {
  if (!Array.isArray(dict[key])) {
    dict[key] = [];
  }
  return dict[key];
};

const initializeDictionaries = () => {
  window.dateDictionary = window.dateDictionary || {};
  window.shiftsPerDate = window.shiftsPerDate || {};
};

const processTimeblock = (block) => {
  if (!block.date) {
    return;
  }

  const dateString = DateTime.fromISO(block.date, { zone: 'Europe/Brussels' }).toISODate();

  // Check if date is in closedDates
  if (window.closedDates.has(dateString)) {
    return;
  }

  // Check for exceptional openings
  if (window.exceptionalOpenings[dateString]) {
    const exceptionalOpening = window.exceptionalOpenings[dateString];
    window.dateDictionary[dateString] = [
      {
        startTime: exceptionalOpening.startTime,
        endTime: exceptionalOpening.endTime,
      },
    ];
  } else {
    // Use the block's times
    if (!window.dateDictionary[dateString]) {
      window.dateDictionary[dateString] = [];
    }
    window.dateDictionary[dateString].push({
      startTime: block.startTime || null,
      endTime: block.endTime || null,
    });
  }

  // Process shifts
  if (block.shifts && Array.isArray(block.shifts) && block.shifts.length > 0) {
    const shiftsArray = getOrInitializeArray(window.shiftsPerDate, dateString);

    block.shifts.forEach((shift) => {
      const exists = shiftsArray.some(
        (existingShift) =>
          existingShift.name === shift.name && existingShift.startTime === shift.startTime
      );
      if (!exists) {
        shiftsArray.push({
          name: shift.name || '',
          startTime: shift.startTime || '',
          endTime: shift.endTime || null,
        });
      }
    });
  }
};

export const getBlockSettingsDates = (timeblocks) => {
  initializeDictionaries();
  const dates = [];

  timeblocks.forEach((block) => {
    processTimeblock(block);
    // Do not add date if not in dateDictionary (i.e., date was skipped)
    if (block.date) {
      const dateString = DateTime.fromISO(block.date, { zone: 'Europe/Brussels' }).toISODate();
      if (window.dateDictionary[dateString]) {
        dates.push(dateString);
      }
    }
  });

  return dates;
};


--- NewReservation/StepOne/Utils/dates/schemeDates.js ---
// src/Pages/NewReservation/Utils/dates/schemeDates.js

import { DateTime } from 'luxon';

const getOrInitializeArray = (dict, key) => {
  if (!Array.isArray(dict[key])) {
    dict[key] = [];
  }
  return dict[key];
};

const initializeDictionaries = () => {
  window.dateDictionary = window.dateDictionary || {};
  window.shiftsPerDate = window.shiftsPerDate || {};
};

const isWithinPeriod = (currentDate, endDate) => {
  return currentDate <= endDate;
};

const processDaySetting = (dateString, daySetting) => {
  // Check if date is in closedDates
  if (window.closedDates.has(dateString)) {
    return;
  }

  // Check for exceptional openings
  if (window.exceptionalOpenings[dateString]) {
    const exceptionalOpening = window.exceptionalOpenings[dateString];
    window.dateDictionary[dateString] = [
      {
        startTime: exceptionalOpening.startTime,
        endTime: exceptionalOpening.endTime,
      },
    ];
  } else {
    // Use the daySetting's times
    if (!window.dateDictionary[dateString]) {
      window.dateDictionary[dateString] = [];
    }
    window.dateDictionary[dateString].push({
      startTime: daySetting.startTime || null,
      endTime: daySetting.endTime || null,
    });
  }

  // Process shifts
  if (
    daySetting.shiftsEnabled &&
    Array.isArray(daySetting.shifts) &&
    daySetting.shifts.length > 0
  ) {
    const shiftsArray = getOrInitializeArray(window.shiftsPerDate, dateString);

    daySetting.shifts.forEach((shift) => {
      const exists = shiftsArray.some(
        (existingShift) =>
          existingShift.name === shift.name && existingShift.startTime === shift.startTime
      );
      if (!exists) {
        shiftsArray.push({
          name: shift.name || '',
          startTime: shift.startTime || '',
          endTime: shift.endTime || null,
        });
      }
    });
  }
};

export const getSchemeSettingsDates = (timeblocks, maxDate) => {
  initializeDictionaries();
  const dates = [];
  const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

  timeblocks.forEach((block) => {
    if (!block.schemeSettings) {
      return;
    }

    const { schemeSettings } = block;
    let currentDate = DateTime.now().setZone('Europe/Brussels').startOf('day');

    // Adjust endDate based on dagenInToekomst
    let endDate = maxDate;

    if (schemeSettings.period && schemeSettings.period.enabled) {
      const { startDate, endDate: periodEndDate } = schemeSettings.period;
      if (startDate && periodEndDate) {
        currentDate = DateTime.fromISO(startDate, { zone: 'Europe/Brussels' }).startOf('day');
        const schemeEndDate = DateTime.fromISO(periodEndDate, { zone: 'Europe/Brussels' }).endOf('day');
        // Use the minimum of schemeEndDate and maxDate
        endDate = schemeEndDate < maxDate ? schemeEndDate : maxDate;
      }
    }

    while (isWithinPeriod(currentDate, endDate)) {
      const dayOfWeek = currentDate.weekday % 7;
      const dayName = dayNames[dayOfWeek];
      const daySetting = schemeSettings[dayName];
      const dateString = currentDate.toISODate();
      if (daySetting && daySetting.enabled) {
        processDaySetting(dateString, daySetting);
        if (window.dateDictionary[dateString]) {
          dates.push(dateString);
        }
      }
      currentDate = currentDate.plus({ days: 1 });
    }
  });
  return dates;
};


--- NewReservation/StepOne/Utils/exceptions.js ---
// Utils/exceptions.js

import { DateTime } from 'luxon';

export const collectExceptions = (timeblocks) => {
    // Initialize global exception containers
    window.closedDates = new Set();
    window.exceptionalOpenings = {};
    window.uitzonderlijkeCapaciteit = {}; // Initialize capaciteit exceptions

    timeblocks.forEach((block) => {
        if (!block.exceptionalDays) {
            return;
        }

        const { exceptionalDays } = block;

        // Process sluitingsperiode (closing periods)
        if (Array.isArray(exceptionalDays.sluitingsperiode)) {
            exceptionalDays.sluitingsperiode.forEach((period) => {
                if (period.enabled) {
                    const { startDate, endDate } = period;
                    if (startDate && endDate) {
                        let currentDate = DateTime.fromISO(startDate, { zone: "Europe/Brussels" }).startOf('day');
                        const endDateObj = DateTime.fromISO(endDate, { zone: "Europe/Brussels" }).startOf('day');
                        while (currentDate <= endDateObj) {
                            const dateString = currentDate.toISODate();
                            window.closedDates.add(dateString);
                            console.log(`[collectExceptions] Adding ${dateString} to closedDates due to sluitingsperiode.`);
                            currentDate = currentDate.plus({ days: 1 });
                        }
                    }
                }
            });
        }

        // Process uitzonderlijkeOpeningsuren (exceptional opening hours)
        if (Array.isArray(exceptionalDays.uitzonderlijkeOpeningsuren)) {
            exceptionalDays.uitzonderlijkeOpeningsuren.forEach((opening) => {
                if (opening.enabled) {
                    const { date, startTime, endTime } = opening;
                    if (date && startTime && endTime) {
                        window.exceptionalOpenings[date] = {
                            startTime,
                            endTime,
                        };
                        console.log(`[collectExceptions] Adding exceptional opening for ${date}: ${startTime} - ${endTime}`);
                    }
                }
            });
        }

        // Process uitzonderlijkeCapaciteit (exceptional capacity)
        if (Array.isArray(exceptionalDays.uitzonderlijkeCapaciteit)) {
            exceptionalDays.uitzonderlijkeCapaciteit.forEach((capacityEntry) => {
                if (capacityEntry.enabled) {
                    const { date, capacity } = capacityEntry;
                    if (date && capacity !== undefined && capacity !== null) {
                        // Convert capacity to a number if it's a string
                        const numericCapacity = Number(capacity);
                        if (!isNaN(numericCapacity)) {
                            window.uitzonderlijkeCapaciteit[date] = numericCapacity;
                            console.log(`[collectExceptions] Setting exceptional capacity for ${date}: ${numericCapacity}`);
                        } else {
                            console.warn(`[collectExceptions] Invalid capacity value for ${date}: ${capacity}`);
                        }
                    }
                }
            });
        }
    });
};


--- NewReservation/StepOne/Utils/generateDates.js ---
// Utils/generateDates.js

import { DateTime } from 'luxon';
import { collectExceptions } from './exceptions';
import { getSchemeSettingsDates } from './dates/schemeDates';
import { getBlockSettingsDates } from './dates/blockDates';
import { generateAvailableTimesForDate } from './generateTimes'; // Ensure correct import path

const initializeDictionaries = () => {
    window.dateDictionary = window.dateDictionary || {};
    window.shiftsPerDate = window.shiftsPerDate || {};
};

export const generateAvailableDates = (guests, timeblocks = [], reservations = []) => {
    initializeDictionaries();
    collectExceptions(timeblocks);

    const dagenInToekomstRaw = window.generalSettings?.dagenInToekomst;
    let dagenInToekomst = 365;

    if (dagenInToekomstRaw) {
        if (typeof dagenInToekomstRaw === 'number') {
            dagenInToekomst = dagenInToekomstRaw;
        } else if (typeof dagenInToekomstRaw === 'string') {
            dagenInToekomst = parseInt(dagenInToekomstRaw, 10);
            if (isNaN(dagenInToekomst)) {
                dagenInToekomst = 365;
            }
        }
    }

    const today = DateTime.now().setZone("Europe/Brussels").startOf('day');
    const maxDate = today.plus({ days: dagenInToekomst - 1 }).endOf('day'); // Subtract 1 because we count today as day 1

    const blockDates = getBlockSettingsDates(timeblocks);
    const schemeDates = getSchemeSettingsDates(timeblocks, maxDate);
    const combinedDates = [...blockDates, ...schemeDates];

    const filteredDates = combinedDates.filter(dateStr => {
        const date = DateTime.fromISO(dateStr, { zone: "Europe/Brussels" }).startOf('day');
        return date >= today && date <= maxDate;
    });

    let uniqueDates = Array.from(new Set(filteredDates)).sort();

    // Initialize countingDictionary
    const countingDictionary = {};

    // Retrieve intervalReservatie and validate it
    const intervalReservatie = window.generalSettings?.intervalReservatie;
    let intervalMinutes = 30; // Default value

    if (
        typeof intervalReservatie === 'number' &&
        Number.isInteger(intervalReservatie) &&
        intervalReservatie > 0
    ) {
        intervalMinutes = intervalReservatie;
    } else {
        console.warn(
            `[generateAvailableDates] Invalid intervalReservatie value "${intervalReservatie}". Using default intervalMinutes = 30`
        );
    }

    // Retrieve duurReservatie and validate it
    const duurReservatieRaw = window.generalSettings?.duurReservatie;
    let duurReservatieMinutes = 120; // Default duration in minutes (2 hours)

    if (
        typeof duurReservatieRaw === 'number' &&
        Number.isInteger(duurReservatieRaw) &&
        duurReservatieRaw > 0
    ) {
        duurReservatieMinutes = duurReservatieRaw;
    } else {
        console.warn(
            `[generateAvailableDates] Invalid duurReservatie value "${duurReservatieRaw}". Using default duurReservatieMinutes = 120`
        );
    }

    // Retrieve uurOpVoorhand and validate it
    let uurOpVoorhand = 0; // Default value

    // Function to generate times for a given dateKey
    const generateAvailableTimesForDateKey = (guests, dateKey) => {
        const dateDictionary = window.dateDictionary;
        const shiftsPerDate = window.shiftsPerDate;
        const selectedDate = DateTime.fromISO(dateKey, { zone: "Europe/Brussels" });

        if (!dateDictionary[dateKey] || dateDictionary[dateKey].length === 0) {
            return [];
        }

        const shiftData =
            shiftsPerDate && Array.isArray(shiftsPerDate[dateKey]) ? shiftsPerDate[dateKey] : [];

        if (shiftData.length > 0) {
            const shiftButtons = shiftData.map((shift) => ({
                label: shift.name,
                value: shift.startTime,
            }));
            return shiftButtons.map(button => button.value);
        }

        const times = [];

        dateDictionary[dateKey].forEach(({ startTime, endTime }) => {

            let startDateTime = DateTime.fromFormat(startTime, 'HH:mm', { zone: "Europe/Brussels" }).set({
                year: selectedDate.year,
                month: selectedDate.month,
                day: selectedDate.day
            });

            const endDateTime = DateTime.fromFormat(endTime, 'HH:mm', { zone: "Europe/Brussels" }).set({
                year: selectedDate.year,
                month: selectedDate.month,
                day: selectedDate.day
            });

            while (startDateTime < endDateTime) {
                const timeString = startDateTime.toFormat('HH:mm');
                times.push(timeString);
                startDateTime = startDateTime.plus({ minutes: intervalMinutes });
            }
        });

        const uniqueTimes = [...new Set(times)].sort(
            (a, b) => DateTime.fromFormat(a, 'HH:mm') - DateTime.fromFormat(b, 'HH:mm')
        );

        return uniqueTimes;
    };

    // Generate countingDictionary with initial counts
    uniqueDates.forEach(dateKey => {
        const times = generateAvailableTimesForDateKey(guests, dateKey);
        countingDictionary[dateKey] = {};

        times.forEach(time => {
            countingDictionary[dateKey][time] = 0;
        });
    });

    // Process reservations to update counts
    reservations.forEach(reservation => {
        const reservationDate = reservation.date; // string in "YYYY-MM-DD" format
        const reservationTime = reservation.time; // string in "HH:mm"
        const numberOfGuests = reservation.guests;

        if (countingDictionary[reservationDate]) {
            const resStartDateTime = DateTime.fromISO(`${reservationDate}T${reservationTime}`, { zone: "Europe/Brussels" });

            // Use duurReservatieMinutes instead of fixed 2 hours
            const resEndDateTime = resStartDateTime.plus({ minutes: duurReservatieMinutes });

            // For each time period in countingDictionary[reservationDate]
            Object.keys(countingDictionary[reservationDate]).forEach(timePeriodStart => {
                const timePeriodStartDateTime = DateTime.fromISO(`${reservationDate}T${timePeriodStart}`, { zone: "Europe/Brussels" });
                const timePeriodEndDateTime = timePeriodStartDateTime.plus({ minutes: intervalMinutes });

                // Check if reservation interval collides with time period
                if (resStartDateTime < timePeriodEndDateTime && resEndDateTime > timePeriodStartDateTime) {
                    // There is a collision
                    countingDictionary[reservationDate][timePeriodStart] += numberOfGuests;
                }
            });
        }
    });

    // Print the countingDictionary
    console.log('[generateAvailableDates] Counting Dictionary:', countingDictionary);

    // Store countingDictionary in window for access in generateAvailableTimesForDate
    window.countingDictionary = countingDictionary;

    // Remove dates with no available time buttons
    const datesToRemove = [];
    uniqueDates.forEach(dateKey => {
        const selectedDate = DateTime.fromISO(dateKey, { zone: "Europe/Brussels" }).toJSDate();
        const availableTimeButtons = generateAvailableTimesForDate(guests, selectedDate);

        if (availableTimeButtons.length === 0) {
            datesToRemove.push(dateKey);
        }
    });

    // Filter out the dates to remove
    uniqueDates = uniqueDates.filter(dateKey => !datesToRemove.includes(dateKey));

    // Print the final uniqueDates
    console.log('[generateAvailableDates] Final Unique Dates:', uniqueDates);

    return uniqueDates;
};


--- NewReservation/StepOne/Utils/generateTimes.js ---
// Utils/generateTimes.js

import { DateTime } from 'luxon';

const TARGET_DATE = '2024-12-03'; // The date we're focusing on

const formatDateKey = (date) => {
    const formattedDate = DateTime.fromJSDate(date).toISODate();
    return formattedDate;
};

export const generateAvailableTimesForDate = (guests, selectedDate) => {
    const dateDictionary = window.dateDictionary;
    const shiftsPerDate = window.shiftsPerDate;
    const dateKey = formatDateKey(selectedDate);
    const now = DateTime.now().setZone("Europe/Brussels");
    const selectedDateTime = DateTime.fromJSDate(selectedDate).setZone("Europe/Brussels");
    const isToday = selectedDateTime.hasSame(now, 'day');

    if (dateKey === TARGET_DATE) {
        console.log(`[generateAvailableTimesForDate] Generating available times for dateKey: ${dateKey}`);
    }

    // Retrieve and validate 'uurOpVoorhand' from generalSettings
    const uurOpVoorhandRaw = window.generalSettings?.uurOpVoorhand;
    let uurOpVoorhand = 4; // Default value

    if (typeof uurOpVoorhandRaw === 'number' && uurOpVoorhandRaw >= 0) {
        uurOpVoorhand = uurOpVoorhandRaw;
        if (dateKey === TARGET_DATE) {
            console.log(`[generateAvailableTimesForDate] 'uurOpVoorhand' set to: ${uurOpVoorhand} hours`);
        }
    } else {
        console.warn(
            `[generateAvailableTimesForDate] Invalid or missing 'uurOpVoorhand' value ("${uurOpVoorhandRaw}"). Using default: ${uurOpVoorhand} hours`
        );
    }

    let minAllowedTime;
    if (isToday) {
        minAllowedTime = now.plus({ hours: uurOpVoorhand });
        if (dateKey === TARGET_DATE) {
            console.log(`[generateAvailableTimesForDate] Today (${dateKey}) - minAllowedTime set to: ${minAllowedTime.toFormat('HH:mm')}`);
        }
    } else {
        minAllowedTime = selectedDateTime.startOf('day');
        if (dateKey === TARGET_DATE) {
            console.log(`[generateAvailableTimesForDate] Future date (${dateKey}) - minAllowedTime set to start of the day (${minAllowedTime.toFormat('HH:mm')})`);
        }
    }

    // Retrieve and validate 'intervalReservatie' from generalSettings
    const intervalReservatie = window.generalSettings?.intervalReservatie;
    let intervalMinutes = 30; // Default value

    if (
        typeof intervalReservatie === 'number' &&
        Number.isInteger(intervalReservatie) &&
        intervalReservatie > 0
    ) {
        intervalMinutes = intervalReservatie;
        if (dateKey === TARGET_DATE) {
            console.log(`[generateAvailableTimesForDate] 'intervalReservatie' set to: ${intervalMinutes} minutes`);
        }
    } else {
        console.warn(
            `[generateAvailableTimesForDate] Invalid or missing 'intervalReservatie' value ("${intervalReservatie}"). Using default: ${intervalMinutes} minutes`
        );
    }

    // Retrieve and validate 'duurReservatie' from generalSettings
    const duurReservatieRaw = window.generalSettings?.duurReservatie;
    let duurReservatieMinutes = 120; // Default duration in minutes (2 hours)

    if (
        typeof duurReservatieRaw === 'number' &&
        Number.isInteger(duurReservatieRaw) &&
        duurReservatieRaw > 0
    ) {
        duurReservatieMinutes = duurReservatieRaw;
        if (dateKey === TARGET_DATE) {
            console.log(`[generateAvailableTimesForDate] 'duurReservatie' set to: ${duurReservatieMinutes} minutes`);
        }
    } else {
        console.warn(
            `[generateAvailableTimesForDate] Invalid or missing 'duurReservatie' value ("${duurReservatieRaw}"). Using default: ${duurReservatieMinutes} minutes`
        );
    }

    if (!dateDictionary[dateKey] || dateDictionary[dateKey].length === 0) {
        if (dateKey === TARGET_DATE) {
            console.warn(`[generateAvailableTimesForDate] No dateDictionary entries found for dateKey: ${dateKey}`);
        }
        return [];
    }

    const shiftData =
        shiftsPerDate && Array.isArray(shiftsPerDate[dateKey]) ? shiftsPerDate[dateKey] : [];

    let timeButtons = [];

    if (shiftData.length > 0) {
        if (dateKey === TARGET_DATE) {
            console.log(`[generateAvailableTimesForDate] Found ${shiftData.length} shiftData entries for dateKey: ${dateKey}`);
        }
        timeButtons = shiftData.map((shift) => ({
            label: shift.name,
            value: shift.startTime,
        }));
        const availableTimes = timeButtons.map(button => button.value);
        if (dateKey === TARGET_DATE) {
            console.log(`[generateAvailableTimesForDate] Shift-based available times for ${dateKey}:`, availableTimes);
        }
    } else {
        const times = [];

        dateDictionary[dateKey].forEach(({ startTime, endTime }) => {
            let startDateTime = DateTime.fromFormat(startTime, 'HH:mm', { zone: "Europe/Brussels" }).set({
                year: selectedDate.getFullYear(),
                month: selectedDate.getMonth() + 1,
                day: selectedDate.getDate()
            });

            const endDateTime = DateTime.fromFormat(endTime, 'HH:mm', { zone: "Europe/Brussels" }).set({
                year: selectedDate.getFullYear(),
                month: selectedDate.getMonth() + 1,
                day: selectedDate.getDate()
            });

            if (dateKey === TARGET_DATE) {
                console.log(`[generateAvailableTimesForDate] Processing time block for ${dateKey}: ${startTime} - ${endTime}`);
            }

            while (startDateTime < endDateTime) {
                if (startDateTime >= minAllowedTime) {
                    const timeString = startDateTime.toFormat('HH:mm');
                    times.push(timeString);
                }
                startDateTime = startDateTime.plus({ minutes: intervalMinutes });
            }
        });

        const uniqueTimes = [...new Set(times)].sort(
            (a, b) => DateTime.fromFormat(a, 'HH:mm') - DateTime.fromFormat(b, 'HH:mm')
        );
        if (dateKey === TARGET_DATE) {
            console.log(`[generateAvailableTimesForDate] Generated unique available times for ${dateKey}:`, uniqueTimes);
        }

        timeButtons = uniqueTimes.map((time) => ({
            label: time,
            value: time,
        }));
    }

    // Determine capacityLimit: use uitzonderlijkeCapaciteit if defined, else use general zitplaatsen
    const uitzonderlijkeCapaciteit = window.uitzonderlijkeCapaciteit || {};
    const exceptionalCapacity = uitzonderlijkeCapaciteit[dateKey];
    const capacityLimit = (typeof exceptionalCapacity === 'number')
        ? exceptionalCapacity
        : (window.generalSettings?.zitplaatsen || 0);

    if (typeof capacityLimit !== 'number' || capacityLimit < 0) {
        console.warn(
            `[generateAvailableTimesForDate] Invalid capacityLimit value ("${capacityLimit}"). Defaulting to 0.`
        );
    }

    const finalCapacityLimit = (typeof capacityLimit === 'number' && capacityLimit >= 0)
        ? capacityLimit
        : 0;

    if (dateKey === TARGET_DATE) {
        console.log(`[generateAvailableTimesForDate] Capacity limit for ${dateKey}: ${finalCapacityLimit} guests`);
    }

    // Filter timeButtons based on countingDictionary and capacityLimit
    const countingDictionary = window.countingDictionary || {};

    if (countingDictionary[dateKey]) {
        if (dateKey === TARGET_DATE) {
            console.log(`[generateAvailableTimesForDate] Applying capacity constraints for ${dateKey}`);
        }

        // Define the checkConsecutiveTimes function
        const checkConsecutiveTimes = (startTime) => {
            const intervalsToCheck = [];
            let currentTime = DateTime.fromFormat(startTime, 'HH:mm', { zone: "Europe/Brussels" });
            const endTime = currentTime.plus({ minutes: duurReservatieMinutes });

            while (currentTime < endTime) {
                const timeString = currentTime.toFormat('HH:mm');
                intervalsToCheck.push(timeString);
                currentTime = currentTime.plus({ minutes: intervalMinutes });
            }

            for (const time of intervalsToCheck) {
                const guestsCount = countingDictionary[dateKey][time] || 0;
                const availableCapacity = finalCapacityLimit - guestsCount;

                if (dateKey === TARGET_DATE) {
                    console.log(`[checkConsecutiveTimes] Time: ${time}, GuestsCount: ${guestsCount}, AvailableCapacity: ${availableCapacity}`);
                }

                if (guests > availableCapacity) {
                    // Not enough capacity at this time interval
                    return false;
                }
            }

            // All intervals have sufficient capacity
            return true;
        };

        timeButtons = timeButtons.filter(button => {
            const time = button.value;

            // Use the checkConsecutiveTimes function
            const canAccommodate = checkConsecutiveTimes(time);

            if (dateKey === TARGET_DATE) {
                console.log(`[generateAvailableTimesForDate] Time: ${time}, Can Accommodate: ${canAccommodate}`);
            }

            return canAccommodate;
        });
    } else {
        if (dateKey === TARGET_DATE) {
            console.warn(`[generateAvailableTimesForDate] No countingDictionary entries found for dateKey: ${dateKey}. All times are available.`);
        }
    }

    if (dateKey === TARGET_DATE) {
        console.log(`[generateAvailableTimesForDate] Final available time buttons for ${dateKey}:`, timeButtons);
    }

    return timeButtons;
};


--- NewReservation/StepOne/ValueSelector.js ---
// src/Pages/NewReservation/ValueSelector.jsx

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import './css/valueSelector.css';

const ValueSelectorGuests = ({ setGuests, value, onChange }) => {
  const predefinedValues = [1, 2, 3, '4+'];
  const [selectedValue, setSelectedValue] = useState(value || '');
  const [showSlider, setShowSlider] = useState(false);

  const handlePredefinedValueClick = (val) => {
    if (val === '4+') {
      setShowSlider(true);
      setSelectedValue(4);
      setGuests(4);
      onChange({ target: { name: 'guests', value: 4 } });
    } else {
      setShowSlider(false);
      setSelectedValue(val);
      setGuests(val);
      onChange({ target: { name: 'guests', value: val } });
    }
  };

  const handleSliderChange = (e) => {
    const val = e.target.value;
    setSelectedValue(val);
    setGuests(val);
    onChange({ target: { name: 'guests', value: val } });
  };

  const handleInputChange = (e) => {
    const val = e.target.value;
    setSelectedValue(val);
    setGuests(val);
    onChange({ target: { name: 'guests', value: val } });
  };

  return (
    <div className="value-selector">
      <div className="predefined-values">
        {predefinedValues.map((val) => (
          <button
            key={val}
            type="button"
            className={`predefined-value-button ${
              selectedValue == val || (val === '4+' && showSlider) ? 'active' : ''
            }`}
            onClick={() => handlePredefinedValueClick(val)}
          >
            {val === '4+' ? '4+' : `${val} ${val === 1 ? 'p' : 'p'}`}
          </button>
        ))}
      </div>
      <AnimatePresence>
        {showSlider && (
          <motion.div
            className="slider-container"
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
          >
            <input
              type="range"
              min="4"
              max="15"
              step="1"
              value={selectedValue}
              onChange={handleSliderChange}
              className="slider non-absolute"
            />
            <input
              type="number"
              name="guests"
              value={selectedValue}
              onChange={handleInputChange}
              className="value-input"
              min="4"
              max="100"
              step="1"
            />
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default ValueSelectorGuests;


--- NewReservation/StepOne/algorithm/.DS_Store ---
   Bud1           	                                                           r i t h m .                                                                                                                                                                                                                                                                                                                                                                                                                                          
 a l g o r i t h m . z i pIlocblob        �������      g e t A v a i l a b l e T i m e b l o c k s . j sIlocblob     �   .������      i s D a t e A v a i l a b l e . j sIlocblob     g   .������     
 p r o c e s s i n gIlocblob      A   .������      r e s e r v a t i o n _ d a t aIlocblob      �   .������      r e s t a u r a n t _ d a t aIlocblob        .������                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E  	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `          �                                         @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

--- NewReservation/StepOne/algorithm/getAvailableTimeblocks.js ---
// getAvailableTimeblocks.js

const { timeblocksAvailable } = require('./processing/timeblocksAvailable');

/**
 * Parses a time string in "HH:MM" format into a Date object on a specific date.
 * @param {string} dateStr - The date string in "YYYY-MM-DD" format.
 * @param {string} timeStr - Time string in "HH:MM" format.
 * @param {string} timeZone - The IANA time zone identifier.
 * @returns {Date} Date object representing the time on the specified date and time zone.
 */
function parseDateTimeInTimeZone(dateStr, timeStr, timeZone) {
  const [year, month, day] = dateStr.split('-').map(Number);
  const [hours, minutes] = timeStr.split(':').map(Number);

  // Create a date object in UTC
  const date = new Date(Date.UTC(year, month - 1, day, hours, minutes));
  // Convert that UTC date/time to the specified time zone
  const dateInTimeZone = new Date(
    date.toLocaleString('en-US', { timeZone: timeZone })
  );
  return dateInTimeZone;
}

/**
 * Gets the available time blocks or shifts for a reservation, considering 'uurOpVoorhand' and 'dagenInToekomst'.
 * @param {Object} data - The main data object containing settings and meal information.
 * @param {string} dateStr - The date string in "YYYY-MM-DD" format.
 * @param {Array} reservations - An array of reservation objects.
 * @param {number} guests - The number of guests for the reservation.
 * @returns {Object} - Returns a pruned object of available time blocks or shifts, or an empty object if out of range.
 */
function getAvailableTimeblocks(data, dateStr, reservations, guests) {
  // Get 'uurOpVoorhand' from general settings
  let uurOpVoorhand = 4;
  if (
    data['general-settings'] &&
    data['general-settings'].uurOpVoorhand &&
    parseInt(data['general-settings'].uurOpVoorhand, 10) >= 0
  ) {
    uurOpVoorhand = parseInt(data['general-settings'].uurOpVoorhand, 10);
  }

  // Get 'dagenInToekomst' from general settings
  let dagenInToekomst = 90; // Default if not defined
  if (
    data['general-settings'] &&
    data['general-settings'].dagenInToekomst &&
    parseInt(data['general-settings'].dagenInToekomst, 10) > 0
  ) {
    dagenInToekomst = parseInt(data['general-settings'].dagenInToekomst, 10);
  }

  // Time zone for CEST/CET (Europe/Amsterdam)
  const timeZone = 'Europe/Amsterdam';

  // Current date/time in CEST
  const now = new Date();
  const currentTimeInTimeZone = new Date(
    now.toLocaleString('en-US', { timeZone: timeZone })
  );

  // Calculate the maximum allowed date
  const maxAllowedDate = new Date(currentTimeInTimeZone.getTime());
  maxAllowedDate.setDate(maxAllowedDate.getDate() + dagenInToekomst);
  maxAllowedDate.setHours(23, 59, 59, 999);

  // Parse the target date in the specified time zone
  const [year, month, day] = dateStr.split('-').map(Number);
  const targetDate = new Date(Date.UTC(year, month - 1, day));
  const targetDateInTimeZone = new Date(
    targetDate.toLocaleString('en-US', { timeZone: timeZone })
  );

  // Check if targetDateInTimeZone is within dagenInToekomst
  if (targetDateInTimeZone > maxAllowedDate) {
    // Out of allowed range, return empty object
    return {};
  }

  // Check if the target date is today in the specified time zone
  const isToday =
    currentTimeInTimeZone.toDateString() === targetDateInTimeZone.toDateString();

  // Get available time blocks or shifts
  const availableTimeblocks = timeblocksAvailable(data, dateStr, reservations, guests);

  // If the date is today and uurOpVoorhand is greater than zero, prune time blocks
  if (isToday && uurOpVoorhand >= 0) {
    const cutoffTime = new Date(currentTimeInTimeZone.getTime());
    cutoffTime.setHours(cutoffTime.getHours() + uurOpVoorhand);

    for (const [key, value] of Object.entries(availableTimeblocks)) {
      let timeStr = key;

      const timeBlockDateTime = parseDateTimeInTimeZone(dateStr, timeStr, timeZone);

      if (timeBlockDateTime < cutoffTime) {
        delete availableTimeblocks[key];
      }
    }
  }

  return availableTimeblocks;
}

module.exports = {
  getAvailableTimeblocks,
};


--- NewReservation/StepOne/algorithm/isDateAvailable.js ---
// isDateAvailable.js

const { getAvailableTimeblocks } = require('./getAvailableTimeblocks');

/**
 * Parses a time string in "HH:MM" format into minutes since midnight.
 * @param {string} timeStr - Time string in "HH:MM" format.
 * @returns {number} Minutes since midnight.
 */
function parseTime(timeStr) {
  const [hours, minutes] = timeStr.split(':').map(Number);
  return hours * 60 + minutes;
}

/**
 * Checks if a date is within the allowed future range defined by dagenInToekomst.
 * @param {Object} data - The main data object (to access general settings).
 * @param {string} dateStr - The date string (YYYY-MM-DD).
 * @returns {boolean} true if within range, false otherwise.
 */
function isDateWithinAllowedRange(data, dateStr) {
  // Get dagenInToekomst
  let dagenInToekomst = 90;
  if (
    data['general-settings'] &&
    data['general-settings'].dagenInToekomst &&
    parseInt(data['general-settings'].dagenInToekomst, 10) > 0
  ) {
    dagenInToekomst = parseInt(data['general-settings'].dagenInToekomst, 10);
  }

  const timeZone = 'Europe/Amsterdam';

  const now = new Date();
  const currentTimeInTimeZone = new Date(
    now.toLocaleString('en-US', { timeZone: timeZone })
  );

  const maxAllowedDate = new Date(currentTimeInTimeZone.getTime());
  maxAllowedDate.setDate(maxAllowedDate.getDate() + dagenInToekomst);
  maxAllowedDate.setHours(23, 59, 59, 999);

  const [year, month, day] = dateStr.split('-').map(Number);
  const targetDate = new Date(Date.UTC(year, month - 1, day));
  const targetDateInTimeZone = new Date(
    targetDate.toLocaleString('en-US', { timeZone: timeZone })
  );

  return targetDateInTimeZone <= maxAllowedDate;
}

/**
 * Checks if a date is available for a reservation of a specified number of guests.
 * This updated version uses `getAvailableTimeblocks` to ensure that it never returns
 * true if no actual time slots are available, including for today's date.
 * @param {Object} data - The main data object containing settings and meal information.
 * @param {string} dateStr - The date string in "YYYY-MM-DD" format.
 * @param {Array} reservations - An array of reservation objects.
 * @param {number} guests - The number of guests for the reservation.
 * @returns {boolean} - Returns true if the date has at least one available timeblock, false otherwise.
 */
function isDateAvailable(data, dateStr, reservations, guests) {
  // Check if date is within allowed range
  if (!isDateWithinAllowedRange(data, dateStr)) {
    return false;
  }

  // Get available timeblocks using the existing logic
  const availableTimeblocks = getAvailableTimeblocks(data, dateStr, reservations, guests);

  // Return true only if we have at least one available timeblock
  return Object.keys(availableTimeblocks).length > 0;
}

module.exports = {
  isDateAvailable,
};


--- NewReservation/StepOne/algorithm/processing/dailyGuestCounts.js ---
// dailyGuestCounts.js

const { getGuestCountsForMeal } = require('./mealTypeCount');

/**
 * Calculates guest counts for breakfast, lunch, and dinner, and combines the results into a flat object.
 * If time slots overlap, the available seats from the latest meal (dinner > lunch > breakfast) are used.
 * @param {Object} data - The main data object.
 * @param {string} dateStr - The date string (YYYY-MM-DD).
 * @param {Array} reservations - An array of reservation objects.
 * @returns {Object} An object containing combined guest counts for all meals with time slots as keys,
 *                   and an array of shiftsInfo containing shift details.
 */
function getDailyGuestCounts(data, dateStr, reservations) {
  // Define meal types in order of priority (lowest to highest)
  const mealTypes = ['breakfast', 'lunch', 'dinner'];
  const combinedGuestCounts = {};
  const shiftsInfo = [];
  const mealPriority = {
    'breakfast': 1,
    'lunch': 2,
    'dinner': 3
  };

  for (const mealType of mealTypes) {
    const result = getGuestCountsForMeal(data, dateStr, mealType, reservations);
    if (result) {
      const { guestCounts, shiftsInfo: mealShiftsInfo } = result;

      // Merge guestCounts into combinedGuestCounts
      for (const [time, availableSeats] of Object.entries(guestCounts)) {
        if (combinedGuestCounts.hasOwnProperty(time)) {
          // Compare meal priorities
          const existingMealPriority = combinedGuestCounts[time].mealPriority;
          const currentMealPriority = mealPriority[mealType];

          if (currentMealPriority >= existingMealPriority) {
            // Update with the current meal's available seats and priority
            combinedGuestCounts[time] = {
              availableSeats,
              mealPriority: currentMealPriority
            };
          }
          // Else, keep the existing value
        } else {
          // Add new time slot with available seats and meal priority
          combinedGuestCounts[time] = {
            availableSeats,
            mealPriority: mealPriority[mealType]
          };
        }
      }

      // Merge shiftsInfo
      if (mealShiftsInfo && mealShiftsInfo.length > 0) {
        shiftsInfo.push(...mealShiftsInfo);
      }
    }
    // Else do nothing if the meal is not available
  }

  // Extract only the availableSeats for the final output
  const finalGuestCounts = {};
  for (const [time, data] of Object.entries(combinedGuestCounts)) {
    finalGuestCounts[time] = data.availableSeats;
  }

  return { guestCounts: finalGuestCounts, shiftsInfo };
}

module.exports = {
  getDailyGuestCounts,
};


--- NewReservation/StepOne/algorithm/processing/mealTypeCount.js ---
// mealTypeCount.js

const { getDataByDateAndMealWithExceptions } = require('../restaurant_data/exceptions');
const { parseTime } = require('../restaurant_data/openinghours');
const { getGuestCountAtHour } = require('../reservation_data/counter');

function getInterval(data) {
  let intervalReservatie = 15;
  if (
    data['general-settings'] &&
    data['general-settings'].intervalReservatie &&
    parseInt(data['general-settings'].intervalReservatie, 10) > 0
  ) {
    intervalReservatie = parseInt(data['general-settings'].intervalReservatie, 10);
  }
  return intervalReservatie;
}

/**
 * Retrieves meal types with shifts enabled and at least one shift defined for the specified date.
 * @param {Object} data - The main data object.
 * @param {string} dateStr - The date string (YYYY-MM-DD).
 * @returns {Array} - An array of meal types with shifts.
 */
function getMealTypesWithShifts(data, dateStr) {
  const mealTypes = ['breakfast', 'lunch', 'dinner'];
  const mealTypesWithShifts = [];

  for (const mealType of mealTypes) {
    const mealData = getDataByDateAndMealWithExceptions(data, dateStr, mealType);
    if (
      mealData &&
      mealData.shiftsEnabled &&
      Array.isArray(mealData.shifts) &&
      mealData.shifts.length > 0
    ) {
      mealTypesWithShifts.push(mealType);
    }
  }

  return mealTypesWithShifts;
}

function shouldIncludeEndTime(mealType, endTime) {  
  if ((mealType === 'breakfast' && endTime === '11:00') ||
      (mealType === 'lunch' && endTime === '16:00')) {
    return false; // Do not include endTime for breakfast at 11:00 and lunch at 16:00
  }
  return true; // Include endTime for all other cases
}

/**
 * Calculates guest counts for each interval during a meal period or at shift times.
 * @param {Object} data - The main data object.
 * @param {string} dateStr - The date string (YYYY-MM-DD).
 * @param {string} mealType - The meal type ("breakfast", "lunch", "dinner").
 * @param {Array} reservations - An array of reservation objects.
 * @returns {Object|null} An object mapping times to guest counts, or null if meal is not available.
 */
function getGuestCountsForMeal(data, dateStr, mealType, reservations) {
  const mealData = getDataByDateAndMealWithExceptions(data, dateStr, mealType);
  if (!mealData) {
    return null;
  }

  const guestCounts = {};
  const shiftsInfo = [];

  // Get 'intervalReservatie' from general settings, default to 15 if not set or zero
  let intervalReservatie = getInterval(data);

  // Check if shifts are enabled and shifts array has valid content
  if (
    mealData.shiftsEnabled &&
    Array.isArray(mealData.shifts) &&
    mealData.shifts.length > 0
  ) {
    // If shifts are enabled and valid, calculate guest counts at shift times
    const shifts = mealData.shifts; // Array of shifts

    for (const shift of shifts) {
      const timeStr = shift.time; // Time of the shift in "HH:MM" format

      // Get guest count at this time
      const guestCount = getGuestCountAtHour(data, reservations, timeStr, dateStr);

      // Store in guestCounts
      guestCounts[timeStr] = mealData.maxCapacity - guestCount;

      // Store shift information
      shiftsInfo.push({
        mealType,
        shiftName: shift.name,
        time: timeStr,
        availableSeats: mealData.maxCapacity - guestCount,
      });
    }
  } else {
    // If shifts are not enabled or shifts array is empty/invalid, calculate guest counts at intervals
    const startTime = mealData.startTime;
    const endTime = mealData.endTime;

    // Determine if endTime should be included
    const includeEndTime = shouldIncludeEndTime(mealType, endTime);

    // Convert startTime and endTime to minutes since midnight
    let currentTime = parseTime(startTime);
    const endTimeMinutes = parseTime(endTime);

    while (includeEndTime ? currentTime <= endTimeMinutes : currentTime < endTimeMinutes) {
      // Convert currentTime back to "HH:MM" format
      const hours = Math.floor(currentTime / 60).toString().padStart(2, '0');
      const minutes = (currentTime % 60).toString().padStart(2, '0');
      const timeStr = `${hours}:${minutes}`;

      // Get guest count at this time
      const guestCount = getGuestCountAtHour(data, reservations, timeStr, dateStr);

      // Store in guestCounts
      guestCounts[timeStr] = mealData.maxCapacity - guestCount;

      // Increment currentTime by 'intervalReservatie' minutes
      currentTime += intervalReservatie;
    }
  }

  return { guestCounts, shiftsInfo };
}

module.exports = {
  getGuestCountsForMeal,
  getMealTypesWithShifts, // Exported
};


--- NewReservation/StepOne/algorithm/processing/timeblocksAvailable.js ---
const { getDailyGuestCounts } = require('./dailyGuestCounts');
const { getMealTypesWithShifts } = require('./mealTypeCount');
const { getDataByDateAndMealWithExceptions } = require('../restaurant_data/exceptions');
const { getMealTypeByTime, parseTime: parseTimeOH } = require('../restaurant_data/openinghours');

/**
 * Parses a time string in "HH:MM" format into minutes since midnight.
 */
function parseTime(timeStr) {
  const [hours, minutes] = timeStr.split(':').map(Number);
  return hours * 60 + minutes;
}

/**
 * Retrieves interval and duurReservatie from general settings
 */
function getInterval(data) {
  let intervalReservatie = 15;
  if (
    data['general-settings'] &&
    data['general-settings'].intervalReservatie &&
    parseInt(data['general-settings'].intervalReservatie, 10) > 0
  ) {
    intervalReservatie = parseInt(data['general-settings'].intervalReservatie, 10);
  }
  return intervalReservatie;
}

function getDuurReservatie(data) {
  let duurReservatie = 120;
  if (
    data['general-settings'] &&
    data['general-settings'].duurReservatie &&
    parseInt(data['general-settings'].duurReservatie, 10) > 0
  ) {
    duurReservatie = parseInt(data['general-settings'].duurReservatie, 10);
  }
  return duurReservatie;
}

/**
 * Determines if a given start time plus duurReservatie fits within the meal timeframe.
 */
function fitsWithinMeal(data, dateStr, startTimeStr, duurReservatie) {
  // Determine the meal type based on the start time
  const mealType = getMealTypeByTime(startTimeStr);
  if (!mealType) return false;

  // Get the meal data (with exceptions applied)
  const mealData = getDataByDateAndMealWithExceptions(data, dateStr, mealType);
  if (!mealData) return false;

  const mealEndTime = parseTime(mealData.endTime);
  const startTime = parseTime(startTimeStr);
  
  // Check if startTime + duurReservatie is within the mealEndTime
  return startTime + duurReservatie <= mealEndTime;
}

function timeblocksAvailable(data, dateStr, reservations, guests) {
  const duurReservatie = getDuurReservatie(data);
  const intervalReservatie = getInterval(data);

  // Slots needed
  const slotsNeeded = Math.ceil(duurReservatie / intervalReservatie);

  // Get guest counts and shifts info
  const { guestCounts, shiftsInfo } = getDailyGuestCounts(data, dateStr, reservations);

  const availableTimeblocks = {};

  // Handle shifts first
  const mealTypesWithShifts = getMealTypesWithShifts(data, dateStr);
  if (mealTypesWithShifts.length > 0 && shiftsInfo && shiftsInfo.length > 0) {
    for (const shift of shiftsInfo) {
      const { time, availableSeats } = shift;
      if (availableSeats >= guests && fitsWithinMeal(data, dateStr, time, duurReservatie)) {
        availableTimeblocks[time] = { name: time };
      }
    }
  }

  // Handle non-shift times
  if (guestCounts && Object.keys(guestCounts).length > 0) {
    const timeSlots = Object.keys(guestCounts).sort((a, b) => parseTime(a) - parseTime(b));

    for (let i = 0; i <= timeSlots.length - slotsNeeded; i++) {
      // Check capacity for all needed slots
      let consecutiveSlotsAvailable = true;
      if (guestCounts[timeSlots[i]] < guests) {
        continue;
      }

      let previousTime = parseTime(timeSlots[i]);
      for (let j = 1; j < slotsNeeded; j++) {
        const currentTimeSlot = timeSlots[i + j];
        const currentTime = parseTime(currentTimeSlot);

        // Check interval and capacity
        if ((currentTime - previousTime) !== intervalReservatie || guestCounts[currentTimeSlot] < guests) {
          consecutiveSlotsAvailable = false;
          break;
        }
        previousTime = currentTime;
      }

      // If all consecutive slots are available, check if the full duration fits
      if (consecutiveSlotsAvailable && fitsWithinMeal(data, dateStr, timeSlots[i], duurReservatie)) {
        availableTimeblocks[timeSlots[i]] = { name: timeSlots[i] };
      }
    }
  }

  return availableTimeblocks;
}

module.exports = {
  timeblocksAvailable,
};


--- NewReservation/StepOne/algorithm/reservation_data/counter.js ---
// counter.js

/**
 * Parses a time string in "HH:MM" format into minutes since midnight.
 * @param {string} timeStr - The time string in "HH:MM" format.
 * @returns {number} The time in minutes since midnight.
 */
function parseTime(timeStr) {
	const [hours, minutes] = timeStr.split(':').map(Number);
	return hours * 60 + minutes;
  }

  function getDuurReservatie(data) {
	let duurReservatie = 120;
	if (
	  data['general-settings'] &&
	  data['general-settings'].duurReservatie &&
	  parseInt(data['general-settings'].duurReservatie, 10) > 0
	) {
	  duurReservatie = parseInt(data['general-settings'].duurReservatie, 10);
	}

	return duurReservatie;
  }
  
  /**
   * Calculates the total number of guests for reservations that cover a specific hour on a specific date.
   * @param {Object} data - The main data object containing general settings.
   * @param {Array} reservations - An array of reservation objects.
   * @param {string} hour - The hour to check in "HH:MM" format.
   * @param {string} dateStr - The date string in "YYYY-MM-DD" format.
   * @returns {number} The total number of guests for that hour on the specified date.
   */
  function getGuestCountAtHour(data, reservations, hour, dateStr) {
	// Get 'duurReservatie' from general settings, default to 120 if not set or zero
	let duurReservatie = getDuurReservatie(data)
  
	// Convert the target hour to minutes since midnight
	const targetTime = parseTime(hour);
  
	let totalGuests = 0;
  
	for (const reservation of reservations) {
	  // Only consider reservations on the specified date
	  if (reservation.date !== dateStr) {
		continue;
	  }
  
	  const startTime = parseTime(reservation.time);

	  const endTime = startTime + duurReservatie; // Use 'duurReservatie' from general settings
  	  // Check if the target time is within the reservation time range
	  // Start time is inclusive, end time is exclusive
	  if (targetTime >= startTime && targetTime < endTime) {
		totalGuests += parseInt(reservation.guests, 10);
	  }
	}
  
	return totalGuests;
  }
  
  module.exports = {
	getGuestCountAtHour,
  };
  

--- NewReservation/StepOne/algorithm/restaurant_data/exceptions.js ---
// exceptions.js

const {
	getDataByDateAndMeal,
	getDataByDateAndTime,
	getMealTypeByTime,
	parseTime,
	shifts,
	daysOfWeekEnglish,
	daysOfWeekDutch,
} = require('./openinghours');

function isDateInRange(dateStr, startDateStr, endDateStr) {
	const date = new Date(dateStr);
	const startDate = new Date(startDateStr);
	const endDate = new Date(endDateStr);
	if (isNaN(date) || isNaN(startDate) || isNaN(endDate)) {
	  return false;
	}
	return date >= startDate && date <= endDate;
}

function getDutchDayOfWeek(date) {
	const dayIndex = date.getDay();
	return daysOfWeekDutch[dayIndex];
}

function doesExceptionApply(exception, dateStr, dateDayOfWeekDutch, mealType) {
	const { timeframe, startDate, endDate, daysOfWeek } = exception;

	if (!isDateInRange(dateStr, startDate, endDate)) {
	  return false;
	}

	if (Array.isArray(daysOfWeek) && daysOfWeek.length > 0) {
	  const daysOfWeekLower = daysOfWeek.map(day => day.toLowerCase());
	  if (!daysOfWeekLower.includes(dateDayOfWeekDutch)) {
		return false;
	  }
	}

	if (timeframe === 'Volledige Dag' || timeframe === mealType) {
	  return true;
	}

	return false;
}

function getDuurReservatie(data) {
  let duurReservatie = 120;
  if (
    data['general-settings'] &&
    data['general-settings'].duurReservatie &&
    parseInt(data['general-settings'].duurReservatie, 10) > 0
  ) {
    duurReservatie = parseInt(data['general-settings'].duurReservatie, 10);
  }
  return duurReservatie;
}

function addDuurReservatieToEndTime(mealData, data) {
  const duurReservatie = getDuurReservatie(data);
  const endMinutes = parseTime(mealData.endTime);
  const newEndMinutes = endMinutes + duurReservatie;
  const hours = String(Math.floor(newEndMinutes / 60)).padStart(2, '0');
  const minutes = String(newEndMinutes % 60).padStart(2, '0');
  mealData.endTime = `${hours}:${minutes}`;
}

function mapExceptionToMealData(exception, data) {
	let mealData = {
	  enabled: true,
	  startTime: exception.startHour,
	  endTime: exception.endHour,
	  maxCapacityEnabled: exception.maxSeats ? true : false,
	  maxCapacity: exception.maxSeats || null,
	  shiftsEnabled: false,
	  shifts: [],
	};

	// Add duurReservatie to endTime
	addDuurReservatieToEndTime(mealData, data);

	return mealData;
}

function getDataByDateAndMealWithExceptions(data, dateStr, mealType) {
	const exceptions = data.exceptions || [];
	const date = new Date(dateStr);
	if (isNaN(date)) {
	  return null;
	}
	const dateDayOfWeekDutch = getDutchDayOfWeek(date).toLowerCase();

	const exceptionTypesPriority = ['Opening', 'Sluiting', 'Uitzondering'];

	for (const exceptionType of exceptionTypesPriority) {
	  for (const exception of exceptions) {
		if (exception.type === exceptionType) {
		  if (doesExceptionApply(exception, dateStr, dateDayOfWeekDutch, mealType)) {
			if (exceptionType === 'Sluiting') {
			  return null;
			} else {
			  return mapExceptionToMealData(exception, data);
			}
		  }
		}
	  }
	}

	return getDataByDateAndMeal(data, dateStr, mealType);
}

function shouldIncludeEndTime(mealType, endTime) {
	if ((mealType === 'breakfast' && endTime === '11:00') ||
		(mealType === 'lunch' && endTime === '16:00')) {
	  return false;
	}
	return true;
}

function getDataByDateAndTimeWithExceptions(data, dateStr, timeStr) {
	const mealType = getMealTypeByTime(timeStr);
	if (!mealType) {
	  return null;
	}
	const mealData = getDataByDateAndMealWithExceptions(data, dateStr, mealType);
	if (!mealData) {
	  return null;
	}

	const requestedTime = parseTime(timeStr);
	const startTime = parseTime(mealData.startTime);
	const endTime = parseTime(mealData.endTime);

	const includeEndTime = shouldIncludeEndTime(mealType, mealData.endTime);

	const timeFallsWithin =
	  includeEndTime
		? requestedTime >= startTime && requestedTime <= endTime
		: requestedTime >= startTime && requestedTime < endTime;

	return timeFallsWithin ? mealData : null;
}

module.exports = {
	getDataByDateAndMealWithExceptions,
	getDataByDateAndTimeWithExceptions,
};


--- NewReservation/StepOne/algorithm/restaurant_data/openinghours.js ---
// index.js

const daysOfWeekEnglish = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
const daysOfWeekDutch = ['zondag', 'maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag'];

const shifts = {
  breakfast: { start: '07:00', end: '11:00' },
  lunch: { start: '11:00', end: '16:00' },
  dinner: { start: '16:00', end: '23:00' },
};

function parseTime(timeStr) {
  const [hours, minutes] = timeStr.split(':').map(Number);
  return hours * 60 + minutes;
}

function getMealTypeByTime(timeStr) {
  const time = parseTime(timeStr);
  for (const [mealType, shift] of Object.entries(shifts)) {
    const start = parseTime(shift.start);
    const end = parseTime(shift.end);
    if (time >= start && time < end) {
      return mealType;
    }
  }
  return null;
}

function getDataByDayAndMeal(data, dayOfWeek, mealType) {
  const mealKey = `openinghours-${mealType}`;
  if (!data[mealKey]) {
    return null;
  }
  const mealData = data[mealKey];
  const dayData = mealData.schemeSettings[dayOfWeek];
  if (!dayData) {
    return null;
  }
  return { ...dayData };
}

function adjustMealData(mealData, generalSettings) {
  if (mealData.maxCapacityEnabled === false) {
    if (generalSettings && generalSettings.zitplaatsen) {
      mealData.maxCapacity = generalSettings.zitplaatsen;
      mealData.maxCapacityEnabled = true;
    } else {
      mealData.maxCapacity = '0';
      mealData.maxCapacityEnabled = true;
    }
  }
}

function getDuurReservatie(data) {
  let duurReservatie = 120;
  if (
    data['general-settings'] &&
    data['general-settings'].duurReservatie &&
    parseInt(data['general-settings'].duurReservatie, 10) > 0
  ) {
    duurReservatie = parseInt(data['general-settings'].duurReservatie, 10);
  }
  return duurReservatie;
}

function addDuurReservatieToEndTime(mealData, data) {
  const duurReservatie = getDuurReservatie(data);
  const endMinutes = parseTime(mealData.endTime);
  const newEndMinutes = endMinutes + duurReservatie;
  const hours = String(Math.floor(newEndMinutes / 60)).padStart(2, '0');
  const minutes = String(newEndMinutes % 60).padStart(2, '0');
  mealData.endTime = `${hours}:${minutes}`;
}

function getDataByDateAndMeal(data, dateStr, mealType) {
  const date = new Date(dateStr);
  if (isNaN(date)) {
    return null;
  }
  const dayOfWeekIndex = date.getDay();
  const dayOfWeek = daysOfWeekEnglish[dayOfWeekIndex];
  let mealData = getDataByDayAndMeal(data, dayOfWeek, mealType);
  if (!mealData || mealData.enabled !== true) {
    return null;
  }

  adjustMealData(mealData, data['general-settings']);

  // Add duurReservatie to endTime
  addDuurReservatieToEndTime(mealData, data);

  return mealData;
}

function getDataByDateAndTime(data, dateStr, timeStr) {
  const mealType = getMealTypeByTime(timeStr);
  if (!mealType) {
    return null;
  }
  const mealData = getDataByDateAndMeal(data, dateStr, mealType);
  if (!mealData) {
    return null;
  }
  const requestedTime = parseTime(timeStr);
  const startTime = parseTime(mealData.startTime);
  const endTime = parseTime(mealData.endTime);
  if (requestedTime >= startTime && requestedTime < endTime) {
    return mealData;
  } else {
    return null;
  }
}

module.exports = {
  getDataByDayAndMeal,
  getDataByDateAndMeal,
  getDataByDateAndTime,
  daysOfWeekEnglish,
  daysOfWeekDutch,
  getMealTypeByTime,
  parseTime,
  shifts,
};


--- NewReservation/StepOne/css/calendar.css ---

/* calendar.css */
.new-reservation-page .calendar-container {
	position: relative;
	width: 100%;
}

.new-reservation-page .calendar-container .calendar-display {
	display: flex;
	align-items: center;
	justify-content: space-between;
	width: 100%;
	padding: 10px;
	background-color: #fff;
	border: #ccc 1px solid;
	cursor: pointer;
	user-select: none;
	text-align: left;
	border-radius: 5px;
}

.new-reservation-page .calendar-container .calendar-display span:first-child {
	flex-grow: 1;
}

.new-reservation-page .calendar-container .calendar {
	position: absolute;
	z-index: 1000;
	width: 100%;
	background-color: rgba(255, 255, 255, 1);
	border: 1px solid #ccc;
	margin-top: 5px;
	padding: 10px;
	border-radius: 10px;
	animation: fadeInCalendar 0.3s ease-in-out;
	box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

@keyframes fadeInCalendar {
	from {
	  opacity: 0;
	}
	to {
	  opacity: 1;
	}
}

.new-reservation-page .calendar-container .calendar-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	margin-bottom: 10px;
}

.new-reservation-page .calendar-container .calendar-header button {
	background-color: transparent;
	border: none;
	cursor: pointer;
	font-size: 18px;
}

.new-reservation-page .calendar-container .calendar-header span {
	font-size: 15px;
	color: gray;
}

.new-reservation-page .calendar-container .calendar-weeks-wrapper {
	overflow: hidden;
	position: relative;
	width: 100%;
}

.new-reservation-page .calendar-container .calendar-table {
	width: 100%;
	border-collapse: collapse;
}

.new-reservation-page .calendar-container .calendar-table th,
.new-reservation-page .calendar-container .calendar-table td {
	width: 14.28%;
	text-align: center;
	padding: 5px;
}

.calendar-container .calendar-table th {
	color: #666;
	font-weight: normal;
	padding-bottom: 10px;
}

.new-reservation-page .calendar-container .calendar-table td {
	vertical-align: middle;
	cursor: pointer;
	border: none;
	opacity: 1;
}

.new-reservation-page .calendar-container .calendar-table td:hover .day-square.available {
	transform: scale(1.05);
}

.new-reservation-page .calendar-container .day-square {
	width: 37px;
	height: 37px;
	line-height: 40px;
	border-radius: 5px;
	display: inline-block;
	transition: all 0.3s ease;
	font-size: 16px;
}

.new-reservation-page .calendar-container .available .day-square {
	background-color: #ccffcc;
	color: #006600;
}

.new-reservation-page .calendar-container .available:hover .day-square {
	background-color: #b3ffb3;
}

.new-reservation-page .calendar-container .available:active .day-square {
	background-color: #99ff99;
}

.new-reservation-page .calendar-container .unavailable .day-square {
	background-color: rgba(139, 0, 0, 0.13);
	color: darkred;
}

.new-reservation-page .calendar-container .gray-out .day-square {
	background-color: #e0e0e0;
	color: #999;
	cursor: not-allowed;
}

.new-reservation-page .calendar-container .selected .day-square {
	background-color: #006600;
	color: #ccffcc;
}

.new-reservation-page .calendar-container .calendar-table td.unavailable,
.new-reservation-page .calendar-container .calendar-table td.gray-out {
	cursor: not-allowed;
}

.new-reservation-page .calendar-container .calendar-table td.unavailable:hover .day-square,
.new-reservation-page .calendar-container .calendar-table td.gray-out:hover .day-square {
	transform: none;
}

.new-reservation-page .calendar-container .calendar-table td {
	border: none;
}

.new-reservation-page .calendar-container .arrow {
	margin-left: auto;
	color: gray;
	display: flex;
	align-items: center;
}

@media screen and (max-width: 900px) {
	.calendar-container .day-square {
	  width: 35px !important;
	  height: 35px !important;
	  line-height: 35px !important;
	  font-size: 15px !important;
	}
  
	.calendar-container .calendar-header span {
	  font-size: 12px;
	}
  }



--- NewReservation/StepOne/css/reservationMode.css ---
/* src/Pages/NewReservation/css/reservationMode.css */

.reservation-mode-buttons {
	display: flex;
	gap: 10px;
	margin-top: 10px;
  }
  
  .reservation-mode-button {
	flex: 1;
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: var(--border-radius);
	background-color: var(--color-white);
	cursor: pointer;
	font-size: 1rem;
	transition: background-color 0.3s ease, color 0.3s ease;
  }
  
  .reservation-mode-button.active,
  .reservation-mode-button:hover {
	background-color: var(--color-blue);
	color: var(--color-white);
  }
  

--- NewReservation/StepOne/css/timeSelector.css ---
/* src/components/NewReservation/css/timeSelector.css */

.new-reservation-page .time-selector-container {
	position: relative;
  }
  
  .new-reservation-page .time-display {
	display: flex;
	align-items: center;
	justify-content: space-between;
	width: 100%;
	padding: 10px;
	background-color: #fff;
	border: #ccc 1px solid;
	cursor: pointer;
	user-select: none;
	text-align: left;
	border-radius: 5px;
  }
  
  .new-reservation-page .time-display span:first-child {
	flex-grow: 1;
  }
  
  .new-reservation-page .time-selector {
	position: absolute;
	z-index: 1000;
	width: 100%;
	max-height: 300px;
	overflow-y: auto;
	background-color: rgba(255, 255, 255, 1);
	border: 1px solid #ccc;
	margin-top: 5px;
	padding: 10px;
	border-radius: 10px;
	animation: fadeInTimeSelector 0.3s ease-in-out;
	top: 75px;
  }
  
  @keyframes fadeInTimeSelector {
	from {
	  opacity: 0;
	}
	to {
	  opacity: 1;
	}
  }
  
  .new-reservation-page .time-period {
	margin-bottom: 15px;
  }
  
  .new-reservation-page .time-period-label {
	font-weight: bold;
	margin-bottom: 5px;
  }
  
  .new-reservation-page .time-options {
	display: flex;
	flex-wrap: wrap;
	gap: 5px;
  }
  
  .new-reservation-page .time-option {
	padding: 8px 12px;
	background-color: #ccffcc; /* Green background for available times */
	color: #006600;
	border-radius: 5px;
	cursor: pointer;
	transition: background-color 0.2s ease;
  }
  
  .new-reservation-page .time-option:hover {
	background-color: #b3ffb3;
  }
  
  .new-reservation-page .time-option.selected {
	background-color: #006600;
	color: #ccffcc;
  }
  
  .new-reservation-page .info-text {
	color: #666;
	font-style: italic;
  }
  
  .new-reservation-page .arrow {
	margin-left: auto;
	color: gray;
	display: flex;
	align-items: center;
  }
  
  @media screen and (max-width: 480px) {
	.new-reservation-page .time-option {
	  padding: 6px 10px;
	  font-size: 14px;
	}
  }
  
/* ... existing styles ... */

.new-reservation-pag .time-option {
	padding: 6px 10px; /* Reduced padding */
	font-size: 0.9rem; /* Reduced font size */
  }
  
  .new-reservation-pag .time-selector {
	top: 65px; /* Adjusted position */
  }
  
  /* ... existing styles ... */
  





--- NewReservation/StepOne/css/valueSelector.css ---
/* Use the same CSS provided, adjusted for the value selector */

.new-reservation-page .value-selector {
	display: flex;
	flex-direction: column;
	gap: 15px;
	margin-bottom: 20px;
  }

  .new-reservation-page .non-absolute {
	position: relative !important;
  }

  .new-reservation-page .non-absolute::before {
	background: none;
  }
  
  .new-reservation-page .predefined-values {
	display: flex;
	gap: 10px;
  }
  
  .new-reservation-page .predefined-value-button {
	flex: 1;
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: var(--border-radius);
	background-color: var(--color-white);
	cursor: pointer;
	font-size: 1rem;
	transition: background-color 0.3s ease;
  }
  
  .new-reservation-page .predefined-value-button.active,
  .new-reservation-page .predefined-value-button:hover {
	background-color: var(--color-blue);
	color: var(--color-white);
  }
  
  .new-reservation-page .slider-container {
	display: flex;
	align-items: center;
	gap: 15px;
  }
  
  .new-reservation-page .slider {
	flex: 1;
	appearance: none;
	-webkit-appearance: none;
	height: 5px;
	background: #ddd;
	border-radius: 5px;
	outline: none;
  }
  
  .new-reservation-page .slider::-webkit-slider-thumb {
	-webkit-appearance: none;
	appearance: none;
	width: 20px;
	height: 20px;
	background: var(--color-blue);
	cursor: pointer;
	border-radius: 50%;
  }
  
  .new-reservation-page .value-input {
	width: 80px;
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: var(--border-radius);
	font-size: 1rem;
  }
  


--- NewReservation/StepOne/index.js ---
import React, { useState, useEffect } from 'react';
import ValueSelectorGuests from './ValueSelector';
import DateSelector from './DateSelector';
import TimeSelector from './TimeSelector';
import './css/reservationMode.css'; // Import CSS for reservation mode
import moment from 'moment';
import useApi from '../../../Hooks/useApi'; // Import useApi
import { isWeekInPast } from './Utils/dateUtils';

const ReservationStepOne = ({
  formData,
  errors,
  handleChange,
  handleStepOneSubmit,
  setFormData,
  timeblocks,
  loadingTimeblocks,
  timeblocksError,
  restaurantData,
}) => {
  const [guests, setGuests] = useState(1);
  const [startDate, setStartDate] = useState(null); // startDate state
  const [reservations, setReservations] = useState([]); // reservations state
  const api = useApi(); // Initialize useApi hook

  const resetFormDataFields = (fieldsToReset) => {
    setFormData((prevFormData) => {
      const newFormData = { ...prevFormData };
      fieldsToReset.forEach((field) => {
        newFormData[field] = '';
      });
      return newFormData;
    });
  };

  // Initialize startDate
  useEffect(() => {
    const today = moment().tz('Europe/Amsterdam').startOf('day');
    let firstWeekStart = today.clone().startOf('isoWeek');
    while (isWeekInPast(firstWeekStart)) {
      firstWeekStart.add(1, 'week');
    }
    setStartDate(firstWeekStart);
  }, []);

  // Fetch reservations when startDate changes
  useEffect(() => {
    const fetchReservations = async () => {
      if (startDate) {
        const beginDate = startDate.format('YYYY-MM-DD');
        const endDate = startDate.clone().add(13, 'days').format('YYYY-MM-DD');
        const restaurantId = localStorage.getItem('username');
        const endpoint = `${window.baseDomain}api/slots/${restaurantId}/${beginDate}/${endDate}`;

        try {
          console.log('Calendar Slots GET');
          const data = await api.get(endpoint, { noCache: true });
          setReservations(data); // Update reservations state
          console.log('Fetched reservations:', data);
        } catch (error) {
          console.error('Error fetching reservations:', error);
        }
      }
    };

    fetchReservations();
  }, [startDate, api]);

  // Handler for week change
  const handleWeekChange = (newStartDate) => {
    setStartDate(newStartDate);
  };

  // Set default reservation mode to 'met_limieten' on component mount
  useEffect(() => {
    if (!formData.reservationMode) {
      handleChange({
        target: { name: 'reservationMode', value: 'met_limieten' },
      });
    }
  }, [formData.reservationMode, handleChange]);

  useEffect(() => {
    resetFormDataFields(['date', 'time']);
  }, [guests]);

  if (timeblocksError) {
    return (
      <div>
        <a
          href="https://dashboard.reservaties.net/#/scheme"
          target="_blank"
          rel="noopener noreferrer"
          style={{ color: 'var(--color-blue)', textDecoration: 'underline' }}
        >
          Klik hier
        </a>{' '}
        om uw openingsuren in te stellen.
      </div>
    );
  }

  // Handler for reservation mode selection
  const handleReservationModeSelect = (mode) => {
    handleChange({
      target: { name: 'reservationMode', value: mode },
    });
    // Reset date and time when reservation mode changes
    resetFormDataFields(['date', 'time']);
  };

  return (
    <form
      className="account-manage-form"
      onSubmit={handleStepOneSubmit}
      noValidate
    >
      {/* Reservation Mode Selection */}
      <div className="form-group reservation-mode">
        <div className="reservation-mode-buttons">
          <button
            type="button"
            className={`reservation-mode-button ${
              formData.reservationMode === 'met_limieten' ? 'active' : ''
            }`}
            onClick={() => handleReservationModeSelect('met_limieten')}
            aria-pressed={formData.reservationMode === 'met_limieten'}
          >
            Met Limieten
          </button>
          <button
            type="button"
            className={`reservation-mode-button ${
              formData.reservationMode === 'zonder_regels' ? 'active' : ''
            }`}
            onClick={() => handleReservationModeSelect('zonder_regels')}
            aria-pressed={formData.reservationMode === 'zonder_regels'}
          >
            Onbeperkt
          </button>
        </div>
      </div>

      <ValueSelectorGuests
        setGuests={setGuests}
        value={formData.guests}
        onChange={handleChange}
        error={errors.guests}
      />

      {formData.guests && (
        <>
          <DateSelector
            guests={formData.guests}
            formData={formData}
            handleChange={handleChange}
            resetFormDataFields={resetFormDataFields}
            timeblocks={timeblocks}
            restaurantData={restaurantData}
            reservations={reservations} // Pass down reservations
            startDate={startDate} // Pass down startDate
            onWeekChange={handleWeekChange} // Pass down onWeekChange handler
            reservationMode={formData.reservationMode} // Pass reservationMode
          />
        </>
      )}

      {formData.date && (
        <>
          <TimeSelector
            guests={formData.guests}
            formData={formData}
            handleChange={handleChange}
            field={{ id: 'time', label: 'Tijd' }}
            selectedDate={formData.date}
            setCurrentExpandedField={() => {}}
            restaurantData={restaurantData}
            reservations={reservations}
            reservationMode={formData.reservationMode} // Pass reservationMode
          />
        </>
      )}
    </form>
  );
};

export default ReservationStepOne;


--- NewReservation/css/newReservationAdmin.css ---
/* newReservationAdmin.css */

  
.new-reservation-page .account-manage-title {
	text-align: center;
	margin-bottom: 30px;
  }
  
  .new-reservation-page .account-manage-container {
	max-width: 800px;
	margin: 0 auto;
  }
  
  .new-reservation-page .account-manage-form {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  .new-reservation-page .input-container {
	position: relative;
  }
  
  .new-reservation-page .input-icon {
	position: absolute;
	top: 50%;
	left: 10px;
	transform: translateY(-50%);
	color: #6c757d;
	pointer-events: none;
  }
  
  .new-reservation-page .input-container input,
  .new-reservation-page .input-container textarea {
	width: 100%;
	padding: 10px 10px 10px 35px;
	border: 1px solid #ccc;
	border-radius: 5px;
	font-size: 1rem;
	transition: border-color 0.3s ease;
  }
  
  .new-reservation-page .form-error {
	color: #dc3545;
	font-size: 0.9rem;
	margin-top: 5px;
	display: flex;
	align-items: center;
	gap: 5px;
  }
  
  .new-reservation-page .account-manage__button {
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	display: flex;
	align-items: center;
	justify-content: center;
	gap: 10px;
	transition: background-color 0.3s ease;
  }
  

--- NewReservation/css/reservationSidebar.css ---

/* reservationSidebar.js */

.new-reservation-page .reservation-sidebar-component {
	position: fixed;
	top: 0;
	right: -400px; /* Start off-screen */
	width: 400px;
	height: 100%;
	background-color: #fff;
	box-shadow: -2px 0 5px rgba(0,0,0,0.1);
	z-index: var(--z-index-sidebar-reservation); /* Updated z-index */
	display: flex;
	flex-direction: column;
	overflow-y: auto;
	transition: right 0.3s ease-in-out;
  }

  .new-reservation-page .admin-title {
	text-align: center;
	margin-bottom: 30px;
  }
  
  .new-reservation-page .reservation-sidebar-component.open {
	right: 0;
  }
  
  .new-reservation-page .reservation-sidebar-content {
	padding: 20px;
	padding-top: 60px; /* To make room for the close button */
  }
  
  .new-reservation-page .close-sidebar-button {
	position: absolute;
	top: 10px;
	left: 10px;
	background-color: transparent;
	border: none;
	cursor: pointer;
  }
  
  .new-reservation-page .close-sidebar-button svg {
	color: #000;
  }
  
  .new-reservation-page .sidebar-section-one,
  .new-reservation-page .sidebar-section-two {
	margin-bottom: 20px;
  }
  
  .new-reservation-page .reservation-footer {
	margin-top: auto;
  }
  
  .new-reservation-page .store-reservation-button {
	width: 100%;
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
  }
  
  .new-reservation-page .open-sidebar-button {
	position: fixed;
	bottom: 20px;
	right: 20px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 50%;
	width: 50px;
	height: 50px;
	cursor: pointer;
	z-index: var(--z-index-modal) !important;
	transition: all 0.3s ease;
  }

  .new-reservation-page .open-sidebar-button:hover {
	background-color: var(--color-blue-hover-accent) !important;
  }
  
  .new-reservation-page .open-sidebar-button svg {
	position: relative;
	top: 2px;
  }
  
  @media screen and (max-width: 480px) {
	.new-reservation-page .reservation-sidebar-component {
	  width: 100%;
	}
  }
  

--- NewReservation/css/reservationSummary.css ---
/* src/components/ReservationForm/css/reservationSummary.css */

.new-reservation-page .reservation-sidebar-component .reservation-summary .modal-title {
	margin-top: 0;
	margin-bottom: 20px;
  }
  
  .new-reservation-page .reservation-sidebar-component .reservation-summary .reservation-details {
	list-style-type: none;
	padding: 0;
	margin: 0 0 20px 0;
	width: 100%;
  }
  
  .new-reservation-page .reservation-sidebar-component .reservation-summary .reservation-details li {
	margin-bottom: 10px;
	font-size: 15px;
	align-items: left;
	text-align: left;
  }
  
  .new-reservation-page .reservation-sidebar-component .reservation-summary .reservation-details li strong {
	font-weight: bold;
  }
  
  .new-reservation-page .reservation-sidebar-component .reservation-summary {
	align-items: left;
  }
  

--- NewReservation/css/reservationsStepTwo.css ---
/* Name Fields Container */
.new-reservation-page .name-fields {
	display: flex;
	gap: 20px;
  }

  .input-container .form-control { /* New reservation prefix can't be added here*/
	display: flex;
		align-items: center;
		justify-content: space-between;
		width: 100%;
		padding: 10px;
		background-color: #fff;
		border: #ccc 1px solid;
		cursor: pointer;
		-webkit-user-select: none;
		user-select: none;
		text-align: left;
		border-radius: 5px;
		font-size: 16px;
  }

--- NewReservation/index.js ---
// src/components/NewReservationAdmin.js

import React, { useState } from 'react';
import useApi from '../../Hooks/useApi';
import ReservationSidebar from './ReservationSidebar';
import { AiOutlinePlus } from 'react-icons/ai';

import './css/newReservationAdmin.css';

const NewReservationAdmin = () => {
  const api = useApi();

  const [formData, setFormData] = useState({
    guests: '',
    date: '',
    time: '',
    menu: '', // Existing
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    extraInfo: '',
    personeel: '', // Add personeel field
  });

  const [errors, setErrors] = useState({});

  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [reservationSubmitted, setReservationSubmitted] = useState(false);

  const validateStepOne = () => {
    const errors = {};
    if (!formData.guests) {
      errors.guests = 'Aantal gasten is verplicht';
    }
    if (!formData.date) {
      errors.date = 'Datum is verplicht';
    }
    if (!formData.time) {
      errors.time = 'Tijd is verplicht';
    }
    return errors;
  };

  const validateStepTwo = () => {
    const errors = {};

    if (formData.email && !/\S+@\S+\.\S+/.test(formData.email)) {
      errors.email = 'E-mail is ongeldig';
    }

    // Optional: Validate personeel selection if necessary
    // For example, require selecting personeel
    // if (!formData.personeel) {
    //   errors.personeel = 'Selecteer een personeel';
    // }

    return errors;
  };

  const handleFinalSubmit = async (e) => {
    e.preventDefault();
    const stepOneErrors = validateStepOne();
    const stepTwoErrors = validateStepTwo();
    const allErrors = { ...stepOneErrors, ...stepTwoErrors };
    if (Object.keys(allErrors).length > 0) {
      setErrors(allErrors);
    } else {
      setErrors({});
      setIsSubmitting(true);
      const submissionData = {
        guests: formData.guests,
        date: formData.date,
        time: formData.time,
        firstName: formData.firstName,
        lastName: formData.lastName,
        email: formData.email,
        phone: formData.phone,
        extraInfo: formData.extraInfo,
        menu: formData.menu,
        personeel: formData.personeel, // Include personeel in submission
      };

      try {
        await api.post(`${window.baseDomain}api/auth-reservations/`, submissionData);
        setReservationSubmitted(true);
      } catch (error) {
        console.error('Error submitting reservation:', error);
      } finally {
        setIsSubmitting(false);
      }
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
    setErrors({ ...errors, [name]: '' });
  };

  return (
    <div className="new-reservation-page">
      <button
        className="open-sidebar-button"
        onClick={() => setIsSidebarOpen(true)}
        style={{ zIndex: isSidebarOpen ? 0 : 1000 }}
      >
        <AiOutlinePlus size={24} color="#fff" />
      </button>
      {/* Sidebar */}
      <ReservationSidebar
        isOpen={isSidebarOpen}
        onClose={() => setIsSidebarOpen(false)}
        formData={formData}
        errors={errors}
        handleChange={handleChange}
        handleFinalSubmit={handleFinalSubmit}
        setFormData={setFormData}
        isSubmitting={isSubmitting}
        reservationSubmitted={reservationSubmitted}
        onNewReservation={() => {
          setFormData({
            guests: '',
            date: '',
            time: '',
            firstName: '',
            lastName: '',
            email: '',
            phone: '',
            extraInfo: '',
            menu: '',
            personeel: '', // Reset personeel selection
          });
          setReservationSubmitted(false);
        }}
      />
    </div>
  );
};

export default NewReservationAdmin;


--- Openingsuren/DayContent.js ---
// src/Pages/Uitzonderingen/DayContent.js

import React, { useState, useEffect, useRef } from 'react';
import './css/dayContent.css';
import MaxCapacityAccordion from './MaxCapacityAccordion';
import ShiftsAccordion from './ShiftsAccordion';
import useApi from '../../Hooks/useApi';
import useNotification from '../../Components/Notification';
import { shifts } from './constants';

const DayContent = ({ dayId, days, mealType, scheduleData, setScheduleData }) => {
  const api = useApi();
  const day = days.find((d) => d.id === dayId);

  const { triggerNotification, NotificationComponent } = useNotification();

  const [dayData, setDayData] = useState({
    startTime: '',
    endTime: '',
    maxCapacityEnabled: false,
    maxCapacity: '',
    shiftsEnabled: false,
    shifts: [],
  });

  const [errors, setErrors] = useState({});

  const endTimeRef = useRef(null);

  useEffect(() => {
    if (scheduleData && scheduleData[dayId]) {
      const dataForDay = scheduleData[dayId];
      setDayData({
        startTime: dataForDay.startTime || '',
        endTime: dataForDay.endTime || '',
        maxCapacityEnabled: dataForDay.maxCapacityEnabled || false,
        maxCapacity: dataForDay.maxCapacity || '',
        shiftsEnabled: dataForDay.shiftsEnabled || false,
        shifts: dataForDay.shifts || [],
      });
    } else {
      setDayData({
        startTime: '',
        endTime: '',
        maxCapacityEnabled: false,
        maxCapacity: '',
        shiftsEnabled: false,
        shifts: [],
      });
    }
    setErrors({});
  }, [scheduleData, dayId]);

  // Generate time options based on mealType
  const generateTimeOptions = (type) => {
    if (!type || !shifts[type]) return [];

    const start = shifts[type].start;
    const end = shifts[type].end;

    const [startHour, startMinute] = start.split(':').map(Number);
    const [endHour, endMinute] = end.split(':').map(Number);

    const options = [];
    let current = new Date();
    current.setHours(startHour, startMinute, 0, 0);

    const endTime = new Date();
    endTime.setHours(endHour, endMinute, 0, 0);

    while (current <= endTime) {
      const hours = current.getHours().toString().padStart(2, '0');
      const minutes = current.getMinutes().toString().padStart(2, '0');
      options.push(`${hours}:${minutes}`);
      current.setMinutes(current.getMinutes() + 15);
    }

    return options;
  };

  // Get start time options
  const startTimeOptions = generateTimeOptions(mealType);

  // Get end time options based on selected start time
  const getEndTimeOptions = () => {
    if (!dayData.startTime) return generateTimeOptions(mealType);

    const [startHour, startMinute] = dayData.startTime.split(':').map(Number);
    const [mealEndHour, mealEndMinute] = shifts[mealType].end.split(':').map(Number);

    const start = new Date();
    start.setHours(startHour, startMinute, 0, 0);

    const end = new Date();
    end.setHours(mealEndHour, mealEndMinute, 0, 0);

    const options = [];
    let current = new Date(start);
    current.setMinutes(current.getMinutes() + 15);

    while (current <= end) {
      const hours = current.getHours().toString().padStart(2, '0');
      const minutes = current.getMinutes().toString().padStart(2, '0');
      options.push(`${hours}:${minutes}`);
      current.setMinutes(current.getMinutes() + 15);
    }

    return options;
  };

  const endTimeOptions = getEndTimeOptions();

  // Handle Save with Validations
  const handleSave = async () => {
    const validationErrors = {};

    // Check if end time is after start time
    if (dayData.startTime && dayData.endTime) {
      const start = dayData.startTime.split(':').map(Number);
      const end = dayData.endTime.split(':').map(Number);

      const startDate = new Date();
      startDate.setHours(start[0], start[1], 0, 0);

      const endDate = new Date();
      endDate.setHours(end[0], end[1], 0, 0);

      if (endDate <= startDate) {
        validationErrors.endTime = 'Eindtijd moet na de starttijd zijn.';
      }
    }

    // Prevent selecting times in the past
    const now = new Date();
    if (dayData.startTime) {
      const [startHour, startMinute] = dayData.startTime.split(':').map(Number);
      const startDate = new Date();
      startDate.setHours(startHour, startMinute, 0, 0);

      if (startDate < now) {
        validationErrors.startTime = 'Starttijd mag niet in het verleden liggen.';
      }
    }

    if (dayData.endTime) {
      const [endHour, endMinute] = dayData.endTime.split(':').map(Number);
      const endDate = new Date();
      endDate.setHours(endHour, endMinute, 0, 0);

      if (endDate < now) {
        validationErrors.endTime = 'Eindtijd mag niet in het verleden liggen.';
      }
    }

    // Additional validations can be added here as needed

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      triggerNotification(
        Object.values(validationErrors).join(' '),
        'error'
      );
      return;
    }

    // Merge existing scheduleData with the updated data for the current day
    const updatedSchemeSettings = {
      ...scheduleData,
      [day.id]: {
        enabled: true,
        startTime: dayData.startTime,
        endTime: dayData.endTime,
        maxCapacityEnabled: dayData.maxCapacityEnabled,
        maxCapacity: dayData.maxCapacity,
        shiftsEnabled: dayData.shiftsEnabled,
        shifts: dayData.shifts,
      },
    };

    const updatedData = {
      schemeSettings: updatedSchemeSettings,
    };

    try {
      await api.put(`${window.baseDomain}api/openinghours-${mealType}`, updatedData);
      triggerNotification('Data succesvol opgeslagen', 'success');
      // Update local scheduleData without reloading from backend
      setScheduleData(updatedSchemeSettings);
    } catch (error) {
      console.error('Error saving data:', error);
      triggerNotification('Fout bij het opslaan van data', 'error');
    }
  };

  let mealTypeLabel = '';
  if (mealType === 'breakfast') {
    mealTypeLabel = 'ochtend';
  } else if (mealType === 'lunch') {
    mealTypeLabel = 'middag';
  } else if (mealType === 'dinner') {
    mealTypeLabel = 'avond';
  }

  return (
    <div className="schedule-page">
      <h1 className="schedule-page-title">{day.title}{mealTypeLabel}</h1>

      <NotificationComponent />

      <div className="day-content scheme-container">
        <div className="time-inputs-container">
          <div className="input-container">
            <label htmlFor="startTime">Start Tijd</label>
            <select
              id="startTime"
              name="startTime"
              value={dayData.startTime}
              onChange={(e) => {
                setDayData({ ...dayData, startTime: e.target.value, endTime: '' });
                setErrors({ ...errors, startTime: '', endTime: '' });
              }}
              className="exceptions-page__select"
            >
              <option value="">Selecteer Start Tijd</option>
              {startTimeOptions.map((time) => (
                <option key={time} value={time}>
                  {time}
                </option>
              ))}
            </select>
            {errors.startTime && (
              <p className="exceptions-page__error">{errors.startTime}</p>
            )}
          </div>
          <div className="input-container">
            <label htmlFor="endTime">Eind Tijd</label>
            <select
              id="endTime"
              name="endTime"
              value={dayData.endTime}
              onChange={(e) => setDayData({ ...dayData, endTime: e.target.value })}
              className="exceptions-page__select"
              disabled={!dayData.startTime}
              ref={endTimeRef}
            >
              <option value="">Selecteer Eind Tijd</option>
              {endTimeOptions.map((time) => (
                <option key={time} value={time}>
                  {time}
                </option>
              ))}
            </select>
            {errors.endTime && (
              <p className="exceptions-page__error">{errors.endTime}</p>
            )}
          </div>
        </div>

        <MaxCapacityAccordion
          enabled={dayData.maxCapacityEnabled}
          setEnabled={(enabled) =>
            setDayData({ ...dayData, maxCapacityEnabled: enabled, maxCapacity: '' })
          }
          maxCapacity={dayData.maxCapacity}
          setMaxCapacity={(maxCapacity) =>
            setDayData({ ...dayData, maxCapacity })
          }
        />

        <ShiftsAccordion
          enabled={dayData.shiftsEnabled}
          setEnabled={(enabled) => setDayData({ ...dayData, shiftsEnabled: enabled })}
          shifts={dayData.shifts}
          setShifts={(shifts) => setDayData({ ...dayData, shifts })}
          startTime={dayData.startTime}
          endTime={dayData.endTime}
        />

        <button className="button-style-3" onClick={handleSave}>
          Opslaan
        </button>
      </div>
    </div>
  );
};

export default DayContent;


--- Openingsuren/Hooks/useWindowWidth.js ---
// src/hooks/useWindowWidth.js

import { useState, useEffect } from 'react';

const useWindowWidth = () => {
  const [windowWidth, setWindowWidth] = useState(window.innerWidth);

  useEffect(() => {
    const handleResize = () => setWindowWidth(window.innerWidth);
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return windowWidth;
};

export default useWindowWidth;


--- Openingsuren/MaxCapacityAccordion.js ---
// MaxCapacityAccordion.js

import React from 'react';
import { FaChevronDown } from 'react-icons/fa';
import ToggleSwitch from './ToggleSwitch';
import './css/maxCapacityAccordion.css';

const MaxCapacityAccordion = ({
  enabled,
  setEnabled,
  maxCapacity,
  setMaxCapacity,
}) => {
  const [isExpanded, setIsExpanded] = React.useState(enabled);

  React.useEffect(() => {
    setIsExpanded(enabled);
  }, [enabled]);

  const handleHeaderClick = () => {
    if (enabled) {
      setIsExpanded(!isExpanded);
    }
  };

  const handleToggle = () => {
    setEnabled(!enabled);
    if (!enabled) {
      setIsExpanded(true);
    } else {
      setIsExpanded(false);
    }
  };

  return (
    <div className="max-capacity-accordion">
      <div
        className={`item-header ${isExpanded ? 'expanded' : ''}`}
        onClick={handleHeaderClick}
      >
        <div className={`item-label ${!enabled ? 'disabled' : ''}`}>
          {enabled && (
            <FaChevronDown className={`arrow-icon ${isExpanded ? 'expanded' : ''}`} />
          )}
          <span>Max Capaciteit</span>
        </div>
        <div className="toggle-middle" onClick={(e) => e.stopPropagation()}>
          <ToggleSwitch checked={enabled} onChange={handleToggle} />
        </div>
      </div>
      {isExpanded && enabled && (
        <div className="item-content">
          <label htmlFor="maxCapacity">Max Capaciteit</label>
          <input
            type="number"
            id="maxCapacity"
            name="maxCapacity"
            value={maxCapacity}
            onChange={(e) => setMaxCapacity(e.target.value)}
            min="1"
          />
        </div>
      )}
    </div>
  );
};

export default MaxCapacityAccordion;


--- Openingsuren/NavigationBar.js ---
// src/pages/SchedulePage/NavigationBar.js

import React from 'react';
import './css/navigationBar.css';
import {
  FaSun,
  FaCloud,
  FaUmbrella,
  FaBolt,
  FaRainbow,
  FaSnowflake,
  FaMoon,
} from 'react-icons/fa';
import { motion, LayoutGroup } from 'framer-motion';

const NavigationBar = ({ days, selectedDay, onDayClick, scheduleData }) => {
  const icons = {
    FaSun: <FaSun />,
    FaCloud: <FaCloud />,
    FaUmbrella: <FaUmbrella />,
    FaBolt: <FaBolt />,
    FaRainbow: <FaRainbow />,
    FaSnowflake: <FaSnowflake />,
    FaMoon: <FaMoon />,
  };

  return (
    <div className="schedule-page navigation-bar">
      <div className="navigation-container">
        <LayoutGroup>
          {days.map((day, index) => {
            const isSelected = selectedDay === day.id;
            const dataForDay = scheduleData ? scheduleData[day.id] : null;
            const hasStartEndTime =
              dataForDay && dataForDay.startTime && dataForDay.endTime;
            const opacityStyle = !hasStartEndTime ? { opacity: 0.4 } : {};

            return (
              <motion.div
                key={day.id}
                className={`navigation-item ${isSelected ? 'selected' : ''}`}
                onClick={() => onDayClick(day.id)}
                whileHover={{ scale: 1.05 }}
                animate={{ scale: isSelected ? 1.1 : 1 }}
                layout
                style={opacityStyle}
              >
                {isSelected && (
                  <motion.div
                    className="selected-day-background"
                    layoutId="selected-day-background"
                    transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                  />
                )}
                <div className="icon">{icons[day.icon]}</div>
                <div className="label">{day.label}</div>
                {!isSelected && index < days.length - 1 && (
                  <div className="border-right"></div>
                )}
              </motion.div>
            );
          })}
        </LayoutGroup>
      </div>
    </div>
  );
};

export default NavigationBar;


--- Openingsuren/ShiftsAccordion.js ---
// src/Pages/Uitzonderingen/ShiftsAccordion.js

import React, { useState, useEffect } from 'react';
import { FaChevronDown, FaTrash } from 'react-icons/fa';
import ToggleSwitch from './ToggleSwitch';
import './css/shiftsAccordion.css';

const ShiftsAccordion = ({ enabled, setEnabled, shifts, setShifts, startTime, endTime }) => {
  const [isExpanded, setIsExpanded] = useState(enabled);

  useEffect(() => {
    setIsExpanded(enabled);
  }, [enabled]);

  const handleHeaderClick = () => {
    if (enabled) {
      setIsExpanded(!isExpanded);
    }
  };

  const handleToggle = () => {
    setEnabled(!enabled);
    if (!enabled) {
      setIsExpanded(true);
    } else {
      setIsExpanded(false);
    }
  };

  const generateShiftTimeOptions = (startTime, endTime) => {
    if (!startTime || !endTime) return [];

    const [startHour, startMinute] = startTime.split(':').map(Number);
    const [endHour, endMinute] = endTime.split(':').map(Number);

    const startDate = new Date();
    startDate.setHours(startHour, startMinute, 0, 0);

    const endDate = new Date();
    endDate.setHours(endHour, endMinute, 0, 0);

    const options = [];
    let current = new Date(startDate);

    // Inclusive of startTime, exclusive of endTime
    while (current < endDate) {
      const hours = current.getHours().toString().padStart(2, '0');
      const minutes = current.getMinutes().toString().padStart(2, '0');
      options.push(`${hours}:${minutes}`);
      current.setMinutes(current.getMinutes() + 15);
    }

    return options;
  };

  const shiftTimeOptions = generateShiftTimeOptions(startTime, endTime);

  const addNewShift = () => {
    setShifts([...shifts, { name: '', time: '' }]);
  };

  const handleShiftChange = (index, field, value) => {
    const newShifts = [...shifts];
    newShifts[index][field] = value;
    setShifts(newShifts);
  };

  const removeShift = (index) => {
    const newShifts = [...shifts];
    newShifts.splice(index, 1);
    setShifts(newShifts);
  };

  return (
    <div className="shifts-accordion">
      <div
        className={`item-header ${isExpanded ? 'expanded' : ''}`}
        onClick={handleHeaderClick}
      >
        <div className={`item-label ${!enabled ? 'disabled' : ''}`}>
          {enabled && (
            <FaChevronDown className={`arrow-icon ${isExpanded ? 'expanded' : ''}`} />
          )}
          <span>Shifts ({shifts.length})</span>
        </div>
        <div className="toggle-middle" onClick={(e) => e.stopPropagation()}>
          <ToggleSwitch checked={enabled} onChange={handleToggle} />
        </div>
      </div>
      {isExpanded && enabled && (
        <div className="item-content">
          {(!startTime || !endTime) && (
            <p className="shift-error">Selecteer eerst een starttijd en eindtijd.</p>
          )}
          {startTime &&
            endTime &&
            shifts.map((shift, index) => (
              <div key={index} className="shift-row">
                <select
                  value={shift.time}
                  onChange={(e) => handleShiftChange(index, 'time', e.target.value)}
                  className="shift-select"
                >
                  <option value="">Selecteer Tijd</option>
                  {shiftTimeOptions.map((time) => (
                    <option key={time} value={time}>
                      {time}
                    </option>
                  ))}
                </select>
                <input
                  type="text"
                  placeholder="Shift Naam"
                  value={shift.name}
                  onChange={(e) => handleShiftChange(index, 'name', e.target.value)}
                  className="shift-input"
                />
                <button
                  className="remove-shift-button"
                  onClick={() => removeShift(index)}
                >
                  <FaTrash />
                </button>
              </div>
            ))}
          {startTime && endTime && (
            <div className="add-shift" onClick={addNewShift}>
              <span>Voeg Nieuwe Shift Toe</span>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ShiftsAccordion;


--- Openingsuren/ToggleSwitch.js ---
// ToggleSwitch.jsx

import React from 'react';
import PropTypes from 'prop-types';

const ToggleSwitch = ({ checked, onChange, label, className }) => (
  <div className={`day-header ${className || ''}`}>
    <span className="day-label">{label}</span>
    <label className="switch" aria-label={label}>
      <input
        type="checkbox"
        checked={checked}
        onChange={onChange}
        aria-checked={checked}
        aria-labelledby={`${label}-toggle`}
      />
      <span className="slider round"></span>
    </label>
  </div>
);

ToggleSwitch.propTypes = {
  checked: PropTypes.bool.isRequired,
  onChange: PropTypes.func.isRequired,
  label: PropTypes.string.isRequired,
  className: PropTypes.string,
};

ToggleSwitch.defaultProps = {
  className: '',
};

export default ToggleSwitch;


--- Openingsuren/constants.js ---
// src/Pages/Uitzonderingen/constants.js

export const shifts = {
	breakfast: { start: '07:00', end: '11:00' },
	lunch: { start: '11:00', end: '16:00' },
	dinner: { start: '16:00', end: '23:00' },
  };
  

--- Openingsuren/css/dayContent.css ---
.schedule-page-component .scheme-container {
	max-width: 600px;
	padding: 20px;
	border-radius: 12px;
	margin: 0 auto;
	margin-bottom: 50px;
	width: 100%;
	background-color: #fff;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.schedule-page-component .scheme-container label {
	display: block;
	margin-bottom: 5px;
	font-weight: 500;
	color: #333;
}

.schedule-page-component .input-container {
	display: flex;
	flex-direction: column;
	width: 100%;
}

.schedule-page-component .input-container input {
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: 5px;
	font-size: 1rem;
	transition: border-color 0.3s ease;
}

.schedule-page-component .input-container input:focus {
	border-color: #0056b3;
	outline: none;
}

.schedule-page-component .time-inputs-container {
	display: grid;
	grid-template-columns: 1fr 1fr;
	gap: 16px;
	margin-top: 20px;
}

.schedule-page-component .schedule-page-title {
	margin-top: 40px;
}

.schedule-page-component .scheme-container {
	max-width: 600px;
	padding: 20px;
	border-radius: 12px;
	margin: 0 auto;
	background-color: #fff;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.schedule-page-component .account-manage-title {
	margin-top: 30px;
	margin-bottom: 30px;
}

.schedule-page-component .time-inputs-container {
	width: 100%;
}

.schedule-page-component .scheme-container label {
	display: block;
	margin-bottom: 5px;
	font-weight: 500;
	color: #333;
}

.schedule-page-component .input-container {
	display: flex;
	flex-direction: column;
}


--- Openingsuren/css/maxCapacityAccordion.css ---
/* src/components/css/maxCapacityAccordion.css */

.schedule-page-component .max-capacity-accordion {
	margin-top: 20px;
	width: 100%;
  }
  
  .schedule-page-component .item-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	cursor: pointer;
	padding: 10px;
	background-color: #f5f5f5; /* Adjust as needed */
	border-radius: 5px;
	transition: background-color 0.3s ease;
  }
  
  .schedule-page-component .item-header:hover {
	background-color: #e0e0e0;
  }
  
  .schedule-page-component .item-label {
	display: flex;
	align-items: center;
	font-size: 16px;
  }
  
  .schedule-page-component .item-label.disabled {
	opacity: 0.6;
	cursor: not-allowed;
  }
  
  .schedule-page-component .arrow-icon {
	margin-right: 8px;
	transition: transform 0.3s ease;
  }
  
  .schedule-page-component .arrow-icon.expanded {
	transform: rotate(180deg);
  }
  
  
  .schedule-page-component .item-content {
	margin-top: 10px;
	padding: 10px;
	background-color: #ffffff; /* White background */
	border: 1px solid #ddd;
	border-radius: 5px;
  }
  
  .schedule-page-component .item-content label {
	display: block;
	margin-bottom: 5px;
  }
  
  .schedule-page-component .item-content input {
	width: 100%;
	padding: 8px;
	box-sizing: border-box;

	padding: 10px;
	border: 1px solid #ccc;
	border-radius: 5px;
	font-size: 1rem;
	transition: border-color 0.3s ease;
  }
  

--- Openingsuren/css/navigationBar.css ---
.schedule-page-component .schedule-page .navigation-container {
	display: flex;
	width: 100%;
	position: relative;
}
  
.schedule-page-component .schedule-page .navigation-item {
	flex: 1;
	display: flex;
	flex-direction: column;
	align-items: center;
	cursor: pointer;
	position: relative;
	padding: 10px 0;
	overflow: hidden;
	background-color: transparent;
	transition: transform 0.3s;
}
  
.schedule-page-component .schedule-page .navigation-item.selected {
	z-index: 2;
}
  
.schedule-page-component .schedule-page .navigation-item .icon {
	font-size: 24px;
	color: #000;
	z-index: 1;
}
  
.schedule-page-component .schedule-page .navigation-item .label {
	font-size: 13px;
	margin-top: 5px;
	color: #000;
	z-index: 1;
}
  
.schedule-page-component .schedule-page .navigation-item .border-right {
	position: absolute;
	right: 0;
	top: 20%;
	bottom: 20%;
	width: 1px;
	background-color: #ccc;
	z-index: 0;
}
  
.schedule-page-component .schedule-page .navigation-item .selected-day-background {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	background-color: #fff;
	z-index: 0;
	border-radius: 8px;
}
  
.schedule-page-component .schedule-page .navigation-item:hover .icon,
.schedule-page-component .schedule-page .navigation-item:hover .label {
	color: var(--color-blue);
}
  
.schedule-page-component .schedule-page .navigation-item:hover {
	transform: scale(1.05);
}
  
.schedule-page-component .schedule-page .navigation-item.selected .icon,
.schedule-page-component .schedule-page .navigation-item.selected .label {
	color: var(--color-blue);
}



--- Openingsuren/css/schedulePage.css ---
.schedule-page-component .schedule-page {
	width: 100%;
	display: flex;
	flex-direction: column;
	align-items: center;
	font-family: Arial, sans-serif;
}
  
.schedule-page-component .schedule-page .navigation-bar {
	width: 80%;
	background-color: transparent;
	display: flex;
	justify-content: center;
	position: relative;
	margin-top: 20px;
}
  
.schedule-page-component .schedule-page .day-content {
	width: 80%;
	margin-top: 40px;
	display: flex;
	flex-direction: column;
	align-items: flex-start;
}
  
.schedule-page-component .schedule-page .day-content h1 {
	text-align: center;
	width: 100%;
	font-size: 24px;
	color: #333;
}


--- Openingsuren/css/shiftsAccordion.css ---
.schedule-page-component .shifts-accordion {
	margin-top: 20px;
	width: 100%;
	margin-bottom: 20px;
  }
  
  .schedule-page-component .item-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	cursor: pointer;
	padding: 10px;
	background-color: #f5f5f5;
	border-radius: 5px;
	transition: background-color 0.3s ease;
  }
  
  .schedule-page-component .item-header:hover {
	background-color: #e0e0e0;
  }
  
  .schedule-page-component .item-label {
	display: flex;
	align-items: center;
	font-size: 16px;
  }
  
  .schedule-page-component .item-label.disabled {
	opacity: 0.6;
	cursor: not-allowed;
  }
  
  .schedule-page-component .arrow-icon {
	margin-right: 8px;
	transition: transform 0.3s ease;
  }
  
  .schedule-page-component .arrow-icon.expanded {
	transform: rotate(180deg);
  }
  
  .schedule-page-component .item-content {
	margin-top: 10px;
	padding: 10px;
	background-color: #ffffff;
	border: 1px solid #ddd;
	border-radius: 5px;
  }
  
  .schedule-page-component .shift-row {
	display: flex;
	align-items: center;
	margin-bottom: 10px;
	gap: 10px;
  }
  
  .schedule-page-component .shift-select,
  .schedule-page-component .shift-input {
	flex: 1;
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: 5px;
	font-size: 1rem;
  }
  
  .schedule-page-component .shift-select:focus,
  .schedule-page-component .shift-input:focus {
	border-color: #0056b3;
	outline: none;
  }
  
  .schedule-page-component .remove-shift-button {
	background: none;
	border: none;
	cursor: pointer;
	color: #d9534f;
	font-size: 1.2rem;
	padding: 0;
	width: 50px;
	text-align: center;
  }
  
  .schedule-page-component .remove-shift-button:hover {
	color: #c9302c;
  }
  
  .schedule-page-component .add-shift {
	text-align: center;
	cursor: pointer;
	text-decoration: underline;
	color: var(--color-blue);
	padding: 10px;
	font-size: 1rem;
  }
  
  .schedule-page-component .add-shift:hover {
	opacity: 0.8;
  }
  

--- Openingsuren/index.js ---
// src/pages/SchedulePage/index.js

import React, { useState, useEffect } from 'react';
import './css/schedulePage.css';
import NavigationBar from './NavigationBar';
import DayContent from './DayContent';
import { withHeader } from '../../Components/Structural/Header';
import useWindowWidth from './Hooks/useWindowWidth';
import useApi from '../../Hooks/useApi';

const SchedulePage = ({ mealType }) => {
  const [selectedDay, setSelectedDay] = useState('Monday');
  const [scheduleData, setScheduleData] = useState({});
  const windowWidth = useWindowWidth();
  const api = useApi();

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await api.get(
          `${window.baseDomain}api/openinghours-${mealType}`
        );
        if (response) {
          setScheduleData(response.schemeSettings || {});
        } else {
          setScheduleData({});
        }
      } catch (error) {
        console.error('Error fetching schedule data:', error);
        setScheduleData({});
      }
    };
    fetchData();
  }, [api, mealType]);

  const isMobile = windowWidth < 900;

  const days = [
    {
      id: 'Monday',
      title: 'Maandag',
      label: isMobile ? 'Ma' : 'Maandag',
      icon: 'FaSun',
    },
    {
      id: 'Tuesday',
      title: 'Dinsdag',
      label: isMobile ? 'Di' : 'Dinsdag',
      icon: 'FaCloud',
    },
    {
      id: 'Wednesday',
      title: 'Woensdag',
      label: isMobile ? 'Wo' : 'Woensdag',
      icon: 'FaUmbrella',
    },
    {
      id: 'Thursday',
      title: 'Donderdag',
      label: isMobile ? 'Do' : 'Donderdag',
      icon: 'FaBolt',
    },
    {
      id: 'Friday',
      title: 'Vrijdag',
      label: isMobile ? 'Vr' : 'Vrijdag',
      icon: 'FaRainbow',
    },
    {
      id: 'Saturday',
      title: 'Zaterdag',
      label: isMobile ? 'Za' : 'Zaterdag',
      icon: 'FaSnowflake',
    },
    {
      id: 'Sunday',
      title: 'Zondag',
      label: isMobile ? 'Zo' : 'Zondag',
      icon: 'FaMoon',
    },
  ];

  const handleDayClick = (dayId) => {
    setSelectedDay(dayId);
  };

  return (
    <div className="schedule-page-component">
		
      <div className="schedule-page">
        <NavigationBar
          days={days}
          selectedDay={selectedDay}
          onDayClick={handleDayClick}
          scheduleData={scheduleData}
        />
        {selectedDay && (
          <DayContent
            dayId={selectedDay}
            days={days}
            mealType={mealType}
            scheduleData={scheduleData}
            setScheduleData={setScheduleData} // Pass the setter to DayContent
          />
        )}
      </div>
    </div>
  );
};

export default withHeader(SchedulePage);


--- Personeel/EditPersoneelModal.js ---
// src/Pages/Personeel/EditPersoneelModal.js
import React, { useState } from 'react';
import ModalWithoutTabs from '../../Components/Structural/Modal/Standard';
import './css/personeel.css';

const EditPersoneelModal = ({
  isVisible,
  personeel,
  api,
  triggerNotification,
  refreshPersoneel,
  onClose,
}) => {
  const [formData, setFormData] = useState({
    voornaam: personeel.voornaam || '',
    achternaam: personeel.achternaam || '',
    startDate: personeel.startDate || '',
    endDate: personeel.endDate || '',
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
    setErrors({ ...errors, [name]: '' });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const validationErrors = {};
    if (!formData.voornaam.trim()) validationErrors.voornaam = 'Voornaam is verplicht.';
    if (!formData.achternaam.trim()) validationErrors.achternaam = 'Achternaam is verplicht.';
    if (!formData.startDate) validationErrors.startDate = 'Startdatum is verplicht.';
    if (!formData.endDate) validationErrors.endDate = 'Einddatum is verplicht.';

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    const payload = {
      ...formData,
    };

    try {
      const response = await api.put(`${window.baseDomain}api/personeel/${personeel._id}`, payload);
      if (response) {
        triggerNotification('Personeel succesvol bijgewerkt', 'success');
        refreshPersoneel();
        onClose();
      } else {
        triggerNotification('Fout bij het bijwerken van het personeel', 'error');
      }
    } catch (error) {
      console.error('Error updating personeel:', error);
      triggerNotification('Fout bij het bijwerken van het personeel', 'error');
    }
  };

  if (!isVisible) return null;

  return (
    <ModalWithoutTabs
      onClose={onClose}
      content={
        <div className="personeel-component__edit-modal">
          <form className="personeel-component__form" onSubmit={handleSubmit}>
            <div className="personeel-component__form-group">
              <label>Voornaam</label>
              <input
                type="text"
                name="voornaam"
                value={formData.voornaam}
                onChange={handleChange}
                className="personeel-component__input"
              />
              {errors.voornaam && <p className="personeel-component__error">{errors.voornaam}</p>}
            </div>

            <div className="personeel-component__form-group">
              <label>Achternaam</label>
              <input
                type="text"
                name="achternaam"
                value={formData.achternaam}
                onChange={handleChange}
                className="personeel-component__input"
              />
              {errors.achternaam && <p className="personeel-component__error">{errors.achternaam}</p>}
            </div>

            <div className="personeel-component__form-group">
              <label>Start Datum</label>
              <input
                type="date"
                name="startDate"
                value={formData.startDate}
                onChange={handleChange}
                className="personeel-component__input"
              />
              {errors.startDate && <p className="personeel-component__error">{errors.startDate}</p>}
            </div>

            <div className="personeel-component__form-group">
              <label>Eind Datum</label>
              <input
                type="date"
                name="endDate"
                value={formData.endDate}
                onChange={handleChange}
                className="personeel-component__input"
              />
              {errors.endDate && <p className="personeel-component__error">{errors.endDate}</p>}
            </div>

            <button type="submit" className="button-style-3">
              Personeel Bijwerken
            </button>
          </form>
        </div>
      }
    />
  );
};

export default EditPersoneelModal;


--- Personeel/PersoneelForm.js ---
// src/Pages/Personeel/PersoneelForm.js
import React, { useState } from 'react';
import './css/personeel.css';

const PersoneelForm = ({ api, triggerNotification, refreshPersoneel }) => {
  const [formData, setFormData] = useState({
    voornaam: '',
    achternaam: '',
    startDate: '',
    endDate: '',
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value } = e.target;

    setFormData({ ...formData, [name]: value });
    setErrors({ ...errors, [name]: '' });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const validationErrors = {};
    if (!formData.voornaam.trim()) validationErrors.voornaam = 'Voornaam is verplicht.';
    if (!formData.achternaam.trim()) validationErrors.achternaam = 'Achternaam is verplicht.';
    if (!formData.startDate) validationErrors.startDate = 'Startdatum is verplicht.';
    if (!formData.endDate) validationErrors.endDate = 'Einddatum is verplicht.';

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    const payload = {
      voornaam: formData.voornaam,
      achternaam: formData.achternaam,
      startDate: formData.startDate,
      endDate: formData.endDate,
    };

    try {
      const response = await api.post(`${window.baseDomain}api/personeel`, payload);
      if (response) {
        setFormData({
          voornaam: '',
          achternaam: '',
          startDate: '',
          endDate: '',
        });
        setErrors({});
        triggerNotification('Personeel succesvol toegevoegd', 'success');
        refreshPersoneel();
      } else {
        triggerNotification('Fout bij het toevoegen van het personeel', 'error');
      }
    } catch (error) {
      console.error('Error adding personeel:', error);
      triggerNotification('Fout bij het toevoegen van het personeel', 'error');
    }
  };

  return (
    <form className="personeel-component__form" onSubmit={handleSubmit}>
      <div className="personeel-component__form-group">
        <label>Voornaam</label>
        <input
          type="text"
          name="voornaam"
          value={formData.voornaam}
          onChange={handleChange}
          placeholder="Voornaam"
          className="personeel-component__input"
        />
        {errors.voornaam && <p className="personeel-component__error">{errors.voornaam}</p>}
      </div>

      <div className="personeel-component__form-group">
        <label>Achternaam</label>
        <input
          type="text"
          name="achternaam"
          value={formData.achternaam}
          onChange={handleChange}
          placeholder="Achternaam"
          className="personeel-component__input"
        />
        {errors.achternaam && <p className="personeel-component__error">{errors.achternaam}</p>}
      </div>

      <div className="personeel-component__form-group">
        <label>Start Datum</label>
        <input
          type="date"
          name="startDate"
          value={formData.startDate}
          onChange={handleChange}
          className="personeel-component__input"
        />
        {errors.startDate && <p className="personeel-component__error">{errors.startDate}</p>}
      </div>

      <div className="personeel-component__form-group">
        <label>Eind Datum</label>
        <input
          type="date"
          name="endDate"
          value={formData.endDate}
          onChange={handleChange}
          className="personeel-component__input"
        />
        {errors.endDate && <p className="personeel-component__error">{errors.endDate}</p>}
      </div>

      <button type="submit" className="button-style-3">
        Personeel Toevoegen
      </button>
    </form>
  );
};

export default PersoneelForm;


--- Personeel/PersoneelItem.js ---
// src/Pages/Personeel/PersoneelItem.js
import React, { useState } from 'react';
import './css/personeel.css';
import { FaEllipsisV, FaPencilAlt, FaTrashAlt } from 'react-icons/fa';
import ConfirmationModal from '../../Components/Structural/Modal/Delete';
import EditPersoneelModal from './EditPersoneelModal';

const PersoneelItem = ({ personeel, api, triggerNotification, refreshPersoneel }) => {
  const [isTooltipOpen, setIsTooltipOpen] = useState(false);
  const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
  const [isEditModalVisible, setIsEditModalVisible] = useState(false);

  const handleEllipsisClick = () => {
    setIsTooltipOpen(!isTooltipOpen);
  };

  const handleDeleteClick = () => {
    setIsDeleteModalVisible(true);
    setIsTooltipOpen(false);
  };

  const handleEditClick = () => {
    setIsEditModalVisible(true);
    setIsTooltipOpen(false);
  };

  const handleConfirmDelete = async () => {
    setIsDeleteModalVisible(false);
    try {
      await api.delete(`${window.baseDomain}api/personeel/${personeel._id}`);
      triggerNotification('Personeel succesvol verwijderd', 'success');
      refreshPersoneel();
    } catch (error) {
      console.error('Error deleting personeel:', error);
      triggerNotification('Fout bij het verwijderen van het personeel', 'error');
    }
  };

  const handleCancelDelete = () => {
    setIsDeleteModalVisible(false);
  };

  return (
    <div className="personeel-component__personeel-item">
      <div className="personeel-component__personeel-content">
        <h4>{personeel.voornaam} {personeel.achternaam}</h4>
        <p>
          Werkend van {personeel.startDate} tot {personeel.endDate}
        </p>
      </div>
      <div className="personeel-component__personeel-actions">
        <FaEllipsisV onClick={handleEllipsisClick} className="personeel-component__ellipsis-icon" />
        {isTooltipOpen && (
          <div className="tooltip-container">
            <div className="tooltip-item" onClick={handleEditClick}>
              <FaPencilAlt className="tooltip-icon" />
              Bewerken
            </div>
            <div className="tooltip-separator"></div>
            <div className="tooltip-item delete-item" onClick={handleDeleteClick}>
              <FaTrashAlt className="tooltip-icon" />
              Verwijderen
            </div>
          </div>
        )}
      </div>
      {isDeleteModalVisible && (
        <ConfirmationModal
          isVisible={isDeleteModalVisible}
          title="Personeel Verwijderen"
          message="Weet u zeker dat u dit personeel wilt verwijderen?"
          onConfirm={handleConfirmDelete}
          onCancel={handleCancelDelete}
          confirmText="Verwijderen"
          cancelText="Annuleren"
          confirmButtonClass="discard-button red"
          cancelButtonClass="cancel-button"
        />
      )}
      {isEditModalVisible && (
        <EditPersoneelModal
          isVisible={isEditModalVisible}
          personeel={personeel}
          api={api}
          triggerNotification={triggerNotification}
          refreshPersoneel={refreshPersoneel}
          onClose={() => setIsEditModalVisible(false)}
        />
      )}
    </div>
  );
};

export default PersoneelItem;


--- Personeel/PersoneelList.js ---
// src/Pages/Personeel/PersoneelList.js
import React from 'react';
import './css/personeel.css';
import PersoneelItem from './PersoneelItem';

const PersoneelList = ({ personeels, api, triggerNotification, refreshPersoneel }) => {
  return (
    <div className="personeel-component__list">
      <h3>Personeel</h3>
      {personeels.length > 0 ? (
        <div className="personeel-component__personeel-list">
          {personeels.map((personeel) => (
            <PersoneelItem
              key={personeel._id}
              personeel={personeel}
              api={api}
              triggerNotification={triggerNotification}
              refreshPersoneel={refreshPersoneel}
            />
          ))}
        </div>
      ) : (
        <p>Geen personeel gevonden.</p>
      )}
    </div>
  );
};

export default PersoneelList;


--- Personeel/css/personeel.css ---
/* src/Pages/Personeel/css/personeel.css */
.personeel-component {
	display: flex;
	flex-direction: column;
	gap: 20px;
	margin-top: 30px;
	padding-bottom: 80px;
  }
  
  .personeel-component__title {
	font-size: 2rem;
	text-align: center;
  }
  
  .personeel-component__container {
	display: flex;
	flex-direction: row;
	gap: 20px;
	flex-wrap: wrap;
  }
  
  .personeel-component__form {
	flex: 1;
	display: flex;
	flex-direction: column;
	gap: 15px;
	max-width: 100%;
  }
  
  .personeel-component__form-group {
	display: flex;
	flex-direction: column;
  }
  
  .personeel-component__form-group label {
	margin-bottom: 5px;
	font-weight: 500;
  }
  
  .personeel-component__input {
	width: 100%;
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: 5px;
	font-size: 1rem;
  }
  
  .personeel-component__submit-button {
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	transition: background-color 0.3s ease;
  }
  
  .personeel-component__submit-button:hover {
	background-color: #0056b3;
  }
  
  .personeel-component__error {
	color: var(--color-red);
	font-size: 0.9rem;
  }
  
  .personeel-component__list {
	flex: 1;
  }
  
  .personeel-component__personeel-list {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  .personeel-component__personeel-item {
	border: 1px solid #ccc;
	border-radius: 8px;
	padding: 15px;
	position: relative;
	display: flex;
	justify-content: space-between;
	align-items: center;
  }
  
  .personeel-component__personeel-content h4 {
	margin: 0 0 5px 0;
  }
  
  .personeel-component__personeel-actions {
	position: relative;
  }
  
  .personeel-component__ellipsis-icon {
	cursor: pointer;
	font-size: 18px;
	color: #555;
  }
  
  .tooltip-container {
	position: absolute;
	bottom: 100%;
	right: 0;
	transform: translateY(-10px);
	background-color: white;
	border: 1px solid lightgray;
	border-radius: 5px;
	padding: 5px 0;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
	z-index: 1000;
  }
  
  .tooltip-item {
	display: flex;
	align-items: center;
	padding: 8px 15px;
	cursor: pointer;
  }
  
  .tooltip-item:hover {
	background-color: #f0f0f0;
  }
  
  .tooltip-icon {
	margin-right: 8px;
  }
  
  .tooltip-item.delete-item {
	color: red;
  }
  
  .tooltip-item.delete-item .tooltip-icon {
	color: red;
  }
  
  .tooltip-separator {
	height: 1px;
	background-color: lightgray;
	margin: 5px 0;
  }
  
  /* Modal Styles */
  .personeel-component__modal-title {
	text-align: center;
	margin-bottom: 20px;
  }
  
  .personeel-component__edit-modal {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  /* Responsive Design */
  @media (max-width: 900px) {
	.personeel-component__container {
	  flex-direction: column;
	  padding: 10px;
	}
  
	.personeel-component__personeel-item {
	  flex-direction: column;
	  align-items: flex-start;
	}
  
	.personeel-component__personeel-actions {
	  position: absolute;
	  top: 15px;
	  right: 15px;
	}
  }
  
  /* Existing Personeel Form Styles */
  
  .personeel-component__form {
	display: flex;
	flex-direction: column;
	gap: 20px;
  }
  
  .personeel-component__form-group {
	display: flex;
	flex-direction: column;
  }
  
  .personeel-component__input-container {
	display: flex;
	flex-wrap: wrap;
	gap: 20px;
  }
  
  .personeel-component__date-time-group {
	display: flex;
	gap: 20px;
	width: 100%;
  }
  
  .personeel-component__date-picker-wrapper,
  .personeel-component__time-picker-wrapper {
	flex: 1;
	display: flex;
	flex-direction: column;
  }
  
  .personeel-component__submit-button {
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	transition: background-color 0.3s ease;
	align-self: flex-start;
  }
  
  .personeel-component__submit-button:hover {
	background-color: #0056b3;
  }
  
  .personeel-component__error {
	color: red;
	font-size: 0.9rem;
  }
  
  /* Tooltip styles for Actions (Bewerken & Verwijderen) */
  .tooltip-container {
	position: absolute;
	bottom: 100%;
	right: 0;
	transform: translateY(-10px);
	background-color: white;
	border: 1px solid lightgray;
	border-radius: 5px;
	padding: 5px 0;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
	z-index: 1000;
  }
  
  .tooltip-item {
	display: flex;
	align-items: center;
	padding: 8px 15px;
	cursor: pointer;
  }
  
  .tooltip-item:hover {
	background-color: #f0f0f0;
  }
  
  .tooltip-icon {
	margin-right: 8px;
  }
  
  .tooltip-item.delete-item {
	color: red;
  }
  
  .tooltip-item.delete-item .tooltip-icon {
	color: red;
  }
  
  .tooltip-separator {
	height: 1px;
	background-color: lightgray;
	margin: 5px 0;
  }
  
  /* Header with Icon */
  .personeel-component__header {
	display: flex;
	align-items: center;
	gap: 10px;
	margin-bottom: 20px;
  }
  
  .personeel-icon {
	font-size: 24px;
	color: var(--color-blue);
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
	.personeel-component__date-time-group {
	  flex-direction: column;
	}
  }
  

--- Personeel/index.js ---
// src/Pages/Personeel/index.js
import React, { useState, useEffect } from 'react';
import { withHeader } from '../../Components/Structural/Header/index.js';
import './css/personeel.css';
import useApi from '../../Hooks/useApi';
import useNotification from '../../Components/Notification';
import PersoneelForm from './PersoneelForm';
import PersoneelList from './PersoneelList.js';

const Personeel = () => {
  const api = useApi();
  const { triggerNotification, NotificationComponent } = useNotification();

  // State for the list of personeel
  const [personeels, setPersoneels] = useState([]);

  // Fetch the personeel at component mount
  useEffect(() => {
    const fetchPersoneel = async () => {
      try {
        const data = await api.get(window.baseDomain + 'api/personeel', { noCache: true });
        if (Array.isArray(data)) {
          setPersoneels(data);
        } else {
          setPersoneels([]);
        }
      } catch (error) {
        console.error('Error fetching personeel:', error);
        setPersoneels([]);
        triggerNotification('Fout bij het ophalen van personeel.', 'error');
      }
    };
    fetchPersoneel();
  }, [api, triggerNotification]);

  // Handler to refresh personeel
  const refreshPersoneel = async () => {
    try {
      const data = await api.get(window.baseDomain + 'api/personeel', { noCache: true });
      if (Array.isArray(data)) {
        setPersoneels(data);
      } else {
        setPersoneels([]);
      }
    } catch (error) {
      console.error('Error fetching personeel:', error);
      setPersoneels([]);
      triggerNotification('Fout bij het ophalen van personeel.', 'error');
    }
  };

  return (
    <div className="personeel-component">
      <NotificationComponent />
      <div className="personeel-component__container">
        <PersoneelForm
          api={api}
          triggerNotification={triggerNotification}
          refreshPersoneel={refreshPersoneel}
        />
        <PersoneelList
          personeels={personeels}
          api={api}
          triggerNotification={triggerNotification}
          refreshPersoneel={refreshPersoneel}
        />
      </div>
    </div>
  );
};

export default withHeader(Personeel);


--- Profile/AccountManage/FormField.js ---
// src/components/Profile/FormField.jsx

import React from 'react';

const FormField = ({ label, name, type = 'text', icon: Icon, value, onChange, error, placeholder, halfWidth }) => (
  <div className={`form-group ${halfWidth ? 'half-width' : ''}`}>
    <div className="input-container">
      {Icon && <Icon className="input-icon" />}
      <input
        type={type}
        name={name}
        placeholder={placeholder}
        value={value}
        onChange={onChange}
        aria-label={label}
      />
    </div>
    {error && <p className="form-error">{error}</p>}
  </div>
);

export default FormField;


--- Profile/AccountManage/Utils/validationUtils.js ---
// src/utils/validationUtils.js

export const validateAccountData = (formData) => {
	const errors = {};
  
	if (!formData.first_name.trim()) {
	  errors.first_name = 'Voornaam is verplicht.';
	}
  
	if (!formData.last_name.trim()) {
	  errors.last_name = 'Achternaam is verplicht.';
	}
  
	if (!formData.phone_number.trim()) {
	  errors.phone_number = 'Telefoonnummer is verplicht.';
	} else if (!/^\+?\d{10,15}$/.test(formData.phone_number)) {
	  errors.phone_number = 'Voer een geldig telefoonnummer in.';
	}
  
	if (!formData.street.trim()) {
	  errors.street = 'Straat is verplicht.';
	}
  
	if (!formData.house_number.trim()) {
	  errors.house_number = 'Huisnummer is verplicht.';
	}
  
	if (!formData.city.trim()) {
	  errors.city = 'Stad is verplicht.';
	}
  
	if (!formData.postal_code.trim()) {
	  errors.postal_code = 'Postcode is verplicht.';
	} 
	if (!/^[1-9]\d{3}$/.test(formData.postal_code)) {
	  errors.postal_code = 'Voer een geldige Belgische postcode in.';
	}
  
	if (!formData.restaurant_name.trim()) {
	  errors.restaurant_name = 'Naam restaurant is verplicht.';
	}
  
	return errors;
  };
  

--- Profile/AccountManage/css/accountManage.css ---
/* src/components/Profile/css/accountManage.css */

.profile-page .account-manage-container {
	background-color: #fff;
	border-radius: 10px;
	padding: 30px;
	width: 100%;
  }

  .profile-page .account-manage-title {
	margin-top: 30px;
	margin-bottom: 30px;
  }
  

  .profile-page .account-manage-form {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  .profile-page .form-group {
	display: flex;
	flex-direction: column;
  }
  
  .profile-page .input-container {
	position: relative;
  }
  
  .profile-page .input-icon {
	position: absolute;
	top: 50%;
	left: 10px;
	transform: translateY(-50%);
	color: #6c757d;
	pointer-events: none;
  }
  
  .profile-page .input-container input {
	width: 100%;
	padding: 10px 10px 10px 35px;
	border: 1px solid #ccc;
	border-radius: 5px;
	font-size: 1rem;
	transition: border-color 0.3s ease;
  }
  
  .profile-page .input-container input:focus {
	border-color: #0056b3;
	outline: none;
  }
  
  .profile-page .form-row {
	display: flex;
	justify-content: space-between;
	gap: 10px;
  }
  
  .profile-page .half-width {
	width: 48%;
  }
  
  .profile-page .form-error {
	color: #dc3545;
	font-size: 0.9rem;
	margin-top: 5px;
	display: flex;
	align-items: center;
	gap: 5px;
  }
  
  .profile-page.form-success {
	color: #28a745;
	font-size: 0.9rem;
	margin-top: 5px;
	display: flex;
	align-items: center;
	gap: 5px;
  }
  
  .profile-page .account-manage__button {
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	display: flex;
	align-items: center;
	justify-content: center;
	gap: 10px;
	transition: background-color 0.3s ease;
  }
  
  .profile-page .account-manage__button:hover {
	background-color: #0056b3;
  }
  

  


--- Profile/AccountManage/css/mobile.css ---
@media (max-width: 900px) {
	.profile-page .form-row {
	  flex-direction: column;
	}
  
	.profile-page .half-width {
	  width: 100%;
	}
  
	.profile-page .account-manage-form {
	  gap: 10px;
	}
  
	.profile-page .account-manage__button {
	  font-size: 1rem;
	  padding: 10px;
	}
  }
  

--- Profile/AccountManage/index.js ---
// src/components/Profile/AccountManage.jsx

import React, { useState, useEffect } from 'react';
import { FaUser, FaPhone, FaHome, FaCity, FaMapPin, FaUtensils, FaEnvelope } from 'react-icons/fa'; // Added FaEnvelope
import useNotification from '../../../Components/Notification';
import { validateAccountData } from './Utils/validationUtils';
import FormField from './FormField';
import './css/accountManage.css';
import './css/mobile.css';

const AccountManage = ({ accountData, setAccountData, api }) => {
  const { triggerNotification, NotificationComponent } = useNotification();

  const [formData, setFormData] = useState({
    first_name: accountData.first_name || '',
    last_name: accountData.last_name || '',
    email: accountData.email || '', // Added email
    phone_number: accountData.phone_number || '',
    street: accountData.street || '',
    house_number: accountData.house_number || '',
    city: accountData.city || '',
    postal_code: accountData.postal_code || '',
    bio: accountData.bio || '',
    imageId: accountData.imageId || '',
    restaurant_name: accountData.restaurant_name || '',
  });

  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    setFormData({
      first_name: accountData.first_name || '',
      last_name: accountData.last_name || '',
      email: accountData.email || '', // Added email
      phone_number: accountData.phone_number || '',
      street: accountData.street || '',
      house_number: accountData.house_number || '',
      city: accountData.city || '',
      postal_code: accountData.postal_code || '',
      bio: accountData.bio || '',
      imageId: accountData.imageId || '',
      restaurant_name: accountData.restaurant_name || '',
    });
  }, [accountData]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
    setErrors({ ...errors, [name]: '' });
  };

  const handleSave = async (e) => {
    e.preventDefault();
    const validationErrors = validateAccountData(formData);

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
    } else {
      try {
        setLoading(true);
        let responseData;
        if (accountData._id) {
          responseData = await api.put(`${window.baseDomain}api/account`, formData);
          triggerNotification('Account bijgewerkt', 'success');
        } else {
          responseData = await api.post(`${window.baseDomain}api/account`, formData);
          triggerNotification('Gegevens toegevoegd', 'success');
        }
        setLoading(false);
      } catch (error) {
        setLoading(false);
        triggerNotification('Fout bij het opslaan', 'error');
      }
    }
  };

  return (
    <div className="profile-page">
      <h2 className="account-manage-title">Account beheren</h2>
      <div className="account-manage-container">
        <NotificationComponent />
        <form className="account-manage-form" onSubmit={handleSave} noValidate>
          <FormField
            label="Voornaam"
            name="first_name"
            placeholder="Voornaam"
            value={formData.first_name}
            onChange={handleChange}
            error={errors.first_name}
            icon={FaUser}
          />
          <FormField
            label="Achternaam"
            name="last_name"
            placeholder="Achternaam"
            value={formData.last_name}
            onChange={handleChange}
            error={errors.last_name}
            icon={FaUser}
          />
          <FormField
            label="Email" // New Email Field
            name="email"
            type="email"
            placeholder="Email"
            value={formData.email}
            onChange={handleChange}
            error={errors.email}
            icon={FaEnvelope}
          />
          <FormField
            label="Telefoonnummer"
            name="phone_number"
            type="tel"
            placeholder="Telefoonnummer"
            value={formData.phone_number}
            onChange={handleChange}
            error={errors.phone_number}
            icon={FaPhone}
          />
          <div className="form-row">
            <FormField
              label="Straat"
              name="street"
              placeholder="Straat"
              value={formData.street}
              onChange={handleChange}
              error={errors.street}
              icon={FaHome}
              halfWidth={true}
            />
            <FormField
              label="Huisnummer"
              name="house_number"
              placeholder="Huisnummer"
              value={formData.house_number}
              onChange={handleChange}
              error={errors.house_number}
              icon={FaHome}
              halfWidth={true}
            />
          </div>
          <div className="form-row">
            <FormField
              label="Stad"
              name="city"
              placeholder="Stad"
              value={formData.city}
              onChange={handleChange}
              error={errors.city}
              icon={FaCity}
              halfWidth={true}
            />
            <FormField
              label="Postcode"
              name="postal_code"
              placeholder="Postcode"
              value={formData.postal_code}
              onChange={handleChange}
              error={errors.postal_code}
              icon={FaMapPin}
              halfWidth={true}
            />
          </div>
          <FormField
            label="Naam restaurant"
            name="restaurant_name"
            placeholder="Naam restaurant"
            value={formData.restaurant_name}
            onChange={handleChange}
            error={errors.restaurant_name}
            icon={FaUtensils}
          />
          <button type="submit" className="button-style-3" disabled={loading}>
            {loading ? 'Opslaan...' : 'Opslaan'}
          </button>
        </form>
      </div>
    </div>
  );
};

export default AccountManage;


--- Profile/Hooks/avatarMapping.js ---
// src/components/Profile/avatarMapping.js
import blue1 from '../../../Assets/avatars/blue1.webp';
import blue2 from '../../../Assets/avatars/blue2.webp';
import blue3 from '../../../Assets/avatars/blue3.webp';
import red1 from '../../../Assets/avatars/red1.webp';
import red2 from '../../../Assets/avatars/red2.webp';
import red3 from '../../../Assets/avatars/red3.webp';
import green1 from '../../../Assets/avatars/green1.webp';
import green2 from '../../../Assets/avatars/green2.webp';
import green3 from '../../../Assets/avatars/green3.webp';

export const avatarMapping = {
  blue1,
  blue2,
  blue3,
  red1,
  red2,
  red3,
  green1,
  green2,
  green3,
};

export const defaultAvatar = blue1;


--- Profile/Hooks/useProfile.js ---
// src/components/Profile/useProfile.js
import { useState, useEffect } from 'react';
import { avatarMapping, defaultAvatar } from './avatarMapping';

const useProfile = () => {
  const [profileImage, setProfileImage] = useState(defaultAvatar);
  const [bio, setBio] = useState('We zijn heel trots op ons restaurant!');
  const [name, setName] = useState('John Doe');
  const [interests, setInterests] = useState(['Admin Account', '3 Maanden Actief']);

  useEffect(() => {
    const selectedAvatar = localStorage.getItem('selectedAvatar');
    if (selectedAvatar && avatarMapping[selectedAvatar]) {
      setProfileImage(avatarMapping[selectedAvatar]);
    }

    const storedBio = localStorage.getItem('profileBio');
    if (storedBio) setBio(storedBio);

    const storedName = localStorage.getItem('profileName');
    if (storedName) setName(storedName);

    const storedInterests = localStorage.getItem('profileInterests');
    if (storedInterests) {
      setInterests(JSON.parse(storedInterests));
    }
  }, []);

  const handleAvatarSelect = (avatarKey) => {
    setProfileImage(avatarMapping[avatarKey]);
    localStorage.setItem('selectedAvatar', avatarKey);
  };

  return { profileImage, bio, name, interests, handleAvatarSelect };
};

export default useProfile;


--- Profile/Language/css/language.css ---
.language-page {
	display: flex;
	justify-content: center;
	align-items: center;
	flex-direction: column;

	
}


.language-page .language-selector-container {
	margin-top: 30px;
	position: relative;
	position: relative;
	width: 100%;
	max-width: 600px;
	text-align: center;
  }
  
  .language-page .language-selector {
	display: flex;
	align-items: center;
	background-color: #fff;
	border-radius: 10px;
	padding: 15px 25px;
	cursor: pointer;
	transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .language-page .language-selector__flag {
	width: 30px;
	height: 30px;
	border-radius: 50%;
	margin-right: 13px;
  }
  
  .language-page .language-selector__name {
	font-size: 16px;
	margin-right: 5px;
	color: #333;
  }
  
  .language-page .language-selector__icon {
	color: #555;
	font-size: 18px;
  }
  
  .language-page .language-selector__modal-overlay {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	backdrop-filter: blur(5px);
	background-color: var(--color-modal-bg);
	display: flex;
	justify-content: center;
	align-items: center;
	animation: modalFadeIn 0.5s ease;
	z-index: var(--z-index-modal);
  }
  
  .language-page .language-selector__modal {
	background-color: #fff;
	border-radius: 10px;
	padding: 20px;
	width: 90%;
	max-width: 400px;
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }
  
  .language-page .language-selector__modal h3 {
	margin-top: 0;
	margin-bottom: 20px;
	text-align: center;
	color: #333;
  }
  
  .language-page .language-selector__options {
	display: flex;
	flex-direction: column;
	gap: 10px;
  }
  
  .language-page .language-selector__option {
	display: flex;
	align-items: center;
	padding: 10px;
	cursor: pointer;
	border-radius: 5px;
	transition: background-color 0.2s ease;
  }
  
  .language-page .language-selector__option:hover {
	background-color: #f0f0f0;
  }
  
  .language-page .language-selector__option.selected {
	background-color: #e6f7ff;
  }
  
  .language-page .language-selector__option-flag {
	width: 30px;
	height: 30px;
	border-radius: 50%;
	margin-right: 10px;
  }
  
  .language-page .language-selector__option-name {
	font-size: 16px;
	color: #333;
  }

  .language-page .language-selector-container h2 {
	margin-top: 0;
	margin-bottom: 30px;
  }

--- Profile/Language/index.js ---
// src/components/Profile/LanguageSelector.jsx

import React, { useState, useRef, useEffect } from 'react';
import useNotification from '../../../Components/Notification/index';
import './css/language.css';
import englishFlag from '../../../Assets/flags/EN.webp';
import dutchFlag from '../../../Assets/flags/BE.webp';
import spanishFlag from '../../../Assets/flags/ES.webp';
import frenchFlag from '../../../Assets/flags/FR.webp';
import germanFlag from '../../../Assets/flags/DE.webp';
import { useTranslation } from 'react-i18next';
import { withHeader } from '../../../Components/Structural/Header';

const languageOptions = [
  { code: 'en', name: 'English', flag: englishFlag },
  { code: 'nl', name: 'Nederlands', flag: dutchFlag },
  { code: 'es', name: 'Español', flag: spanishFlag },
  { code: 'fr', name: 'Français', flag: frenchFlag },
  { code: 'de', name: 'Deutsch', flag: germanFlag },
];

const Language = () => {
  const { i18n } = useTranslation();
  const { triggerNotification, NotificationComponent } = useNotification();
  const [selectedLanguage, setSelectedLanguage] = useState(() => {
    const savedLang = localStorage.getItem('selectedLanguage');
    return languageOptions.find((lang) => lang.code === savedLang) || languageOptions[0];
  });
  const [isModalOpen, setIsModalOpen] = useState(false);
  const modalRef = useRef(null);

  const handleLanguageSelect = (lang) => {
    setSelectedLanguage(lang);
    i18n.changeLanguage(lang.code);
    localStorage.setItem('selectedLanguage', lang.code);
    triggerNotification(`Gekozen taal: ${lang.name}`, 'success');
    setIsModalOpen(false);
  };

  const handleClickOutside = (e) => {
    if (modalRef.current && !modalRef.current.contains(e.target)) {
      setIsModalOpen(false);
    }
  };

  useEffect(() => {
    if (isModalOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    } else {
      document.removeEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isModalOpen]);

  return (
    <div className='language-page'>
      <div className="language-selector-container">
        <NotificationComponent />
        <h2>Taalvoorkeuren</h2>
        <div
          className="language-selector"
          onClick={() => setIsModalOpen(!isModalOpen)}
          aria-label="Select Language"
        >
          <img src={selectedLanguage.flag} alt={`${selectedLanguage.name} Flag`} className="language-selector__flag" />
          <span className="language-selector__name">{selectedLanguage.name}</span>
        </div>

        {isModalOpen && (
          <div className="language-selector__modal-overlay">
            <div className="language-selector__modal" ref={modalRef}>
              <h2>Kies een Taal</h2>
              <div className="language-selector__options">
                {languageOptions.map((lang) => (
                  <div
                    key={lang.code}
                    className={`language-selector__option ${lang.code === selectedLanguage.code ? 'selected' : ''}`}
                    onClick={() => handleLanguageSelect(lang)}
                  >
                    <img src={lang.flag} alt={`${lang.name} Flag`} className="language-selector__option-flag" />
                    <span className="language-selector__option-name">{lang.name}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default withHeader(Language);


--- Profile/ProfileBio.js ---
// src/components/Profile/ProfileBio.jsx

import React, { useState, useEffect, useRef } from 'react';
import { FaPencilAlt } from 'react-icons/fa';
import { v4 as uuidv4 } from 'uuid';
import useNotification from '../../Components/Notification/index';
import './css/style.css';

const ProfileBio = ({ name, bio, interests, api, updateAccountData, restaurant_name }) => { // Renamed prop
  const [editableBio, setEditableBio] = useState(bio);
  const [isEditing, setIsEditing] = useState(false);
  const bioRef = useRef(null);
  const editIconId = useRef(uuidv4());
  const { triggerNotification, NotificationComponent } = useNotification();

  useEffect(() => {
    setEditableBio(bio);
  }, [bio]);

  const handleInputChange = (e) => {
    if (e.target.value.length <= 1000) {
      setEditableBio(e.target.value);
    }
  };

  const handleBioBlur = async () => {
    setIsEditing(false);
    if (editableBio !== bio) {
      try {
        const updatedData = await api.put(`${window.baseDomain}api/account`, { bio: editableBio });
        updateAccountData(updatedData);
        triggerNotification('Bio succesvol bewerkt', 'success');
      } catch (error) {
        triggerNotification('Fout bij het bijwerken van bio', 'error');
        setEditableBio(bio);
      }
    }
  };

  const handleEditClick = () => {
    setIsEditing(true);
    if (bioRef.current) {
      bioRef.current.focus();
    }
  };

  return (
    <div
      className="profile-page__bio-wrapper"
      onMouseEnter={() => {
        if (!isEditing) {
          const editIcon = document.getElementById(editIconId.current);
          if (editIcon) {
            editIcon.style.visibility = 'visible';
          }
        }
      }}
      onMouseLeave={() => {
        const editIcon = document.getElementById(editIconId.current);
        if (editIcon) {
          editIcon.style.visibility = 'hidden';
        }
      }}
    >
      <NotificationComponent />
      <div className="profile-page__bio-container">
        <h2 className="profile-page__name">{restaurant_name || 'Uw Restaurant'}</h2> {/* Updated prop name */}

        <div
          className="profile-page__bio-clickable"
          onClick={handleEditClick}
          aria-label="Edit bio section"
        >
          
        </div>
      </div>
    </div>
  );
};

export default ProfileBio;


--- Profile/ProfileHeader.js ---
import React from 'react';

const ProfileHeader = ({
  profileImage,
  name,
  dateOfBirth,
  bio,
  editing,
  setEditing,
  handleSaveProfile,
  handleAvatarClick,
  setName,
  setDateOfBirth,
  setBio
}) => {
  return (
    <div className="profile-page__header">
      <div className="profile-page__header-content">
        <div className="profile-page__profile-pic-container" onClick={handleAvatarClick}>
          <img src={profileImage} alt="Profile" className="profile-page__profile-pic" />
        </div>
        {editing ? (
          <div className="profile-page__edit-form">
            <input
              type="text"
              value={name}
              onChange={e => setName(e.target.value)}
              placeholder="Name"
              className="profile-page__input"
            />
            <input
              type="date"
              value={dateOfBirth}
              onChange={e => setDateOfBirth(e.target.value)}
              placeholder="Date of Birth"
              className="profile-page__input"
            />
            <textarea
              value={bio}
              onChange={e => setBio(e.target.value)}
              placeholder="Bio"
              className="profile-page__textarea"
            />
            <button onClick={handleSaveProfile} className="profile-page__button">Save</button>
          </div>
        ) : (
          <div className="profile-page__bio">
            <h2>{name}</h2>
            <p>{bio}</p>
            <button onClick={() => setEditing(true)} className="profile-page__button">Edit Profile</button>
          </div>
        )}
      </div>
    </div>
  );
};

export default ProfileHeader;


--- Profile/ProfileImage.js ---
// src/components/Profile/ProfileImage.jsx

import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { setAvatar } from '../../Redux/actions/avatarActions';
import useNotification from '../../Components/Notification/index';
import './css/style.css';

const ProfileImage = ({
  profileImage,
  avatarMapping,
  imageId,
  api,
  updateAccountData,
}) => {
  const dispatch = useDispatch();
  const [showAvatarModal, setShowAvatarModal] = useState(false);
  const { triggerNotification, NotificationComponent } = useNotification();

  const handleAvatarClick = () => {
    setShowAvatarModal(true);
  };

  const handleAvatarSelectInternal = async (avatarKey) => {
    setShowAvatarModal(false);
    try {
      const updatedData = await api.put(window.baseDomain + 'api/account', { imageId: avatarKey });
      updateAccountData(updatedData);
      dispatch(setAvatar(avatarKey));
      triggerNotification('Profiel aangepast', 'success');
    } catch (error) {
      triggerNotification('Fout bij het bijwerken van profiel', 'error');
    }
  };

  // Determine the current profile image based on imageId
  const currentProfileImage = imageId && avatarMapping[imageId] ? avatarMapping[imageId] : profileImage;

  return (
    <div>
      <NotificationComponent />
      <div
        className="profile-page__image-container"
        onClick={handleAvatarClick}
        role="button"
        tabIndex={0}
        onKeyPress={(e) => {
          if (e.key === 'Enter') handleAvatarClick();
        }}
        aria-label="Change profile image"
      >
        <img src={currentProfileImage} alt="Profile" className="profile-page__image" />
      </div>

      {showAvatarModal && (
        <div className="profile-page__modal" role="dialog" aria-modal="true">
          <div className="profile-page__modal-content">
            <h2>Kies een Avatar</h2>
            <div className="profile-page__avatar-grid">
              {Object.keys(avatarMapping).map((key, index) => (
                <img
                  key={key}
                  src={avatarMapping[key]}
                  alt={key}
                  className="profile-page__avatar-option"
                  style={{ animationDelay: `${index * 0.1}s` }}
                  onClick={() => handleAvatarSelectInternal(key)}
                  role="button"
                  tabIndex={0}
                  onKeyPress={(e) => {
                    if (e.key === 'Enter') handleAvatarSelectInternal(key);
                  }}
                  aria-label={`Selecteer avatar ${key}`}
                />
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProfileImage;


--- Profile/css/animations.css ---
@keyframes modalFadeIn {
	from {
	  opacity: 0;
	}
	to {
	  opacity: 1;
	}
}

@keyframes modalContentBounceIn {
	0% {
	  transform: scale(0.7);
	  opacity: 0;
	}
	60% {
	  transform: scale(1.05);
	  opacity: 1;
	}
	100% {
	  transform: scale(1);
	}
}

@keyframes avatarFadeIn {
	to {
		opacity: 1;
		transform: scale(1);
	}
}

@keyframes fadeIn {
	from {
	  opacity: 0;
	}
	to {
	  opacity: 1;
	}
  }
  
  @keyframes slideIn {
	from {
	  transform: translateY(-20px);
	}
	to {
	  transform: translateY(0);
	}
  }
  

--- Profile/css/language.css ---

.profile-page .language-selector-container {
	margin-top: 30px;
	position: relative;
  }
  
  .profile-page .language-selector {
	display: flex;
	align-items: center;
	background-color: #fff;
	border-radius: 10px;
	padding: 15px 25px;
	cursor: pointer;
	transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .profile-page .language-selector__flag {
	width: 30px;
	height: 30px;
	border-radius: 50%;
	margin-right: 13px;
  }
  
  .profile-page .language-selector__name {
	font-size: 16px;
	margin-right: 5px;
	color: #333;
  }
  
  .profile-page .language-selector__icon {
	color: #555;
	font-size: 18px;
  }
  
  .profile-page .language-selector__modal-overlay {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	backdrop-filter: blur(5px);
	background-color: var(--color-modal-bg);
	display: flex;
	justify-content: center;
	align-items: center;
	animation: modalFadeIn 0.5s ease;
	z-index: 100000;
  }
  
  .profile-page .language-selector__modal {
	background-color: #fff;
	border-radius: 10px;
	padding: 20px;
	width: 90%;
	max-width: 400px;
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }
  
  .profile-page .language-selector__modal h3 {
	margin-top: 0;
	margin-bottom: 20px;
	text-align: center;
	color: #333;
  }
  
  .profile-page .language-selector__options {
	display: flex;
	flex-direction: column;
	gap: 10px;
  }
  
  .profile-page .language-selector__option {
	display: flex;
	align-items: center;
	padding: 10px;
	cursor: pointer;
	border-radius: 5px;
	transition: background-color 0.2s ease;
  }
  
  .profile-page .language-selector__option:hover {
	background-color: #f0f0f0;
  }
  
  .profile-page .language-selector__option.selected {
	background-color: #e6f7ff;
  }
  
  .profile-page .language-selector__option-flag {
	width: 30px;
	height: 30px;
	border-radius: 50%;
	margin-right: 10px;
  }
  
  .profile-page .language-selector__option-name {
	font-size: 16px;
	color: #333;
  }

  .profile-page .language-selector-container h2 {
	margin-top: 0;
	margin-bottom: 30px;
  }

--- Profile/css/mobile.css ---
@media (max-width: 900px) {
	.profile-page {
		position: absolute;
		left: 50%;
		transform: translateX(-50%);
		width: 100%;
	}

	.profile-page__modal-content {
		width: 90%;
	}
}


--- Profile/css/style.css ---
.profile-page {
	display: flex;
	justify-content: center;
	align-items: center;
	flex-direction: column;
}
  
.profile-page__container {
	position: relative;
	width: 100%;
	max-width: 600px;
	text-align: center;
}
  
.profile-page__image-container {
	margin-bottom: -75px;
	z-index: 1;
	cursor: pointer;
}
  
.profile-page__image {
	width: 150px;
	height: 150px;
	object-fit: cover;
}
  
.profile-page__bio-container {
	background-color: #fff;
	border-radius: 10px;
	padding: 80px 20px 20px 20px;
	margin-top: -50px; 
}
  
.profile-page__name {
	margin-top: 0;
	margin-bottom: 20px;
	font-size: 24px;
	color: black;
}
  
.profile-page__bio {
	margin: 0 0 20px 0;
	font-size: 16px;
	color: black;
}
  
.profile-page__tags {
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
}
  
.profile-page__tag {
	background-color: #e0f7fa;
	color: var(--color-blue);
	padding: 8px 12px;
	border-radius: 15px;
	margin: 5px;
	font-size: 14px;
}
  
.profile-page__modal {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	backdrop-filter: blur(5px);
	background-color: var(--color-modal-bg);
	display: flex;
	justify-content: center;
	align-items: center;
	animation: modalFadeIn 0.5s ease;
	z-index: 100000;
}
  
.profile-page__modal-content {
	background-color: #fff;
	padding: 20px;
	border-radius: var(--border-radius);
	position: relative;
	width: 80%;
	max-width: 500px;
	animation: modalContentBounceIn 0.6s ease;
}
  
.profile-page__modal-close {
	position: absolute;
	top: 10px;
	right: 15px;
	font-size: 24px;
	cursor: pointer;
}
  
.profile-page__avatar-grid {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
	gap: 10px;
	margin-top: 20px;
}
  
.profile-page__avatar-option {
	width: 100%;
	cursor: pointer;
	opacity: 0;
	transform: scale(0.8);
	transition: transform 0.2s ease;
	animation: avatarFadeIn 0.5s forwards;
}

.profile-page__bio {
	font-size: 17px;
	min-height: 150px;
	width: 100%;
	padding: 12px;
	background-color: var(--color-white);
	border-radius: 20px;
	text-align: left;
	padding: 30px;
	padding-top: 15px;
	margin: 0;
}

.profile-page__edit-arrow {
	position: absolute;
	bottom: 10px;
	right: 10px;
	cursor: pointer;
	color: var(--color-blue);
	font-size: 1.5rem;
  }

.profile-page__bio-container.editing .profile-page__bio {
	background-color: var(--color-nav-selection);
}
  
  .profile-page__bio_p {
	height: fit-content;
  }

  .profile-page__container {
	margin-bottom: 100px;
  }



--- Profile/index.js ---
// src/components/Profile/Profile.jsx

import React, { useState, useEffect } from 'react';
import { withHeader } from '../../Components/Structural/Header';
import ProfileImage from './ProfileImage';
import ProfileBio from './ProfileBio';
import AccountManage from './AccountManage';
import useApi from '../../Hooks/useApi';
import useNotification from '../../Components/Notification';
import { avatarMapping, defaultAvatar } from './Hooks/avatarMapping';
import './css/style.css';

const Profile = () => {
  const api = useApi();
  const { triggerNotification, NotificationComponent } = useNotification();

  const [accountData, setAccountData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchAccountData = async () => {
      try {
        console.log("Account Settings GET");
        const data = await api.get(`${window.baseDomain}api/account`, { noCache: true });
        setAccountData(data);
        setLoading(false);
      } catch (error) {
        setLoading(false);
        triggerNotification('Fout bij het ophalen van accountgegevens', 'error');
      }
    };

    fetchAccountData();
  }, []);

  const updateAccountData = (updatedData) => {
    setAccountData(updatedData);
  };

  if (loading) {
    return (
      <div className="profile-page">
        <div className="profile-page__container">
          <NotificationComponent />
          <p>Loading...</p>
        </div>
      </div>
    );
  }

  if (!accountData) {
    return (
      <div className="profile-page">
        <div className="profile-page__container">
          <NotificationComponent />
          <p>Geen accountgegevens beschikbaar.</p>
        </div>
      </div>
    );
  }

  // Derive full name
  const fullName = `${accountData.first_name} ${accountData.last_name}`.trim();

  return (
    <div className="profile-page">
      <div className="profile-page__container">
        <NotificationComponent />
        
        {/*
        <ProfileImage
          profileImage={accountData.imageId ? avatarMapping[accountData.imageId] : defaultAvatar}
          avatarMapping={accountData.avatarMapping}
          imageId={accountData.imageId}
          api={api}
          updateAccountData={updateAccountData}
        />

        <ProfileBio
          name={fullName || 'Gebruiker'}
          bio={accountData.bio}
          interests={accountData.interests || []}
          api={api}
          updateAccountData={updateAccountData}
          restaurant_name={accountData.restaurant_name}
        />*/}

        <AccountManage
          accountData={accountData}
          setAccountData={setAccountData}
          api={api}
        />
      </div>
    </div>
  );
};

export default withHeader(Profile);


--- Settings/EmailSettings/BannerUploadComponent.js ---
// src/Components/BannerUploadComponent.jsx

import React, { useState, useEffect, useRef } from 'react';
import useApi from '../../../Hooks/useApi.js';
import { FaImage } from 'react-icons/fa';
import useNotification from '../../../Components/Notification/index.js';

const BannerUploadComponent = () => {
  const [bannerUrl, setBannerUrl] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const restaurantId = localStorage.getItem('username');
  const bannerImageUrl = `https://mateza-cloud-storage.ams3.digitaloceanspaces.com/email/banner/${restaurantId}`;
  const [isDragging, setIsDragging] = useState(false);
  const api = useApi();
  const fileInputRef = useRef(null);
  const { triggerNotification, NotificationComponent } = useNotification();

  useEffect(() => {
    // Attempt to load the image
    const img = new Image();
    img.src = bannerImageUrl;
    img.onload = () => {
      setBannerUrl(bannerImageUrl);
      setIsLoading(false);
    };
    img.onerror = () => {
      setBannerUrl('');
      setIsLoading(false);
    };
  }, [bannerImageUrl]);

  const handleFileUpload = async (file) => {
    // Validate file type
    const allowedTypes = ['image/png', 'image/jpeg', 'image/webp'];
    if (!allowedTypes.includes(file.type)) {
      triggerNotification(
        'Ongeldig bestandstype',
        'error'
      );
      return;
    }

    // Validate file size (max 2 MB)
    const maxSize = 2 * 1024 * 1024; // 2 MB
    if (file.size > maxSize) {
      triggerNotification(
        'Bestand is te groot',
        'error'
      );
      return;
    }

    const formData = new FormData();
    formData.append('image', file);

    try {
      const response = await api.post(
        `${window.baseDomain}api/upload-image`,
        formData
      );

      // After successful upload, update the bannerUrl to trigger re-render
      setBannerUrl(bannerImageUrl + '?' + new Date().getTime()); // Add timestamp to prevent caching
      triggerNotification('Afbeelding geüpload', 'success');
    } catch (error) {
      console.error('Error uploading image:', error);

      if (error.response && error.response.data && error.response.data.error) {
        triggerNotification(
          `Fout bij uploaden: ${error.response.data.error}`,
          'error'
        );
      } else {
        triggerNotification(
          'Fout bij uploaden',
          'error'
        );
      }
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragging(false);

    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      handleFileUpload(e.dataTransfer.files[0]);
      e.dataTransfer.clearData();
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleClick = () => {
    fileInputRef.current.click();
  };

  const handleFileSelect = (e) => {
    if (e.target.files && e.target.files.length > 0) {
      handleFileUpload(e.target.files[0]);
    }
  };

  return (
    <div className="banner-upload-container">
      <style>
        {`
          .banner-upload-container {
            position: relative;
            width: 100%;
            max-width: 800px;
            margin: 0 auto 20px auto;
            height: 150px; /* Set fixed height */
            border: 1px dashed gray;
            border-radius: 8px;
            overflow: hidden;
            background-color: #f9f9f9;
            cursor: pointer;
          }

          .banner-upload-container .banner-image {
            width: 100%;
            height: 150px; /* Fixed height */
            object-fit: cover; /* Maintain aspect ratio, cover the container */
            display: block;
          }

          .banner-upload-container .empty-banner {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            transition: background-color 0.3s;
            color: white; /* Ensure text is white when no image is present */
          }

          .banner-upload-container .empty-banner.dragging {
            background-color: #e9e9e9;
          }

          .banner-upload-container .empty-banner p {
            margin-top: 8px;
            font-weight: bold;
            color: white;
            text-shadow: 0 0 5px rgba(0,0,0,0.5);
          }

          .banner-upload-container .empty-banner input {
            display: none;
          }

          .banner-upload-container .overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent dark overlay */
            color: white;

            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s;
          }

          .banner-upload-container:hover .overlay {
            opacity: 1;
          }

          .banner-upload-container .overlay .message {
            display: flex;
            flex-direction: column;
            align-items: center;
          }

          .banner-upload-container .overlay .message p {
            margin-top: 8px;
            font-weight: bold;
            color: white !important; /* Explicitly set color to white */
          }

          .banner-upload-container .overlay svg {
            color: white !important;
          }

          .banner-upload-container .upload-instructions {
            text-align: center;
            margin-bottom: 10px;
            font-weight: bold;
          }
        `}
      </style>

      {/* Notification Component */}
      <NotificationComponent />

      {/* Instruction Text */}
      <p className="upload-instructions">
        Upload uw bestand in dit vak. Alleen .png, .jpg en .webp afbeeldingen zijn toegestaan. (max. 2mb)
      </p>

      {isLoading ? (
        <div className="empty-banner">
          <FaImage size={48} />
          <p>Sleep uw banner hier...</p>
          <input
            type="file"
            accept="image/*"
            onChange={handleFileSelect}
            ref={fileInputRef}
          />
        </div>
      ) : (
        <div
          onClick={handleClick}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
        >
          {bannerUrl ? (
            <img src={bannerUrl} alt="Banner" className="banner-image" />
          ) : (
            <div className={`empty-banner ${isDragging ? 'dragging' : ''}`}>
              <FaImage size={48} />
              <p>Sleep uw banner hier...</p>
            </div>
          )}
          {/* Overlay for editing */}
          <div className="overlay">
            <FaImage size={48} />
            <div className="message">
              <p>Verander uw banner door te klikken of te slepen</p>
            </div>
          </div>
          <input
            type="file"
            accept="image/*"
            onChange={handleFileSelect}
            ref={fileInputRef}
            style={{ display: 'none' }}
          />
        </div>
      )}
    </div>
  );
};

export default BannerUploadComponent;


--- Settings/EmailSettings/EmailPreview.js ---
import React, { useState, useEffect, useRef } from 'react';
import BannerUploadComponent from './BannerUploadComponent';
import logo from '../../../Assets/logos/logo.webp'

const EmailPreview = ({ settings, handleChange }) => {
  // Sample data for placeholders
  const sampleData = {
    firstName: 'Jan',
    lastName: 'Jansen',
    date: new Date(),
    time: '18:30',
    guests: 4,
    phone: '0123456789',
    email: 'jan.jansen@example.com',
    reservationId: '123456789',
  };

  // Function to format the date
  const formatDate = (date) => {
    return date.toLocaleDateString('nl-NL', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
    });
  };

  // EditableText component
  const EditableText = ({
    value,
    name,
    handleChange,
    element: Element = 'span',
    className = '',
    style = {},
    inputType = 'input', // 'input' or 'textarea'
  }) => {
    const [isEditing, setIsEditing] = useState(false);
    const [localValue, setLocalValue] = useState(value);
    const inputRef = useRef(null);

    useEffect(() => {
      setLocalValue(value);
    }, [value]);

    useEffect(() => {
      if (isEditing && inputRef.current) {
        inputRef.current.focus();
        if (inputType !== 'textarea') {
          inputRef.current.setSelectionRange(
            inputRef.current.value.length,
            inputRef.current.value.length
          );
        }
      }
    }, [isEditing]);

    const handleBlur = () => {
      setIsEditing(false);
      handleChange({
        target: { name, value: localValue },
      });
    };

    const handleKeyDown = (e) => {
      if (e.key === 'Enter' && inputType !== 'textarea') {
        handleBlur();
      }
    };

    const handleClick = () => {
      setIsEditing(true);
    };

    const grayBoxStyle = {
      border: '1px dashed gray',
      borderRadius: '8px',
      padding: '2px',
      display: 'inline-block',
      cursor: 'text',
    };

    const inputStyle = {
      ...style,
      border: 'none',
      outline: 'none',
      background: 'none',
      padding: '0',
      margin: '0',
      width: 'auto',
      fontFamily: 'inherit',
      fontSize: 'inherit',
      color: 'inherit',
    };

    return (
      <span style={grayBoxStyle}>
        {isEditing ? (
          inputType === 'textarea' ? (
            <textarea
              ref={inputRef}
              name={name}
              value={localValue}
              onChange={(e) => setLocalValue(e.target.value)}
              onBlur={handleBlur}
              className={className}
              style={inputStyle}
              rows={1}
            />
          ) : (
            <input
              ref={inputRef}
              type="text"
              name={name}
              value={localValue}
              onChange={(e) => setLocalValue(e.target.value)}
              onBlur={handleBlur}
              onKeyDown={handleKeyDown}
              className={className}
              style={inputStyle}
              size={Math.max(localValue.length + 1, 1)}
            />
          )
        ) : (
          <Element
            className={className}
            style={{ ...style, display: 'inline' }}
            onClick={handleClick}
          >
            {localValue}
          </Element>
        )}
      </span>
    );
  };

  return (
    <div className="email-preview-container">
      <style>
        {`
          .email-preview-container-small {
            max-width: 800px;
            width: 100%;
            margin: 0 auto;
            background: #ffffff;
            border: 1px solid #dddddd;
            border-radius: 8px;
            padding: 20px;
            font-family: 'Poppins', sans-serif;
            overflow: hidden;
          }

          .email-preview-container .sender-info {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            margin-bottom: 20px;
            width: 100%;
          }

          .email-preview-container .sender-info .info-box {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border: 1px solid #cccccc;
            border-radius: 5px;
            padding: 10px 15px;
            color: #666666;
            margin-bottom: 10px;
            width: 100%;
            background-color: #f5f5f5;
          }

          .email-preview-container .sender-info .info-box .label {
            font-weight: bold;
            color: #333333;
          }

          .email-preview-container .sender-info .info-box .value {
            font-weight: normal;
            text-align: right;
          }

          .email-preview-container .email-body {
            color: #333333;
          }

          .email-preview-container .email-body h2 {
            color: #000;
            font-size: 24px;
            margin-bottom: 16px;
          }

          .email-preview-container .email-body p {
            font-size: 16px;
            line-height: 1.5;
            margin-bottom: 16px;
          }

          .email-preview-container .reservation-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            font-size: 14px;
          }

          .email-preview-container .reservation-table td {
            padding: 8px 12px;
            border: 1px solid #dddddd;
          }

          .email-preview-container .reservation-table td.label {
            font-weight: 600;
            width: 150px;
            vertical-align: top;
            background-color: #f9f9f9;
          }

          .email-preview-container .email-footer {
            text-align: center;
            font-size: 12px;
            color: gray;
            border-top: 1px solid #dddddd;
            padding-top: 10px;
            margin-top: 20px;
          }

          .email-preview-container .email-footer a {
            color: gray;
            text-decoration: none;
          }

          .email-preview-container .email-footer img {
            display: block;
            margin: 0 auto;
            vertical-align: middle;
          }

          .email-preview-container input,
          .email-preview-container textarea {
            border: none;
            outline: none;
            background: none;
            font-family: inherit;
            font-size: inherit;
            color: inherit;
            width: auto;
            resize: none;
          }
        `}
      </style>

      <div className="sender-info">
        <div className="info-box">
          <span className="label">Verzender:</span>
          <span className="value">
            {settings.groetNaam || 'Het Team'}
          </span>
        </div>
        <div className="info-box">
          <span className="label">Email:</span>
          <span className="value">bevestiging@reservaties.net</span>
        </div>
        <div className="info-box">
          <span className="label">Antwoord naar:</span>
          <span className="value">
            {settings.antwoordEmail || 'noreply@example.com'}
          </span>
        </div>
      </div>

      <div className="email-preview-container-small">
        <div className="email-body">

		{settings.showBanner && <BannerUploadComponent />}
          <h2 style={{ color: '#FB5B86'}}>
            <EditableText
              value={settings.startGreeting || 'Beste'}
              name="startGreeting"
              handleChange={handleChange}
              element="span"
              className=""
              style={{ color: '#FB5B86', fontSize: '24px' }}
            />{' '}
            {sampleData.firstName},
          </h2>

          <p>
            Uw reservatie is bevestigd voor{' '}
            <strong>{formatDate(sampleData.date)}</strong> om{' '}
            <strong>{sampleData.time}</strong>.
          </p>

          <p>
            <EditableText
              value={
                settings.emailInhoud ||
                'Wij kijken ernaar uit om u te verwelkomen en hopen dat u een fijne tijd zult hebben.'
              }
              name="emailInhoud"
              handleChange={handleChange}
              element="span"
              inputType="textarea"
              className=""
              style={{ fontSize: '16px', lineHeight: '1.5' }}
            />
          </p>

          {settings.reservatieBewerken === 'Reservatie Bewerken Toestaan' && (
            <p>
              U kunt uw reservatie bewerken via de volgende link:{' '}
              <a
                href={`https://edit.reservaties.net?reservationId=${sampleData.reservationId}`}
              >
                Reservatie Bewerken
              </a>
            </p>
          )}

          <p>
            <EditableText
              value={settings.endGreeting || 'Met vriendelijke groeten,'}
              name="endGreeting"
              handleChange={handleChange}
              element="span"
              className=""
              style={{}}
            />
          </p>
          <p>
            <strong>
              <EditableText
                value={settings.groetNaam || 'Het Team'}
                name="groetNaam"
                handleChange={handleChange}
                element="span"
                className=""
                style={{}}
              />
            </strong>
          </p>
        </div>

        {settings.toonTabel === 'Toon tabel' && (
          <>
            <p>
              <strong>Uw Informatie:</strong>
            </p>
            <table className="reservation-table">
              <tbody>
                <tr>
                  <td className="label">Naam:</td>
                  <td>
                    {sampleData.firstName} {sampleData.lastName}
                  </td>
                </tr>
                <tr>
                  <td className="label">Datum:</td>
                  <td>{formatDate(sampleData.date)}</td>
                </tr>
                <tr>
                  <td className="label">Tijd:</td>
                  <td>{sampleData.time}</td>
                </tr>
                <tr>
                  <td className="label">Aantal Personen:</td>
                  <td>{sampleData.guests}</td>
                </tr>
                <tr>
                  <td className="label">Telefoonnummer:</td>
                  <td>{sampleData.phone}</td>
                </tr>
                <tr>
                  <td className="label">E-mailadres:</td>
                  <td>{sampleData.email}</td>
                </tr>
              </tbody>
            </table>
          </>
        )}

        <div className="email-footer">
          <p>
            <a href="https://mateza.be">
              <img
                src={logo}
                alt="Mateza Logo"
                style={{ width: '35px', height: '35px' }}
              />
            </a>
          </p>
        </div>
      </div>
    </div>
  );
};

export default EmailPreview;


--- Settings/EmailSettings/GeneralSettings.js ---
// GeneralSettings.jsx

import React from 'react';

const GeneralSettings = ({ settings, handleChange, handleSave, isDirty }) => {
  // Default options for Start Greeting
  const startGreetingOptions = ['Dag', 'Hallo', 'Hey', 'Beste', 'Geachte'];

  // Default options for End Greeting
  const endGreetingOptions = [
    'Met vriendelijke groeten,',
    'Hartelijk bedankt,',
    'Tot snel!',
    'Warme groeten,',
  ];

  // Check if the current startGreeting is among the default options
  const isStartGreetingInOptions = startGreetingOptions.includes(
    settings.startGreeting
  );

  const isEndGreetingInOptions = endGreetingOptions.includes(
    settings.endGreeting
  );

  return (
    <form className="settings-form" onSubmit={handleSave} noValidate>
      <div className="form-group">
        <label>Naam</label>
        <div className="input-container">
          <input
            type="text"
            name="groetNaam"
            value={settings.groetNaam}
            onChange={handleChange}
            placeholder="Voer de groetnaam in"
            required
          />
        </div>
      </div>

      <div className="form-group">
        <label>Reply Antwoorden Naar</label>
        <div className="input-container">
          <input
            type="email"
            name="antwoordEmail"
            value={settings.antwoordEmail}
            onChange={handleChange}
            placeholder="Voer het antwoord emailadres in"
            required
          />
        </div>
      </div>

      <div className="form-group">
        <label>Startgroet</label>
        <div className="input-container">
          <select
            name="startGreeting"
            value={settings.startGreeting}
            onChange={handleChange}
            required
          >
            {startGreetingOptions.map((option) => (
              <option key={option} value={option}>
                {option}
              </option>
            ))}
            {!isStartGreetingInOptions && (
              <option value={settings.startGreeting}>
                {settings.startGreeting}
              </option>
            )}
          </select>
        </div>
      </div>

      <div className="form-group">
        <label>Email Inhoud</label>
        <div className="input-container">
          <textarea
            name="emailInhoud"
            value={settings.emailInhoud}
            onChange={handleChange}
            placeholder="Voer de email inhoud in"
            required
          />
        </div>
      </div>

      <div className="form-group">
        <label>Eindgroet</label>
        <div className="input-container">
          <select
            name="endGreeting"
            value={settings.endGreeting}
            onChange={handleChange}
            required
          >
            {endGreetingOptions.map((option) => (
              <option key={option} value={option}>
                {option}
              </option>
            ))}
            {!isEndGreetingInOptions && (
              <option value={settings.endGreeting}>
                {settings.endGreeting}
              </option>
            )}
          </select>
        </div>
      </div>


			<div className="form-group">
        <label>Banner Weergave</label>
        <div className="input-container">
          <select
            name="showBanner"
            value={settings.showBanner ? 'Toon Banner' : 'Verberg Banner'}
            onChange={(e) =>
              handleChange({
                target: {
                  name: 'showBanner',
                  value: e.target.value === 'Toon Banner',
                },
              })
            }
          >
            <option value="Toon Banner">Toon Banner</option>
            <option value="Verberg Banner">Verberg Banner</option>
          </select>
        </div>
      </div>


      <button type="submit" className="settings-button" disabled={!isDirty}>
        Opslaan
      </button>
    </form>
  );
};

export default GeneralSettings;


--- Settings/EmailSettings/NotificationSettings.js ---
// src/components/EmailSettings/NotificationSettings.jsx

import React from 'react';

const NotificationSettings = ({ settings, handleChange, handleSave, isDirty }) => {
  return (
    <form className="settings-form" onSubmit={handleSave} noValidate>
      {/* Bewerking door klant */}
      <div className="form-group">
        <label>Nieuwe Reservatie Ontvangen</label>
        <div className="input-container">
          <select
            name="nieuweReservatie"
            value={settings.nieuweReservatie}
            onChange={handleChange}
          >
            <option value="Geen notificatie">Geen notificatie</option>
            <option value="email">Verwittigingsemail</option>
          </select>
        </div>
      </div>

      {/* Annulatie door klant */}
      <div className="form-group">
        <label>Reservatie Geannulleerd</label>
        <div className="input-container">
          <select
            name="annulatieDoorKlant"
            value={settings.annulatieDoorKlant}
            onChange={handleChange}
          >
            <option value="Geen notificatie">Geen notificatie</option>
            <option value="email">Verwittigingsemail</option>
          </select>
        </div>
      </div>

      <button type="submit" className="settings-button" disabled={!isDirty}>
        Opslaan
      </button>
    </form>
  );
};

export default NotificationSettings;


--- Settings/EmailSettings/css/emailSettings.css ---
/* src/components/EmailSettings/css/emailSettings.css */

/* Existing Styles */
.email-settings-page {
	display: flex;
	flex-direction: column;
	align-items: center;
  }
  
  .email-settings-page .settings-title {
	margin-top: 20px;
	margin-bottom: 20px;
  }
  
  .email-settings-page .settings-tabs {
	width: 100%;
	max-width: 1200px;
  }
  
  .email-settings-page .tab-menu {
	display: flex;
	justify-content: center;
	margin-bottom: 20px;
  }
  
  .email-settings-page .buttons-container {
	display: flex;
	gap: 10px;
  }
  
  .email-settings-page .tab-button {
	position: relative;
	padding: 10px 20px;
	background: none;
	border: none;
	outline: none;
	cursor: pointer;
	font-size: 16px;
	color: #333;
	transition: color 0.3s ease;
  }
  
  .email-settings-page .tab-button.active {
	color: var(--color-blue);
  }
  
  .email-settings-page .tab-underline {
	position: absolute;
	bottom: -2px;
	left: 0;
	right: 0;
	height: 2px;
	background-color: var(--color-blue);
	border-radius: 5px;
  }
  
  .email-settings-page .email-settings-grid {
	display: grid;
	grid-template-columns: 3fr 2fr; /* Updated for 2:1 ratio */
	gap: 20px;
	align-items: start;
  }
  
  .email-settings-page .settings-container,
  .email-settings-page .preview-container {
	background-color: #fff;
	border-radius: 10px;
	padding: 30px;
  }
  
  .email-settings-page .settings-form {
	display: flex;
	flex-direction: column;
	width: 100%; /* Ensure the form takes full width */
  }
  
  .email-settings-page .form-group {
	margin-bottom: 20px;
	width: 100%; /* Ensure each form group takes full width */
  }
  
  .email-settings-page .form-group label {
	text-align: left;
	margin-bottom: 5px;
	font-weight: 500;
  }
  
  .email-settings-page .input-container {
	position: relative;
	width: 100%; /* Ensure input container takes full width */
  }
  
  .email-settings-page .input-container select,
  .email-settings-page .input-container input,
  .email-settings-page .input-container textarea {
	width: 100%;
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: 5px;
	font-size: 1rem;
	transition: border-color 0.3s ease;
  }
  
  .email-settings-page .input-container select:focus,
  .email-settings-page .input-container input:focus,
  .email-settings-page .input-container textarea:focus {
	border-color: #0056b3;
	outline: none;
  }
  
  .email-settings-page .settings-button {
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	transition: background-color 0.3s ease;
	width: 100%; /* Make the save button full width */
  }
  
  .email-settings-page .settings-button:hover {
	background-color: #0056b3;
  }
  

  /* Updated Styles for Meldingen Tab */
  .email-settings-page .meldingen-container {
	display: flex;
	justify-content: center;
	align-items: center;
	background-color: #fff;
	border-radius: 10px;
	padding: 30px;
	max-width: 600px; /* Set maximum width */
	width: 100%; /* Allow the container to take full width up to max-width */
	margin: 0 auto; /* Center the container */
	box-sizing: border-box; /* Include padding in the width */
  }
  
  /* Ensure the form inside meldingen-container takes full width */
  .email-settings-page .meldingen-container .settings-form {
	width: 100%;
  }
  
  /* Responsive Design */
  @media (max-width: 900px) {
	.email-settings-page .email-settings-grid {
	  grid-template-columns: 1fr;
	}
  
	.email-settings-page .preview-container {
	  margin-top: 20px;
	}
  
	.email-settings-page .meldingen-container {
	  padding: 20px;
	  max-width: 100%; /* Allow full width on smaller screens */
	}
  }
  

  @media (max-width: 900px) {
	.email-settings-page {
		padding-bottom: 60px !important;
	  }
	  
  }

--- Settings/EmailSettings/index.js ---
import React, { useState, useEffect, useMemo } from 'react';
import { motion } from 'framer-motion';
import './css/emailSettings.css';
import { withHeader } from '../../../Components/Structural/Header';
import useNotification from '../../../Components/Notification';
import useApi from '../../../Hooks/useApi';
import GeneralSettings from './GeneralSettings';
import NotificationSettings from './NotificationSettings';
import EmailPreview from './EmailPreview';

const EmailSettingsTabs = () => {
  const api = useApi();
  const { triggerNotification, NotificationComponent } = useNotification();

  const defaultSettings = {
    nieuweReservatie: 'Geen notificatie',
    annulatieDoorKlant: 'Geen notificatie',
    antwoordEmail: '',
    groetNaam: '',
    emailInhoud: '',
    startGreeting: 'Beste',
    endGreeting: 'Met vriendelijke groeten,',
  };

  const [settings, setSettings] = useState(defaultSettings);
  const [initialSettings, setInitialSettings] = useState(defaultSettings);
  const [activeTab, setActiveTab] = useState('algemeen');

  useEffect(() => {
    const fetchSettings = async () => {
      try {
        console.log("Email Settings GET");
        const response = await api.get(
          window.baseDomain + 'api/email-settings',
          { noCache: true }
        );
        const data = response || {};
        const mergedData = { ...defaultSettings, ...data };
        setSettings(mergedData);
        setInitialSettings(mergedData);
      } catch (err) {
        console.error('Error fetching email settings:', err);
        triggerNotification(
          'Fout bij het ophalen van email instellingen.',
          'error'
        );
        setSettings(defaultSettings);
        setInitialSettings(defaultSettings);
      }
    };

    fetchSettings();
  }, []); // Empty dependency array to prevent infinite calls

  const handleChange = (e) => {
    const { name, value } = e.target;
    setSettings((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSave = async (e) => {
    e.preventDefault();
    try {
      await api.put(window.baseDomain + 'api/email-settings', settings);
      triggerNotification('Instellingen opgeslagen', 'success');
      setInitialSettings(settings);
    } catch (err) {
      console.error('Error saving email settings:', err);
      triggerNotification('Fout bij het opslaan', 'error');
    }
  };

  const isDirty = useMemo(
    () => JSON.stringify(settings) !== JSON.stringify(initialSettings),
    [settings, initialSettings]
  );

  const tabs = [
    { id: 'algemeen', label: 'Bevestigingsmail', title: 'Email' },
    { id: 'meldingen', label: 'Meldingen', title: 'Email' },
  ];

  const handleTabClick = (tabId) => {
    setActiveTab(tabId);
  };

  return (
    <div className="email-settings-page">
      <NotificationComponent />
      <h2 className="settings-title">
        {tabs.find((tab) => tab.id === activeTab).title}
      </h2>

        
      <div className="settings-tabs">
        
        <div className="tab-menu">
          <div className="buttons-container">
            {tabs.map((tab) => (
              <motion.button
                key={tab.id}
                type="button"
                className={`tab-button ${
                  activeTab === tab.id ? 'active' : ''
                }`}
                onClick={() => handleTabClick(tab.id)}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <span className="tab-label">{tab.label}</span>
                {activeTab === tab.id && (
                  <motion.div
                    layoutId="underline-settings-tabs"
                    className="tab-underline"
                    initial={false}
                    animate={{ opacity: 1 }}
                    transition={{ duration: 0.3 }}
                  />
                )}
              </motion.button>
            ))}
          </div>
        </div>


        {/* Conditional Rendering Based on Active Tab */}
        {activeTab === 'algemeen' && (
          <div className="email-settings-grid">
            {/* Email Preview */}
            <div className="preview-container">
              <EmailPreview settings={settings} handleChange={handleChange} />
            </div>

            {/* Settings Form */}
            <div className="settings-container">
              <div className="tab-content">
                <GeneralSettings
                  settings={settings}
                  handleChange={handleChange}
                  handleSave={handleSave}
                  isDirty={isDirty}
                />
              </div>
            </div>
          </div>
        )}

        {activeTab === 'meldingen' && (
          <div className="meldingen-container">
            <NotificationSettings
              settings={settings}
              handleChange={handleChange}
              handleSave={handleSave}
              isDirty={isDirty}
            />
          </div>
        )}
      </div>
    </div>
  );
};

export default withHeader(EmailSettingsTabs);


--- Settings/GeneralSettings/css/generalSettings.css ---
.general-settings-page {
	display: flex;
	justify-content: center;
	align-items: center;
	flex-direction: column;
}

.general-settings-page label {
	text-align: left;
	margin-bottom: 5px;
	font-weight: 500;
}

.general-settings-page .settings-container {
	background-color: #fff;
	border-radius: 10px;
	padding: 30px;
	width: 100%;
	position: relative;
	max-width: 600px;
	text-align: center;
  }
  
  .general-settings-page .settings-title {
	margin-top: 30px;
	margin-bottom: 30px;
  }
  
  .general-settings-page .settings-form {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  .general-settings-page .form-group {
	display: flex;
	flex-direction: column;
  }
  
  .general-settings-page .input-container {
	position: relative;
  }
  
  .general-settings-page .input-container input,
  .general-settings-page .input-container select {
	width: 100%;
	padding: 10px 10px 10px 10px;
	border: 1px solid #ccc;
	border-radius: 5px;
	font-size: 1rem;
	transition: border-color 0.3s ease;
  }
  
  .general-settings-page .input-container input:focus,
  .general-settings-page .input-container select:focus {
	border-color: #0056b3;
	outline: none;
  }
  
  .general-settings-page .settings-button {
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	display: flex;
	align-items: center;
	justify-content: center;
	gap: 10px;
	transition: background-color 0.3s ease;
  }
  
  .general-settings-page .settings-button:hover {
	background-color: #0056b3;
  }
  
  /* General Settings Page Styles */

  
  /* Tooltip styles */
  .general-settings-page .label-with-tooltip {
	display: flex;
	align-items: center;
  }
  
  .general-settings-page .label-with-tooltip label {
	margin-right: 5px;
  }
  
  .general-settings-page .button-with-tooltip {
	position: relative;
	display: inline-block;
  }
  
  .general-settings-page .button-with-tooltip .tooltip {
    display: none; /* Initially hidden */
    position: absolute;
    bottom: 125%; /* Position above the button */
    left: 50%;
    transform: translateX(-50%);
    width: 400px; /* Set fixed width */
    background-color: black;
    color: white;
    padding: 10px 15px; /* Increased padding for better spacing */
    border-radius: 4px;
    white-space: normal; /* Allow text to wrap */
    font-size: 14px;
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
}
  
  .general-settings-page .button-with-tooltip .tooltip::before {
	content: '';
	position: absolute;
	top: 100%;
	left: 50%;
	transform: translateX(-50%);
	border-width: 5px;
	border-style: solid;
	border-color: black transparent transparent transparent;
  }
  
  .general-settings-page .button-with-tooltip:hover .tooltip {
	display: block;
	opacity: 1;
	transform: translateX(-50%) translateY(-5px);
  }
  
  .general-settings-page .button-with-tooltip svg {
	cursor: pointer;
	color: #555;
	font-size: 16px;
  }
  
  .general-settings-page .button-with-tooltip svg:hover {
	color: #000;
  }
  

  @media (max-width: 900px) {
	.general-settings-page {
		padding-bottom: 60px !important;
	  }
	  
  }

--- Settings/GeneralSettings/index.js ---
import React, { useState, useEffect, useMemo } from 'react';
import './css/generalSettings.css';
import { withHeader } from '../../../Components/Structural/Header';
import useApi from '../../../Hooks/useApi';
import useNotification from '../../../Components/Notification';
import { FaInfoCircle } from 'react-icons/fa'; // Import the info icon

const Settings = () => {
  const api = useApi();
  const { triggerNotification, NotificationComponent } = useNotification();

  const defaultSettings = {
    zitplaatsen: 0,
    uurOpVoorhand: 0,
    dagenInToekomst: 0,
    maxGasten: 0,
    intervalReservatie: 0,
    duurReservatie: 60,
    showNoticeForMaxGuests: 'Nee',
    noticePhoneNumber: '',
  };  

  const [settings, setSettings] = useState(defaultSettings);
  const [initialSettings, setInitialSettings] = useState(defaultSettings);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchSettings = async () => {
      try {
        console.log("General Settings GET");
        const response = await api.get(window.baseDomain + 'api/general-settings', { noCache: true });
        const data = response || {};

        const mergedData = { 
          ...defaultSettings, 
          ...data,
          dagenInToekomst: data.dagenInToekomst !== undefined ? Number(data.dagenInToekomst) : defaultSettings.dagenInToekomst,
          intervalReservatie: data.intervalReservatie !== undefined ? Number(data.intervalReservatie) : defaultSettings.intervalReservatie,
          duurReservatie: data.duurReservatie !== undefined ? Number(data.duurReservatie) : defaultSettings.duurReservatie,
        };

        setSettings(mergedData);
        setInitialSettings(mergedData);
      } catch (err) {
        console.error('Error fetching general settings:', err);
        triggerNotification('Fout bij het ophalen van instellingen.', 'error');
        setSettings(defaultSettings);
        setInitialSettings(defaultSettings);
      } finally {
        setLoading(false);
      }
    };

    fetchSettings();
  }, [api]);

  const handleChange = (e) => {
    const { name, value } = e.target;

    let parsedValue = value;
    // Parse numerical fields properly
    if (['intervalReservatie', 'dagenInToekomst', 'duurReservatie'].includes(name)) {
      parsedValue = value === '' ? '' : Number(value);
      if (isNaN(parsedValue)) {
        parsedValue = 0; 
      }
    }

    setSettings((prev) => ({
      ...prev,
      [name]: parsedValue,
    }));
  };

  const handleSave = async (e) => {
    e.preventDefault();
    try {
      await api.put(window.baseDomain + 'api/general-settings', settings);
      triggerNotification('Instellingen opgeslagen', 'success');
      setInitialSettings(settings);
    } catch (err) {
      console.error('Error saving general settings:', err);
      triggerNotification('Fout bij het opslaan', 'error');
    }
  };

  const isDirty = useMemo(
    () => JSON.stringify(settings) !== JSON.stringify(initialSettings),
    [settings, initialSettings]
  );

  // Generate increments
  const generateIncrements = () => {
    const increments = [];

    // 5 min increments up to 60
    for (let i = 5; i <= 60; i += 5) {
      increments.push(i);
    }

    // 10 min increments from 70 to 90
    for (let i = 70; i <= 90; i += 10) {
      increments.push(i);
    }

    // 15 min increments from 105 to 180
    for (let i = 105; i <= 180; i += 15) {
      increments.push(i);
    }

    // 30 min increments from 210 to 300
    for (let i = 210; i <= 300; i += 30) {
      increments.push(i);
    }

    // 60 min increments from 360 to 600
    for (let i = 360; i <= 600; i += 60) {
      increments.push(i);
    }

    return increments;
  };

  const timeOptions = generateIncrements();

  return (
    <div className="general-settings-page">
      <NotificationComponent />
      <h2 className="settings-title">Beheer Reservaties</h2>
      <div className="settings-container">
        <form className="settings-form" onSubmit={handleSave} noValidate>
          {/* Aantal Zitplaatsen */}
          <div className="form-group">
            <div className="label-with-tooltip">
              <label>Aantal Zitplaatsen</label>
              <div className="button-with-tooltip">
                <FaInfoCircle />
                <div className="tooltip">
                  Het maximum aantal gasten die kunnen boeken in uw restaurant indien geen uitzondering van toepassing is.
                </div>
              </div>
            </div>
            <div className="input-container">
              <input
                type="number"
                name="zitplaatsen"
                placeholder="Zitplaatsen"
                value={settings.zitplaatsen}
                onChange={handleChange}
                min="0"
                max="10000"
              />
            </div>
          </div>

          {/* Min. Uren op Voorhand te Reserveren */}
          <div className="form-group">
            <div className="label-with-tooltip">
              <label>Min. Uren op Voorhand te Reserveren</label>
              <div className="button-with-tooltip">
                <FaInfoCircle />
                <div className="tooltip">
                  Het minimum aantal uren dat klanten vooraf moeten reserveren.
                </div>
              </div>
            </div>
            <div className="input-container">
              <select
                name="uurOpVoorhand"
                value={settings.uurOpVoorhand}
                onChange={handleChange}
              >
                {Array.from({ length: 17 }, (_, i) => (
                  <option key={i} value={i}>
                    {i} uur
                  </option>
                ))}
              </select>
            </div>
          </div>


          {/* Max. Aantal Dagen in de Toekomst te Reserveren */}
          <div className="form-group">
            <div className="label-with-tooltip">
              <label>Max. Aantal Dagen in de Toekomst te Reserveren</label>
              <div className="button-with-tooltip">
                <FaInfoCircle />
                <div className="tooltip">
                  Het maximale aantal dagen in de toekomst tot wanneer klanten kunnen reserveren.
                </div>
              </div>
            </div>
            <div className="input-container">
              <input
                type="number"
                name="dagenInToekomst"
                placeholder="Hoeveel dagen in de toekomst"
                value={settings.dagenInToekomst}
                onChange={handleChange}
                min="0"
                max="400"
              />
            </div>
          </div>

          {/* Interval Reservatie */}
          <div className="form-group">
            <div className="label-with-tooltip">
              <label>Interval Tussen Reservaties (min)</label>
              <div className="button-with-tooltip">
                <FaInfoCircle />
                <div className="tooltip">
                  Het interval tussen reservaties.
                </div>
              </div>
            </div>
            <div className="input-container">
              <select
                name="intervalReservatie"
                value={settings.intervalReservatie}
                onChange={handleChange}
              >
                <option value={0}>Selecteer interval</option>
                {timeOptions.map((val) => (
                  <option key={val} value={val}>
                    {val} min
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Duur Reservatie */}
          <div className="form-group">
            <div className="label-with-tooltip">
              <label>Duur Reservatie (min)</label>
              <div className="button-with-tooltip">
                <FaInfoCircle />
                <div className="tooltip">
                  De standaardduur van een reservatie in minuten.
                </div>
              </div>
            </div>
            <div className="input-container">
              <select
                name="duurReservatie"
                value={settings.duurReservatie}
                onChange={handleChange}
              >
                <option value={0}>Selecteer duur</option>
                {timeOptions.map((val) => (
                  <option key={val} value={val}>
                    {val} min
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Max. Aantal Gasten per Online Boeking */}
          <div className="form-group">
            <div className="label-with-tooltip">
              <label>Max. Aantal Gasten per Online Boeking</label>
              <div className="button-with-tooltip">
                <FaInfoCircle />
                <div className="tooltip">
                  Het maximale aantal gasten per online reservering.
                </div>
              </div>
            </div>
            <div className="input-container">
              <input
                type="number"
                name="maxGasten"
                placeholder="Max gasten online boeking"
                value={settings.maxGasten}
                onChange={handleChange}
                min="0"
                max="1000"
                step="1"
              />
            </div>
          </div>

          {/* Show Notice for Exceeding Max Guests */}
          <div className="form-group">
            <div className="label-with-tooltip">
              <label>Vraag om te Bellen bij Meer Gasten</label>
              <div className="button-with-tooltip">
                <FaInfoCircle />
                <div className="tooltip">
                  Wanneer iemand een groter aantal gasten kiest dan bepaald in het bovenstaande veld kan u vragen om te bellen.
                </div>
              </div>
            </div>
            <div className="input-container">
              <select
                name="showNoticeForMaxGuests"
                value={settings.showNoticeForMaxGuests}
                onChange={handleChange}
              >
                <option value="Ja">Ja</option>
                <option value="Nee">Nee</option>
              </select>
            </div>
          </div>

          {settings.showNoticeForMaxGuests === 'Ja' && (
            <div className="form-group">
              <div className="label-with-tooltip">
                <label>Telefoonnummer</label>
                <div className="button-with-tooltip">
                  <FaInfoCircle />
                  <div className="tooltip">
                    Het telefoonnummer dat wordt getoond in de melding die vraagt om te bellen voor uitgebreidere reservaties.
                  </div>
                </div>
              </div>
              <div className="input-container">
                <input
                  type="text"
                  name="noticePhoneNumber"
                  placeholder="Telefoonnummer"
                  value={settings.noticePhoneNumber}
                  onChange={handleChange}
                />
              </div>
            </div>
          )}

          <button type="submit" className="button-style-3" disabled={!isDirty}>
            Opslaan
          </button>
        </form>
      </div>
    </div>
  );
};

export default withHeader(Settings);


--- Settings/GeneralSettings/settings.md ---
# Documentation: General Reservation Settings Component

## Overview

The **General Reservation Settings** component is a React component that allows administrators to configure key reservation parameters for a restaurant. These settings include seat capacity, booking time constraints, maximum guests per reservation, default reservation duration, and notification preferences when exceeding guest limits. This component interacts with an API to fetch and save settings, and it reflects changes in the user interface.

---

## Component Structure

### File Location

```
/src/Components/Settings/GeneralSettings.js
```

### Main Functionalities

- Fetches initial settings from the API upon component mount.
- Allows administrators to modify reservation-related settings.
- Validates and saves changes back to the server.
- Provides tooltips for additional information on each setting.

---

## Key Properties and Their Descriptions

### 1. **Number of Seats (`zitplaatsen`)**

- **Description**: The maximum number of seats available in the restaurant when no exceptions apply.
- **Data Type**: Integer
- **Input Constraints**:
  - Minimum: `0`
  - Maximum: `10000`
- **Storage Location**:
  - In the data structure, it is stored under the key `general-settings.zitplaatsen`.

**Example from Data Structure**:

```json
"general-settings": {
  "zitplaatsen": "8",
  // other settings...
}
```

### 2. **Minimum Hours in Advance to Book (`uurOpVoorhand`)**

- **Description**: The minimum number of hours that customers must book in advance.
- **Data Type**: Integer
- **Input Constraints**:
  - Minimum: `0`
  - Maximum: `400`
- **Storage Location**:
  - Stored under `general-settings.uurOpVoorhand`.

**Example**:

```json
"general-settings": {
  "uurOpVoorhand": "7",
  // other settings...
}
```

### 3. **Maximum Days in the Future to Book (`dagenInToekomst`)**

- **Description**: The maximum number of days into the future that customers can make a reservation.
- **Data Type**: Integer
- **Input Constraints**:
  - Minimum: `0`
  - Maximum: `400`
- **Storage Location**:
  - Stored under `general-settings.dagenInToekomst`.

**Example**:

```json
"general-settings": {
  "dagenInToekomst": "6",
  // other settings...
}
```

### 4. **Maximum Number of Guests per Online Booking (`maxGasten`)**

- **Description**: The maximum number of guests allowed per online reservation.
- **Data Type**: Integer
- **Input Constraints**:
  - Minimum: `0`
  - Maximum: `1000`
- **Storage Location**:
  - Stored under `general-settings.maxGasten`.

**Example**:

```json
"general-settings": {
  "maxGasten": "2",
  // other settings...
}
```

### 5. **Reservation Duration (`duurReservatie`)**

- **Description**: The default duration of a reservation in minutes.
- **Data Type**: Integer
- **Input Constraints**:
  - Minimum: `5`
  - Maximum: `10000`
- **Storage Location**:
  - Stored under `general-settings.duurReservatie`.

**Note**: In the provided data structure, `duurReservatie` is stored with an additional nested object due to the database format.

**Example**:

```json
"general-settings": {
  "duurReservatie": { "$numberInt": "0" },
  // other settings...
}
```

### 6. **Show Notice for Exceeding Maximum Guests (`showNoticeForMaxGuests`)**

- **Description**: Determines whether a notice should be displayed to customers when they select a number of guests exceeding the maximum allowed for online bookings.
- **Data Type**: String (`"Ja"` or `"Nee"`)
- **Input Constraints**:
  - Options: `"Ja"`, `"Nee"`
- **Storage Location**:
  - Stored under `general-settings.showNoticeForMaxGuests`.

**Example**:

```json
"general-settings": {
  "showNoticeForMaxGuests": "Nee",
  // other settings...
}
```

### 7. **Notice Phone Number (`noticePhoneNumber`)**

- **Description**: The telephone number displayed in the notice when customers select more guests than allowed online.
- **Data Type**: String
- **Input Constraints**:
  - Must be a valid telephone number format.
- **Storage Location**:
  - Stored under `general-settings.noticePhoneNumber`.

**Example**:

```json
"general-settings": {
  "noticePhoneNumber": "012-3456789",
  // other settings...
}
```

---

## Data Structure and Storage

### General Structure

The settings are part of a larger data object that contains various configurations for the restaurant's reservation system. The main categories include:

- **Colors**
- **Theme**
- **Page Settings**
- **Fonts**
- **Fields**
- **Time Blocks**
- **General Settings**
- **Email Settings**

### Location of General Settings

The general reservation settings are stored under the `general-settings` key in the data structure.

**Example**:

```json
{
  "_id": "thibault",
  // other settings...
  "general-settings": {
    "zitplaatsen": "8",
    "uurOpVoorhand": "7",
    "dagenInToekomst": "6",
    "maxGasten": "2",
    "duurReservatie": { "$numberInt": "0" },
    "showNoticeForMaxGuests": "Nee",
    "noticePhoneNumber": "",
    "storedNumber": { "$numberInt": "96" }
  },
  // other settings...
}
```

### Explanation of Fields

- **`_id`**: Unique identifier for the restaurant or user.
- **`storedNumber`**: An internal tracking number, possibly used for versioning or ordering.
- **Nested Objects**: Some values are stored as nested objects with `$numberInt` keys due to the database's handling of integer values.

---

## Interaction with the API

- **Fetching Settings**: On component mount, the settings are fetched from the API endpoint `/api/general-settings`.
- **Saving Settings**: Upon form submission, the settings are sent to the API via a `PUT` request to `/api/general-settings`.

---

## User Interface Elements

### Input Fields

Each setting is represented by an input field in the form, allowing the administrator to update its value.

- **Number Inputs**: All inputs are of type `number`, ensuring that only numerical values can be entered.
- **Text Inputs**: For fields like `noticePhoneNumber`, a text input is used to capture the telephone number.
- **Select Boxes**: The `showNoticeForMaxGuests` field is represented by a dropdown selection box with options `"Ja"` and `"Nee"`.
- **Placeholders**: Each input includes a placeholder that hints at the expected input.

### Labels and Tooltips

- **Labels**: Clearly describe the purpose of each setting.
- **Tooltips**: Provide additional information when hovering over the info icon (`FaInfoCircle`).

### Save Button

- **Enabled State**: The save button is enabled only when changes have been made (`isDirty` is `true`).
- **Disabled State**: If no changes are detected, the button is disabled to prevent unnecessary API calls.

---

## State Management

### useState Hooks

- **`settings`**: Holds the current values of the settings being edited.
- **`initialSettings`**: Stores the original settings fetched from the API for comparison.
- **`loading`**: Indicates whether the settings are currently being fetched.

### useEffect Hooks

- **Fetching Settings**: Fetches settings from the API when the component mounts.
- **Comparing Settings**: Uses `useMemo` to determine if any changes have been made (`isDirty`).

---

## Validation and Constraints

- **Minimum and Maximum Values**: Each input field has `min` and `max` attributes to prevent invalid entries.
- **Step Value**: The `step` attribute is set to `1` for integer inputs to avoid decimal values.
- **Telephone Number Validation**: While not explicitly handled in the code, it's recommended to ensure that `noticePhoneNumber` follows a valid telephone number format.

---

## Error Handling

- **API Errors**: If fetching or saving settings fails, an error message is displayed using the notification system.
- **Console Logging**: Errors are also logged to the console for debugging purposes.

---

## Related Data Structures

### Time Blocks (`timeblocks`)

- Stores specific time-based configurations, including exceptional days and scheme settings.

**Example**:

```json
"timeblocks": [
  {
    "id": "671e6d5f7272b4a71f47e12b",
    "date": "2024-11-21",
    "title": "Tijdsblok (27 oktober)",
    // other properties...
  }
]
```

### Exceptional Days (`exceptionalDays`)

- Contains exceptions to the regular schedule, such as closing periods or exceptional opening hours.

**Example**:

```json
"exceptionalDays": {
  "sluitingsperiode": [
    {
      "enabled": true,
      "startDate": "2024-11-22",
      "endDate": "2024-11-24"
    }
  ],
  "sluitingsdag": [
    {
      "enabled": true,
      "date": "2024-11-23"
    }
  ],
  "uitzonderlijkeOpeningsuren": [
    {
      "enabled": true,
      "date": "2024-11-22",
      "startTime": "04:15",
      "endTime": "06:15"
    }
  ]
}
```

---

## Summary of Settings and Their Impact

1. **`zitplaatsen` (Number of Seats)**
   - Determines the overall capacity for reservations.
   - Affects availability calculations in the reservation system.

2. **`uurOpVoorhand` (Minimum Hours in Advance)**
   - Prevents last-minute bookings.
   - Ensures the restaurant has sufficient time to prepare.

3. **`dagenInToekomst` (Maximum Days in Future)**
   - Limits how far ahead customers can book.
   - Helps in planning and managing future reservations.

4. **`maxGasten` (Maximum Guests per Booking)**
   - Controls the size of parties that can book online.
   - Larger groups may need special arrangements and are encouraged to call.

5. **`duurReservatie` (Reservation Duration)**
   - Sets a default time slot for each reservation.
   - Important for table turnover and scheduling.

6. **`showNoticeForMaxGuests` (Show Notice for Exceeding Maximum Guests)**
   - **Impact**: When set to `"Ja"`, customers selecting more guests than the allowed maximum for online bookings will receive a notice prompting them to call the restaurant.
   - **User Experience**: Enhances communication by informing customers of the need to call for larger reservations, ensuring better management of large groups.

7. **`noticePhoneNumber` (Notice Phone Number)**
   - **Impact**: Provides the specific telephone number customers should call when they exceed the maximum number of guests allowed for online bookings.
   - **User Experience**: Streamlines the reservation process for larger parties by directing them to the appropriate contact method.

---

## Conclusion

The General Reservation Settings component plays a crucial role in configuring how reservations are managed in the restaurant. By understanding each property's purpose and how it is stored in the data structure, administrators can effectively control the reservation process, ensuring a smooth experience for both the restaurant staff and customers. The addition of notification settings enhances the system's flexibility, allowing for better handling of reservations that exceed standard guest limits.

---

## References

- **API Endpoints**:
  - Fetch Settings: `GET /api/general-settings`
  - Save Settings: `PUT /api/general-settings`

- **Data Structure Keys**:
  - General Settings: `general-settings`
  - Time Blocks: `timeblocks`
  - Exceptional Days: `exceptionalDays`

- **Dependencies**:
  - React Hooks (`useState`, `useEffect`, `useMemo`)
  - Notification System (`useNotification`)
  - Icon Library (`react-icons`)

---

## Code Snippet

```jsx
// Example of handling input change
const handleChange = (e) => {
  const { name, value } = e.target;
  setSettings((prev) => ({
    ...prev,
    [name]: value,
  }));
};
```

---

# Short Summary

The assistant updated the documentation for the General Reservation Settings component by adding two new fields: `showNoticeForMaxGuests` and `noticePhoneNumber`. These fields allow administrators to enable a notice when customers select more guests than allowed online and specify the phone number for reservations exceeding the limit. The documentation now includes detailed descriptions of these new fields, their data types, input constraints, storage locations, and their impact on the reservation system. Additionally, the summary and user interface elements sections have been updated to reflect these changes, ensuring a comprehensive understanding of how each setting affects the reservation process.

--- Tables/TableEditor/FloorPlan.js ---
// FloorPlan.js
import React, { useState, useCallback, useRef, useEffect } from 'react';
import { useDrop } from 'react-dnd';
import './css/floorPlan.css';
import { ResizableBox } from 'react-resizable';
import 'react-resizable/css/styles.css';
import FloorPlanElement from './FloorPlanElement.js';
import LinesLayer from './LinesLayer.js'; // New component
import TableEditModalContent from './TableEditModalContent.js'; // Ensure correct path
import ModalWithoutTabs from '../../../Components/Structural/Modal/Standard/index.js'; // Ensure correct path
import useApi from '../../../Hooks/useApi.js'; // Ensure correct path

// Import custom hooks
import useElementActions from './Hooks/useElementsActions.js';
import useLineActions from './Hooks/useLineActions.js';

const ALIGN_THRESHOLD = 15; // Threshold in pixels for alignment detection

const FloorPlan = () => {
  const [elements, setElements] = useState([]);
  const [lines, setLines] = useState([]); // State to store lines
  const floorPlanRef = useRef(null);
  const [floorPlanSize, setFloorPlanSize] = useState({ width: 800, height: 600 });
  const [nextTableNumber, setNextTableNumber] = useState(1);

  const api = useApi(); // Initialize useApi hook

  // State for modal
  const [selectedElement, setSelectedElement] = useState(null);
  const [showModal, setShowModal] = useState(false);

  // State for line drawing
  const [isDrawingLine, setIsDrawingLine] = useState(false);
  const [startTableId, setStartTableId] = useState(null);
  const [currentMousePosition, setCurrentMousePosition] = useState({ x: 0, y: 0 });
  const [isAltPressed, setIsAltPressed] = useState(false);

  // Use custom hooks for element and line actions
  const {
    addElement,
    updateElement,
    moveElement,
    rotateElement,
    duplicateElement,
    deleteElement,
  } = useElementActions(setElements, setLines, floorPlanSize, nextTableNumber, setNextTableNumber, api);

  const { addLine, deleteLine } = useLineActions(setLines, api);

  // Define handleMouseUp in the component's scope
  const handleMouseUp = useCallback(() => {
    if (isDrawingLine) {
      setIsDrawingLine(false);
      setStartTableId(null);
    }
  }, [isDrawingLine]);

  // Update floor plan size on mount and when resized
  useEffect(() => {
    const updateSize = () => {
      if (floorPlanRef.current) {
        const { width, height } = floorPlanRef.current.getBoundingClientRect();
        setFloorPlanSize({ width, height });
      }
    };

    // Initial size
    updateSize();

    // Update size on window resize
    window.addEventListener('resize', updateSize);

    // Cleanup
    return () => window.removeEventListener('resize', updateSize);
  }, []);

  // Load tables and lines from API on mount
  useEffect(() => {
    const fetchTablesAndLines = async () => {
      try {
        console.log("TableEditor GET");
        const data = await api.get(`${window.baseDomain}api/tables`, { noCache: true });
        // Ensure that data is an array
        if (Array.isArray(data)) {
          const elementsData = data.filter((item) => item.type !== 'line');
          const linesData = data.filter((item) => item.type === 'line');
          setElements(elementsData);
          setLines(linesData);
        } else if (data && Array.isArray(data.tables)) { // If API returns { tables: [...] }
          const elementsData = data.tables.filter((item) => item.type !== 'line');
          const linesData = data.tables.filter((item) => item.type === 'line');
          setElements(elementsData);
          setLines(linesData);
        } else {
          setElements([]); // Fallback to empty array
          setLines([]);
        }
      } catch (error) {
        console.error('Error fetching tables:', error);
        setElements([]); // Fallback to empty array on error
        setLines([]);
      }
    };

    fetchTablesAndLines();
  }, [api]);

  // Handle keydown and keyup events for Alt key
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === 'Alt') {
        setIsAltPressed(true);
      }
    };

    const handleKeyUp = (e) => {
      if (e.key === 'Alt') {
        setIsAltPressed(false);
        setIsDrawingLine(false);
        setStartTableId(null);
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    window.addEventListener('keyup', handleKeyUp);

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('keyup', handleKeyUp);
    };
  }, []);

  // Handle mouse move when drawing line
  useEffect(() => {
    const handleMouseMove = (e) => {
      if (isDrawingLine) {
        const floorPlanRect = floorPlanRef.current.getBoundingClientRect();
        setCurrentMousePosition({
          x: e.clientX - floorPlanRect.left,
          y: e.clientY - floorPlanRect.top,
        });
      }
    };

    window.addEventListener('mousemove', handleMouseMove);

    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, [isDrawingLine]);

  // Attach the global handleMouseUp
  useEffect(() => {
    window.addEventListener('mouseup', handleMouseUp);

    return () => {
      window.removeEventListener('mouseup', handleMouseUp);
    };
  }, [handleMouseUp]);

  const snapToGrid = (x, y, gridSize = 50) => {
    const snappedX = Math.round(x / gridSize) * gridSize;
    const snappedY = Math.round(y / gridSize) * gridSize;
    return [snappedX, snappedY];
  };

  const [, drop] = useDrop({
    accept: 'ITEM',
    drop: (item, monitor) => {
      const offset = monitor.getClientOffset();
      const floorPlanRect = floorPlanRef.current.getBoundingClientRect();

      let x = offset.x - floorPlanRect.left;
      let y = offset.y - floorPlanRect.top;

      // Apply snapping only if the element is not a wall
      if (item.elementType !== 'wall') {
        const [snappedX, snappedY] = snapToGrid(x, y);
        x = Math.max(0, Math.min(snappedX, floorPlanSize.width - item.width));
        y = Math.max(0, Math.min(snappedY, floorPlanSize.height - item.height));
      } else {
        // For walls, ensure they stay within boundaries without snapping
        x = Math.max(0, Math.min(x, floorPlanSize.width - item.width));
        y = Math.max(0, Math.min(y, floorPlanSize.height - item.height));
      }

      if (item.id) {
        moveElement(item.id, x, y);
      } else {
        const id = Date.now();
        const newElement = {
          id,
          type: item.elementType,
          subtype: item.subtype,
          x,
          y,
          width: item.width,
          height: item.height,
          capacity: item.capacity,
          name:
            item.elementType === 'table'
              ? `T${nextTableNumber}`
              : `${item.subtype.charAt(0).toUpperCase() + item.subtype.slice(1)} Decoration ${id}`,
          minCapacity: item.minCapacity || 1,
          maxCapacity: item.maxCapacity || 10,
          priority: 'Medium',
          rotation: 0, // Initialize rotation
        };

        // Assign a tableNumber if the element is a table
        if (item.elementType === 'table') {
          newElement.tableNumber = nextTableNumber;
          setNextTableNumber((prev) => prev + 1);
        }

        addElement(newElement);

        // Open modal to edit table details only if needed
        setSelectedElement(newElement);
        setShowModal(true);
      }
    },
  });

  const handleModalClose = () => {
    setShowModal(false);
    setSelectedElement(null);
  };

  const handleModalSave = (updatedElement) => {
    // Update the element in state
    updateElement(updatedElement);
    setShowModal(false);
    setSelectedElement(null);

    // Save the element to API
    const saveElement = async () => {
      try {
        if (updatedElement.type === 'line') {
          // Lines are handled separately
          return;
        }
        if (updatedElement._id) {
          // Existing table: use PUT request
          await api.put(`${window.baseDomain}api/tables/${updatedElement._id}`, updatedElement);
        } else {
          // New table: use POST request
          await api.post(`${window.baseDomain}api/tables`, updatedElement);
        }
      } catch (error) {
        console.error('Error saving table:', error);
      }
    };

    saveElement();
  };

  const handleTableMouseDown = (tableId, e) => {
    if (!isAltPressed) return;
    e.stopPropagation();
    setIsDrawingLine(true);
    setStartTableId(tableId);

    const floorPlanRect = floorPlanRef.current.getBoundingClientRect();
    setCurrentMousePosition({
      x: e.clientX - floorPlanRect.left,
      y: e.clientY - floorPlanRect.top,
    });
  };

  const handleTableMouseUp = (tableId, e) => {
    if (isDrawingLine && startTableId && startTableId !== tableId) {
      // Create a new line
      const newLine = {
        id: `line-${Date.now()}`,
        type: 'line',
        from: startTableId,
        to: tableId,
      };
      addLine(newLine);
    }
    setIsDrawingLine(false);
    setStartTableId(null);
  };

  const handleLineClick = (lineId) => {
    // Remove the line
    deleteLine(lineId);
  };

  return (
    <>
      <ResizableBox
        width={800}
        height={600}
        minConstraints={[400, 300]}
        maxConstraints={[1600, 1200]}
        className="table-plan-component resizable-floor-plan"
        onResizeStop={(e, data) => {
          // Directly set the new size without snapping
          setFloorPlanSize({ width: data.size.width, height: data.size.height });
        }}
        resizeHandles={['se']} // Optional: specify resize handles if needed
      >
        <div
          id="floor-plan-container"
          className="table-plan-component floor-plan"
          ref={(node) => {
            drop(node);
            floorPlanRef.current = node;
          }}
          style={{ position: 'relative', width: '100%', height: '100%' }}
          onMouseUp={handleMouseUp} // Now handleMouseUp is defined
        >
          <LinesLayer
            elements={elements}
            lines={lines}
            isDrawingLine={isDrawingLine}
            startTableId={startTableId}
            currentMousePosition={currentMousePosition}
            handleLineClick={handleLineClick} // Pass handleLineClick
          />
          {Array.isArray(elements) &&
            elements.map((el) => (
              <FloorPlanElement
                key={el.id}
                element={el}
                moveElement={moveElement}
                rotateElement={rotateElement}
                duplicateElement={duplicateElement}
                deleteElement={deleteElement}
                floorPlanSize={floorPlanSize}
                tableNumber={el.tableNumber}
                openModal={(element) => {
                  setSelectedElement(element);
                  setShowModal(true);
                }}
                handleTableMouseDown={handleTableMouseDown}
                handleTableMouseUp={handleTableMouseUp}
                isAltPressed={isAltPressed}
              />
            ))}
        </div>
      </ResizableBox>
      {showModal && selectedElement && (
        <ModalWithoutTabs
          onClose={handleModalClose}
          content={
            <TableEditModalContent
              element={selectedElement}
              onSave={handleModalSave}
              onClose={handleModalClose}
            />
          }
        />
      )}
    </>
  );
};

export default FloorPlan;


--- Tables/TableEditor/FloorPlanElement.js ---
// FloorPlanElement.js
import React from 'react';
import Table from './Table.js';
import Walls from './Walls.js';

const FloorPlanElement = ({
  element,
  moveElement,
  rotateElement,
  duplicateElement,
  deleteElement,
  floorPlanSize,
  tableNumber,
  openModal,
  handleTableMouseDown,
  handleTableMouseUp,
  isAltPressed,
}) => {
  const [position, setPosition] = React.useState({ x: element.x, y: element.y });
  const [isDragging, setIsDragging] = React.useState(false);
  const [offset, setOffset] = React.useState({ x: 0, y: 0 });

  React.useEffect(() => {
    setPosition({ x: element.x, y: element.y });
  }, [element.x, element.y]);

  const handleMouseDown = (e) => {
    if (isAltPressed) {
      handleTableMouseDown(element.id, e);
      return;
    }
    e.preventDefault(); // Prevent text selection
    setIsDragging(true);
    setOffset({
      x: e.clientX - position.x,
      y: e.clientY - position.y,
    });
  };

  const handleMouseUp = (e) => {
    if (isAltPressed) {
      handleTableMouseUp(element.id, e);
      return;
    }
    // Do nothing
  };

  React.useEffect(() => {
    const handleMouseMove = (e) => {
      if (isDragging) {
        let newX = e.clientX - offset.x;
        let newY = e.clientY - offset.y;

        // Constrain within floor plan boundaries
        newX = Math.max(0, Math.min(newX, floorPlanSize.width - element.width));
        newY = Math.max(0, Math.min(newY, floorPlanSize.height - element.height));

        setPosition({
          x: newX,
          y: newY,
        });
      }
    };

    const handleMouseUp = () => {
      if (isDragging) {
        setIsDragging(false);

        // Apply snapping on mouse release for non-wall elements
        if (element.type !== 'wall') {
          const snappedX = Math.round(position.x / 50) * 50; // Assuming grid size 50
          const snappedY = Math.round(position.y / 50) * 50;
          const finalX = Math.max(0, Math.min(snappedX, floorPlanSize.width - element.width));
          const finalY = Math.max(0, Math.min(snappedY, floorPlanSize.height - element.height));

          setPosition({ x: finalX, y: finalY });
          moveElement(element.id, finalX, finalY);
        } else {
          // For walls, no snapping
          moveElement(element.id, position.x, position.y);
        }
      }
    };

    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [
    isDragging,
    offset,
    position.x,
    position.y,
    moveElement,
    element.id,
    floorPlanSize,
    element.width,
    element.height,
    element.type,
  ]);

  const style = {
    position: 'absolute',
    left: `${position.x}px`,
    top: `${position.y}px`,
    width: `${element.width}px`,
    height: `${element.height}px`,
    opacity: isDragging ? 0.5 : 1,
    cursor: 'move',
    transition: isDragging ? 'none' : 'left 0.2s, top 0.2s',
    zIndex: isDragging ? 1000 : 'auto', // Bring to front when dragging
  };

  // Hide action buttons when Alt is pressed
  const showActions = !isAltPressed;

  return (
    <div
      className="table-plan-component floor-plan-element"
      onMouseDown={handleMouseDown}
      onMouseUp={handleMouseUp}
      style={style}
    >
      {/* Rotated Content */}
      <div
        style={{
          transform: `rotate(${element.rotation || 0}deg)`,
          transformOrigin: 'center center',
          width: '100%',
          height: '100%',
          position: 'relative',
        }}
      >
        {element.type === 'table' ? (
          <Table
            numberOfGuests={element.capacity}
            tableNumber={tableNumber}
            rotate={() => rotateElement(element.id)}
            duplicate={() => duplicateElement(element.id)}
            deleteTable={() => deleteElement(element.id)}
            editTable={() => openModal(element)}
            showActions={showActions}
            rotation={element.rotation || 0} // Pass rotation to Table
            id={`table-${element.id}`} // Pass id to Table component
          />
        ) : element.type === 'wall' ? (
          <Walls length={element.width / 20 + 1} />
        ) : null}
      </div>
      {/* Action Buttons are handled within Table component */}
    </div>
  );
};

export default FloorPlanElement;


--- Tables/TableEditor/Hooks/useElementsActions.js ---
// hooks/useElementActions.js
import { useCallback } from 'react';

const useElementActions = (
  setElements,
  setLines,
  floorPlanSize,
  nextTableNumber,
  setNextTableNumber,
  api
) => {
  const addElement = useCallback(
    (element) => {
      setElements((prevElements) => [...prevElements, element]);

      // Save the new element to API
      const saveElement = async () => {
        try {
          await api.post(`${window.baseDomain}api/tables`, element);
        } catch (error) {
          console.error('Error saving element:', error);
        }
      };

      if (element.type !== 'line') {
        saveElement();
      }
    },
    [setElements, api]
  );

  const updateElement = useCallback(
    (updatedElement) => {
      setElements((prevElements) =>
        prevElements.map((el) => (el.id === updatedElement.id ? updatedElement : el))
      );

      // Save the updated element to API
      const saveElement = async () => {
        try {
          if (updatedElement.type === 'line') {
            // Lines are handled separately
            return;
          }
          if (updatedElement._id) {
            // Existing table: use PUT request
            await api.put(`${window.baseDomain}api/tables/${updatedElement._id}`, updatedElement);
          } else {
            // New table: use POST request
            await api.post(`${window.baseDomain}api/tables`, updatedElement);
          }
        } catch (error) {
          console.error('Error updating element:', error);
        }
      };

      if (updatedElement.type !== 'line') {
        saveElement();
      }
    },
    [setElements, api]
  );

  const moveElement = useCallback((id, x, y) => {
    setElements((prevElements) =>
      prevElements.map((el) =>
        el.id === id
          ? {
              ...el,
              x,
              y,
            }
          : el
      )
    );

    // Save the moved element to API
    const saveMove = async () => {
      try {
        const movedElement = { id, x, y };
        await api.put(`${window.baseDomain}api/tables/${id}`, movedElement);
      } catch (error) {
        console.error('Error moving element:', error);
      }
    };

    saveMove();
  }, [setElements, api]);

  const rotateElement = useCallback((id) => {
    setElements((prevElements) =>
      prevElements.map((el) =>
        el.id === id
          ? {
              ...el,
              rotation: (el.rotation || 0) + 90, // Rotate by 90 degrees
            }
          : el
      )
    );

    // Save the rotated element to API
    const saveRotate = async () => {
      try {
        const rotatedElement = { rotation: 90 };
        await api.put(`${window.baseDomain}api/tables/${id}`, rotatedElement);
      } catch (error) {
        console.error('Error rotating element:', error);
      }
    };

    saveRotate();
  }, [setElements, api]);

  const duplicateElement = useCallback(
    (id) => {
      setElements((prevElements) => {
        const elementToDuplicate = prevElements.find((el) => el.id === id);
        if (!elementToDuplicate) return prevElements;
        const newId = Date.now();
        const newElement = {
          ...elementToDuplicate,
          id: newId,
          x: Math.min(
            elementToDuplicate.x + 20,
            floorPlanSize.width - elementToDuplicate.width
          ),
          y: Math.min(
            elementToDuplicate.y + 20,
            floorPlanSize.height - elementToDuplicate.height
          ),
          name:
            elementToDuplicate.type === 'table'
              ? `T${nextTableNumber}`
              : `${elementToDuplicate.subtype.charAt(0).toUpperCase() +
                  elementToDuplicate.subtype.slice(1)} Decoration ${newId}`,
          rotation: elementToDuplicate.rotation || 0,
        };

        if (elementToDuplicate.type === 'table') {
          newElement.tableNumber = nextTableNumber;
          setNextTableNumber((prev) => prev + 1);
        }

        // Save the duplicated element to API
        const saveDuplicate = async () => {
          try {
            await api.post(`${window.baseDomain}api/tables`, newElement);
          } catch (error) {
            console.error('Error duplicating element:', error);
          }
        };

        saveDuplicate();

        return [...prevElements, newElement];
      });
    },
    [setElements, floorPlanSize.width, floorPlanSize.height, nextTableNumber, setNextTableNumber, api]
  );

  const deleteElement = useCallback(
    (id) => {
      setElements((prevElements) => prevElements.filter((el) => el.id !== id));
      // Remove any lines connected to this element
      setLines((prevLines) => prevLines.filter((line) => line.from !== id && line.to !== id));

      // Delete the element from API
      const deleteFromApi = async () => {
        try {
          await api.delete(`${window.baseDomain}api/tables/${id}`);
        } catch (error) {
          console.error('Error deleting element:', error);
        }
      };

      deleteFromApi();
    },
    [setElements, setLines, api]
  );

  return {
    addElement,
    updateElement,
    moveElement,
    rotateElement,
    duplicateElement,
    deleteElement,
  };
};

export default useElementActions;


--- Tables/TableEditor/Hooks/useLineActions.js ---
// hooks/useLineActions.js
import { useCallback } from 'react';

const useLineActions = (setLines, api) => {
  const addLine = useCallback(
    (line) => {
      setLines((prevLines) => [...prevLines, line]);

      // Save the new line to API
      const saveLine = async () => {
        try {
          await api.post(`${window.baseDomain}api/tables`, line);
        } catch (error) {
          console.error('Error saving line:', error);
        }
      };

      saveLine();
    },
    [setLines, api]
  );

  const deleteLine = useCallback(
    (lineId) => {
      setLines((prevLines) => prevLines.filter((line) => line.id !== lineId));

      // Delete the line from API
      const deleteFromApi = async () => {
        try {
          await api.delete(`${window.baseDomain}api/tables/${lineId}`);
        } catch (error) {
          console.error('Error deleting line:', error);
        }
      };

      deleteFromApi();
    },
    [setLines, api]
  );

  return {
    addLine,
    deleteLine,
  };
};

export default useLineActions;


--- Tables/TableEditor/LinesLayer.js ---
// LinesLayer.js
import React, { useRef } from 'react';
import './css/floorPlan.css'; // Ensure to import necessary styles

const LinesLayer = ({
  elements,
  lines,
  isDrawingLine,
  startTableId,
  currentMousePosition,
  handleLineClick,
}) => {
  const lineRefs = useRef({});

  const renderLines = () => {
    const renderedLines = [];

    // Render existing lines
    lines.forEach((line) => {
      const fromElement = elements.find((el) => el.id === line.from);
      const toElement = elements.find((el) => el.id === line.to);

      if (!fromElement || !toElement) return;

      const fromCenter = getElementCenter(fromElement);
      const toCenter = getElementCenter(toElement);

      // Apply translation: 10px left and 50px down
      const translatedFromX = fromCenter.x - 10;
      const translatedFromY = fromCenter.y + 50;
      const translatedToX = toCenter.x - 10;
      const translatedToY = toCenter.y + 50;

      const length = Math.hypot(translatedToX - translatedFromX, translatedToY - translatedFromY);
      const angle = Math.atan2(translatedToY - translatedFromY, translatedToX - translatedFromX) * (180 / Math.PI);

      const lineStyle = {
        position: 'absolute',
        left: `${translatedFromX}px`,
        top: `${translatedFromY}px`,
        width: `${length}px`,
        height: '2px',
        backgroundColor: '#d2b48c', // Same as table border color
        transform: `rotate(${angle}deg)`,
        transformOrigin: '0 0',
        pointerEvents: 'auto',
        cursor: 'pointer',
        zIndex: 0,
      };

      renderedLines.push(
        <div
          key={line.id}
          className="table-plan-component line"
          style={lineStyle}
          onClick={() => handleLineClick(line.id)}
          ref={(el) => {
            lineRefs.current[line.id] = el;
          }}
        ></div>
      );
    });

    // Render the line being drawn
    if (isDrawingLine && startTableId) {
      const fromElement = elements.find((el) => el.id === startTableId);
      if (fromElement) {
        const fromCenter = getElementCenter(fromElement);

        // Apply translation: 10px left and 50px down
        const translatedFromX = fromCenter.x - 10;
        const translatedFromY = fromCenter.y + 50;

        const toX = currentMousePosition.x - 10;
        const toY = currentMousePosition.y + 50;

        const length = Math.hypot(toX - translatedFromX, toY - translatedFromY);
        const angle = Math.atan2(toY - translatedFromY, toX - translatedFromX) * (180 / Math.PI);

        const lineStyle = {
          position: 'absolute',
          left: `${translatedFromX}px`,
          top: `${translatedFromY}px`,
          width: `${length}px`,
          height: '2px',
          backgroundColor: '#d2b48c',
          transform: `rotate(${angle}deg)`,
          transformOrigin: '0 0',
          pointerEvents: 'none',
          zIndex: 0,
        };

        renderedLines.push(
          <div key="drawing-line" className="table-plan-component line" style={lineStyle}></div>
        );
      }
    }

    return renderedLines;
  };

  const getElementCenter = (element) => {
    const { x, y, width, height, rotation } = element;

    // Calculate center based on current position and size
    const centerX = x + width / 2;
    const centerY = y + height / 2;

    return { x: centerX, y: centerY };
  };

  return <>{renderLines()}</>;
};

export default LinesLayer;


--- Tables/TableEditor/Sidebar.js ---
// Sidebar.js
import React, { useState, useRef } from 'react';
import { useDrag } from 'react-dnd';
import { motion } from 'framer-motion';
import Table from './Table.js';
import Walls from './Walls.js';
import './css/sidebar.css';

const TableItem = ({ table }) => {
  const [{ isDragging }, drag] = useDrag(() => ({
    type: 'ITEM',
    item: {
      elementType: 'table',
      subtype: 'round',
      width: 70,
      height: 70,
      capacity: table.numberOfGuests,
    },
    collect: (monitor) => ({
      isDragging: !!monitor.isDragging(),
    }),
  }), [table]);

  return (
    <div className="table-plan-component item" ref={drag} style={{ opacity: isDragging ? 0.5 : 1 }}>
      {/* Pass showActions={false} to hide action buttons in Sidebar */}
      <Table numberOfGuests={table.numberOfGuests} showActions={false} />
      <div className="table-plan-component item-info">
        <p>Tafel {table.id}</p>
        <p>Gasten: {table.numberOfGuests}</p>
      </div>
    </div>
  );
};

const WallItem = ({ wall }) => {
  const [{ isDragging }, drag] = useDrag(() => ({
    type: 'ITEM',
    item: {
      elementType: 'wall',
      subtype: 'wall',
      width: wall.length * 20,
      height: 20,
    },
    collect: (monitor) => ({
      isDragging: !!monitor.isDragging(),
    }),
  }), [wall]);

  return (
    <div className="table-plan-component item" ref={drag} style={{ opacity: isDragging ? 0.5 : 1 }}>
      <Walls length={wall.length} />
      <div className="table-plan-component item-info">
        <p>Muur {wall.id}</p>
        <p>Lengte: {wall.length} eenheden</p>
      </div>
    </div>
  );
};

const Sidebar = ({ tables, walls }) => {
  const [activeTab, setActiveTab] = useState('tables');
  const [searchTerm, setSearchTerm] = useState('');
  const [pendingTab, setPendingTab] = useState(null);

  const tablesRef = useRef();
  const wallsRef = useRef();

  const isIframe = typeof window !== 'undefined' && window.isIframe;

  const tabs = [
    { id: 'tables', label: 'Tafels', title: "Beheer Tafels" },
    { id: 'walls', label: 'Muren', title: "Beheer Muren" },
  ];

  const filteredTables = tables.filter(
    (table) =>
      table.id.toString().includes(searchTerm) ||
      table.numberOfGuests.toString().includes(searchTerm)
  );

  const filteredWalls = walls.filter(
    (wall) =>
      wall.id.toString().includes(searchTerm) ||
      wall.length.toString().includes(searchTerm)
  );

  const handleTabClick = async (tabId, tabTitle) => {
    let currentRef;
    if (activeTab === 'tables') {
      currentRef = tablesRef;
    } else if (activeTab === 'walls') {
      currentRef = wallsRef;
    }

    if (currentRef && currentRef.current && currentRef.current.isDirty) {
      if (isIframe) {
        try {
          await currentRef.current.handleSave();
          setActiveTab(tabId);
        } catch (error) {
          console.error('Error saving before tab switch:', error);
        }
      } else {
        setPendingTab({ id: tabId, title: tabTitle });
      }
    } else {
      setActiveTab(tabId);
    }
  };

  return (
    <div className="table-plan-component sidebar">
      <div className="table-plan-component tabs">
        <div className="table-plan-component buttons-container">
          {tabs.map((tab) => (
            <motion.button
              key={tab.id}
              type="button"
              className={`table-plan-component tab-button ${activeTab === tab.id ? 'active' : ''}`}
              onClick={() => handleTabClick(tab.id, tab.title)}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <span className="table-plan-component tab-label">{tab.label}</span>
              {activeTab === tab.id && (
                <motion.div
                  layoutId="underline-sidebar-tabs"
                  className="table-plan-component tab-underline"
                  initial={false}
                  animate={{ opacity: 1 }}
                  transition={{ duration: 0.3 }}
                />
              )}
            </motion.button>
          ))}
        </div>
      </div>
      <div className="table-plan-component search-bar">
        <input
          type="text"
          placeholder={`Zoek ${activeTab === 'tables' ? 'Tafels' : 'Muren'}...`}
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          aria-label={`Zoek ${activeTab === 'tables' ? 'Tafels' : 'Muren'}`}
        />
      </div>
      <div className="table-plan-component items-list">
        {activeTab === 'tables' && filteredTables.length > 0 ? (
          <div className="table-plan-component grid-container">
            {filteredTables.map((table) => (
              <TableItem key={table.id} table={table} />
            ))}
          </div>
        ) : activeTab === 'walls' && filteredWalls.length > 0 ? (
          <div className="table-plan-component grid-container">
            {filteredWalls.map((wall) => (
              <WallItem key={wall.id} wall={wall} />
            ))}
          </div>
        ) : (
          <p className="table-plan-component no-results">Geen {activeTab === 'tables' ? 'tafels' : 'muren'} gevonden.</p>
        )}
      </div>
    </div>
  );
};

export default Sidebar;


--- Tables/TableEditor/Table.js ---
// Table.js
import React, { useState } from 'react';
import './css/table.css';
import { FaSyncAlt, FaEdit, FaClone, FaTrash } from 'react-icons/fa';

const Table = ({
  numberOfGuests,
  tableNumber,
  rotate,
  duplicate,
  deleteTable,
  editTable, // **Added editTable prop**
  showActions = true, // **Default to true**
}) => { 
  const [isHovered, setIsHovered] = useState(false);
  const isSquare = numberOfGuests === 4;

  const tableWidth = isSquare ? 70 : 70 + (numberOfGuests - 4) * 15;
  const tableHeight = 70;

  const chairsPerSide = Math.ceil(numberOfGuests / 2);

  const topChairs = [];
  const bottomChairs = [];

  for (let i = 0; i < chairsPerSide; i++) {
    topChairs.push(i);
    bottomChairs.push(i);
  }

  return (
    <div
      className="table-plan-component table-container"
      style={{ width: `${tableWidth}px`, height: `${tableHeight + 80}px` }}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {/* Action Buttons */}
      {showActions && isHovered && (
        <div className="table-plan-component action-buttons">
          <button
            className="table-plan-component action-button rotate-button"
            onClick={rotate}
            aria-label="Rotate Table"
          >
            <FaSyncAlt color="#555555" />
          </button>
          <button
            className="table-plan-component action-button duplicate-button"
            onClick={editTable}
            aria-label="Edit Table"
          >
            <FaEdit color="#555555" />
          </button>
          <button
            className="table-plan-component action-button duplicate-button"
            onClick={duplicate}
            aria-label="Duplicate Table"
          >
            <FaClone color="#555555" />
          </button>
          <button
            className="table-plan-component action-button delete-button"
            onClick={deleteTable}
            aria-label="Delete Table"
          >
            <FaTrash color="red" />
          </button>
        </div>
      )}
      <div
        className="table-plan-component chairs top-chairs"
        style={{
          width: `${tableWidth}px`,
        }}
      >
        {topChairs.slice(0, Math.floor(numberOfGuests / 2)).map((chair, index) => (
          <div key={`top-${index}`} className="table-plan-component chair"></div>
        ))}
      </div>
      <div
        className="table-plan-component table"
        style={{
          width: `${tableWidth}px`,
          height: `${tableHeight}px`,
        }}
      ></div>
      <div
        className="table-plan-component chairs bottom-chairs"
        style={{
          width: `${tableWidth}px`,
        }}
      >
        {bottomChairs.slice(0, Math.ceil(numberOfGuests / 2)).map((chair, index) => (
          <div key={`bottom-${index}`} className="table-plan-component chair"></div>
        ))}
      </div>
      {/* **Render the table number if it exists** */}
      {tableNumber && (
        <div className="table-plan-component table-number">T{tableNumber}</div>
      )}
    </div>
  );
};

export default Table;


--- Tables/TableEditor/TableEditModalContent.js ---
// TableEditModalContent.js
import React, { useState } from 'react';
import './css/tableEditModalContent.css';

const TableEditModalContent = ({ element, onSave, onClose }) => {
  const [tableNumber, setTableNumber] = useState(element.tableNumber || '');
  const [name, setName] = useState(element.name || '');
  const [shape, setShape] = useState(element.shape || 'rond');
  const [minCapacity, setMinCapacity] = useState(element.minCapacity || 1);
  const [maxCapacity, setMaxCapacity] = useState(element.maxCapacity || 10);
  const [priority, setPriority] = useState(element.priority || 'Medium');

  const handleSave = () => {
    const updatedElement = {
      ...element,
      tableNumber,
      name,
      shape,
      minCapacity,
      maxCapacity,
      priority,
    };
    onSave(updatedElement);
  };

  return (
    <div className="table-edit-modal-content">
      <h2>Bewerk Tafel</h2>
      <div className="settings-form">
        <div className="form-group">
          <label>Tafelnummer</label>
          <div className="input-container">
            <input
              type="text"
              value={tableNumber}
              onChange={(e) => setTableNumber(e.target.value)}
              placeholder="Voer het tafelnummer in"
            />
          </div>
        </div>
        <div className="form-group">
          <label>Naam</label>
          <div className="input-container">
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder="Voer de naam in"
            />
          </div>
        </div>
        <div className="form-group">
          <label>Vorm</label>
          <div className="input-container">
            <select value={shape} onChange={(e) => setShape(e.target.value)}>
              <option value="rond">Rond</option>
              <option value="vierkant">Vierkant</option>
              <option value="metStoelen">Met Stoelen</option>
            </select>
          </div>
        </div>
        <div className="form-group">
          <label>Min capaciteit</label>
          <div className="input-container">
            <input
              type="number"
              value={minCapacity}
              onChange={(e) => setMinCapacity(parseInt(e.target.value, 10))}
              min="1"
              placeholder="Minimum aantal gasten"
            />
          </div>
        </div>
        <div className="form-group">
          <label>Max capaciteit</label>
          <div className="input-container">
            <input
              type="number"
              value={maxCapacity}
              onChange={(e) => setMaxCapacity(parseInt(e.target.value, 10))}
              min={minCapacity}
              placeholder="Maximum aantal gasten"
            />
          </div>
        </div>
        <div className="form-group">
          <label>Prioriteit</label>
          <div className="input-container">
            <select value={priority} onChange={(e) => setPriority(e.target.value)}>
              <option value="metVoorangInvullen">Met Voorang Invullen</option>
              <option value="snellerInvullen">Sneller Invullen</option>
              <option value="tragerInvullen">Trager Invullen</option>
              <option value="alsLaatsteIndelen">Als Laatste Indelen</option>
            </select>
          </div>
        </div>
        <button className="settings-button save-button" onClick={handleSave}>
          Opslaan
        </button>
      </div>
    </div>
  );
};

export default TableEditModalContent;


--- Tables/TableEditor/Walls.js ---
// Walls.js
import React from 'react';
import './css/walls.css';

const Walls = ({ length }) => {
  const wallWidth = (length - 1) * 20;
  const wallHeight = 20;

  return (
    <div
      className="table-plan-component walls-container"
      style={{ width: `${wallWidth}px`, height: `${wallHeight}px` }}
    >
      <div className="table-plan-component wall"></div>
    </div>
  );
};

export default Walls;


--- Tables/TableEditor/css/app.css ---
/* css/app.css */

.table-plan-component .app-container {
  display: flex;
  flex-direction: row;
  height: 100vh;
  width: 100vw;
  box-sizing: border-box;
}

.table-plan-component .floor-plan {
  flex: 3;
  margin-right: 20px;
  background-color: #ffffff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}


.table-plan-component .floor-plan-element {
  z-index: 1; /* Tables are on top */
}

.table-plan-component .line {
  position: absolute;
  background-color: #d2b48c;
  height: 2px;
  z-index: 0; /* Lines are below */
  pointer-events: auto;
  cursor: pointer;
}


--- Tables/TableEditor/css/floorPlan.css ---
/* css/floorplan.css */

.table-plan-component .floor-plan {
  position: relative;
  width: 100%;
  height: 100%;
  background-color: #ffffff;
  border: 2px solid #ccc;
  box-sizing: border-box;
  overflow: hidden;
  background-image:
    linear-gradient(to right, #ddd 1px, transparent 1px),
    linear-gradient(to bottom, #ddd 1px, transparent 1px);
  background-size: 50px 50px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  transition: width 0.2s, height 0.2s;
}

.table-plan-component .resizable-floor-plan {
  position: relative;
  width: 100%;
  height: 100%;
}

.table-plan-component .alignment-line {
  position: absolute;
  background-color: red;
  z-index: 100;
}


--- Tables/TableEditor/css/sidebar.css ---
/* css/sidebar.css */

.table-plan-component .sidebar {
  width: 350px;
  position: fixed;
  height: calc(100% - 60px);
  right: 0;
  top: 60px;
  background-color: rgb(220, 220, 220);
  box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
  padding: 20px;
  overflow-y: auto;
  z-index: 1000;
}

.table-plan-component .tabs {
  width: 100%;
  align-items: center;
  justify-content: center;
  display: flex;
  margin-bottom: 30px;
  max-width: 800px;
  margin: 0 auto;
}

.table-plan-component .tabs .buttons-container {
  display: flex;
}

.table-plan-component .tabs .tab-button {
  position: relative;
  padding: 10px 20px;
  background: none;
  border: none;
  outline: none;
  cursor: pointer;
  font-size: 16px;
  color: #333;
  transition: color 0.3s;
}

.table-plan-component .tabs .tab-button.active {
  color: var(--color-blue, var(--color-blue));
}

.table-plan-component .tabs .tab-button:hover {
  color: #555;
}

.table-plan-component .tabs .tab-underline {
  position: absolute;
  bottom: -2px;
  left: 0;
  right: 0;
  height: 2px;
  background-color: var(--color-blue, var(--color-blue));
  border-radius: 5px;
}

.table-plan-component .search-bar {
  margin-bottom: 20px;
  margin-top: 20px;
}

.table-plan-component .search-bar input {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #cccccc;
  border-radius: 4px;
  font-size: 14px;
}

.table-plan-component .items-list {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.table-plan-component .grid-container {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 20px;
}

.table-plan-component .item {
  display: flex;
  flex-direction: column;
  align-items: center;
  border: 1px solid #e0e0e0;
  padding: 10px;
  border-radius: 8px;
  background-color: #fafafa;
  transition: box-shadow 0.2s, transform 0.2s;
}

.table-plan-component .item:hover {
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  transform: translateY(-2px);
}

.table-plan-component .item-info {
  margin-top: 10px;
  text-align: center;
}

.table-plan-component .item-info p {
  margin: 2px 0;
  font-size: 14px;
  color: #555555;
}

.table-plan-component .no-results {
  text-align: center;
  color: #888888;
}

.table-plan-component .unsaved-changes-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
}

.table-plan-component .unsaved-changes-modal .modal-content {
  background-color: #fff;
  padding: 30px 20px;
  border-radius: 5px;
  width: 90%;
}

.table-plan-component .unsaved-changes-modal .modal-content p {
  font-size: 16px;
  margin-bottom: 30px;
  text-align: center;
}

.table-plan-component .unsaved-changes-modal .modal-buttons {
  display: flex;
  justify-content: center;
}

.table-plan-component .unsaved-changes-modal .modal-buttons .cancel-button,
.table-plan-component .unsaved-changes-modal .modal-buttons .discard-button {
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  border: none;
  position: relative;
  border-radius: 5px;
}

.table-plan-component .unsaved-changes-modal .modal-buttons .cancel-button {
  margin-right: 10px;
  background-color: #f0f0f0;
  color: #333333;
}

@media (max-width: 768px) {
  .table-plan-component .grid-container {
    grid-template-columns: 1fr;
  }
}

--- Tables/TableEditor/css/table.css ---
/* css/table.css */

.table-plan-component .table-container {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 80px;
}

.table-plan-component .table {
  background-color: #f5f5dc;
  border: 2px solid #d2b48c;
  border-radius: 8px;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 2;
}

.table-plan-component .chairs {
  display: flex;
  justify-content: center;
  gap: 10px;
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  z-index: 1;
}

.table-plan-component .top-chairs {
  top: 0;
  transform: translate(-50%, 150%);
}

.table-plan-component .bottom-chairs {
  bottom: 0;
  transform: translate(-50%, -150%);
}

.table-plan-component .chair {
  width: 20px;
  height: 20px;
  background-color: #f5f5dc;
  border: 2px solid #d2b48c;
  border-radius: 50%;
}

/* **Styles for the table number** */
.table-plan-component .table-number {
  position: absolute;
  bottom: 5px;
  right: 5px; /* Changed from left to right */
  background-color: rgba(255, 255, 255, 0.7);
  padding: 2px 4px;
  border-radius: 3px;
  font-size: 12px;
  color: #333;
  pointer-events: none; /* Ensure the number doesn't interfere with dragging */
  transition: transform 0.2s;
}

/* **Styles for action buttons** */
.table-plan-component .action-buttons { 
  position: absolute;
  top: -20px; /* Position above the table */
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 10px;
  opacity: 0; /* Hidden by default */
  pointer-events: none; /* Prevent buttons from blocking table interactions */
}

.table-plan-component .table-container:hover .action-buttons {
  opacity: 1;
  pointer-events: auto;
}

.table-plan-component .action-buttons .action-button {
  width: 35px; /* Slightly larger */
  height: 35px;
  background-color: #ffffff;
  border: none;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  opacity: 1; /* Ensure buttons are fully opaque */
  transform: scale(1); /* No scaling */
  /* Removed animation properties */
}

.table-plan-component .action-buttons .action-button:hover {
  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
}


--- Tables/TableEditor/css/tableEditModalContent.css ---
/* css/tableEditModalContent.css */

.table-edit-modal-content {
	display: flex;
	justify-content: center;
	align-items: center;
	flex-direction: column;
  }
  
  .table-edit-modal-content h2 {
	margin-top: 0;
	margin-bottom: 20px;
	font-size: 1.5rem;
	color: #333;
  }
  
  .table-edit-modal-content .settings-form {
	display: flex;
	flex-direction: column;
	gap: 15px;
	width: 100%;
  }
  
  .table-edit-modal-content .form-group {
	display: flex;
	flex-direction: column;
  }
  
  .table-edit-modal-content label {
	text-align: left;
	margin-bottom: 5px;
	font-weight: 500;
	color: #555;
  }
  
  .table-edit-modal-content .input-container {
	position: relative;
	width: 100%;
  }
  
  .table-edit-modal-content .input-container input,
  .table-edit-modal-content .input-container select {
	width: 100%;
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: 5px;
	font-size: 1rem;
	transition: border-color 0.3s ease;
  }
  
  .table-edit-modal-content .input-container input:focus,
  .table-edit-modal-content .input-container select:focus {
	border-color: #0056b3;
	outline: none;
  }
  
  .table-edit-modal-content .settings-button {
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	display: flex;
	align-items: center;
	justify-content: center;
	gap: 10px;
	transition: background-color 0.3s ease;
	width: 100%;
  }
  
  .table-edit-modal-content .settings-button:hover {
	background-color: #0056b3;
  }
  
  /* Tooltip styles */
  .table-edit-modal-content .label-with-tooltip {
	display: flex;
	align-items: center;
  }
  
  .table-edit-modal-content .label-with-tooltip label {
	margin-right: 5px;
  }
  
  .table-edit-modal-content .button-with-tooltip {
	position: relative;
	display: inline-block;
  }
  
  .table-edit-modal-content .button-with-tooltip .tooltip {
	display: none; /* Initially hidden */
	position: absolute;
	bottom: 125%; /* Position above the button */
	left: 50%;
	transform: translateX(-50%);
	width: 400px; /* Set fixed width */
	background-color: black;
	color: white;
	padding: 10px 15px; /* Increased padding for better spacing */
	border-radius: 4px;
	white-space: normal; /* Allow text to wrap */
	font-size: 14px;
	z-index: 1000;
	opacity: 0;
	transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
  }
  
  .table-edit-modal-content .button-with-tooltip .tooltip::before {
	content: '';
	position: absolute;
	top: 100%;
	left: 50%;
	transform: translateX(-50%);
	border-width: 5px;
	border-style: solid;
	border-color: black transparent transparent transparent;
  }
  
  .table-edit-modal-content .button-with-tooltip:hover .tooltip {
	display: block;
	opacity: 1;
	transform: translateX(-50%) translateY(-5px);
  }
  
  .table-edit-modal-content .button-with-tooltip svg {
	cursor: pointer;
	color: #555;
	font-size: 16px;
  }
  
  .table-edit-modal-content .button-with-tooltip svg:hover {
	color: #000;
  }
  

--- Tables/TableEditor/css/walls.css ---
/* css/walls.css */

.table-plan-component .walls-container {
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 10px;
}

.table-plan-component .wall {
  width: 100%;
  height: 100%;
  background-color: #8b4513;
  border: 2px solid #654321;
  border-radius: 4px;
}

--- Tables/TableEditor/index.js ---
// index.js
import React from 'react';
import FloorPlan from './FloorPlan.js';
import Sidebar from './Sidebar.js';
import { withHeader } from '../../../Components/Structural/Header/index.js';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import './css/app.css';

const TableEditor = () => {
  const tables = [
    { id: 1, numberOfGuests: 1 },
    { id: 2, numberOfGuests: 2 },
    { id: 3, numberOfGuests: 3 },
    { id: 4, numberOfGuests: 4 },
    { id: 5, numberOfGuests: 5 },
    { id: 6, numberOfGuests: 6 },
    { id: 7, numberOfGuests: 7 },
    { id: 8, numberOfGuests: 8 },
  ];

  const walls = [
    { id: 1, length: 3 },
    { id: 2, length: 5 },
    { id: 3, length: 2 },
    { id: 4, length: 4 },
    { id: 5, length: 6 },
  ];

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="table-plan-component">
        <div className="app-container">
          <FloorPlan />
          <Sidebar tables={tables} walls={walls} />
        </div>
      </div>
    </DndProvider>
  );
};

export default withHeader(TableEditor);


--- Tables/TableList/TableGroupRow.js ---
// TableGroupRow.js
import React from 'react';
import { FaEllipsisV } from 'react-icons/fa';

const TableGroupRow = ({
  line,
  tableOptions,
  openTooltipLineId,
  toggleTooltipLine,
  handleLineInputChange,
  handleSaveLine,
  handleDeleteLine,
}) => {
  return (
    <tr>
      <td>
        <select
          value={line.from || ''}
          onChange={(e) =>
            handleLineInputChange(line.id, 'from', e.target.value)
          }
        >
          <option value="">Selecteer Tafel</option>
          {tableOptions.map((table) => (
            <option key={table.value} value={table.value}>
              {table.label}
            </option>
          ))}
        </select>
      </td>
      <td>
        <select
          value={line.to || ''}
          onChange={(e) =>
            handleLineInputChange(line.id, 'to', e.target.value)
          }
        >
          <option value="">Selecteer Tafel</option>
          {tableOptions.map((table) => (
            <option key={table.value} value={table.value}>
              {table.label}
            </option>
          ))}
        </select>
      </td>
      <td className="actions-column">
        <button
          className="standard-button blue"
          onClick={() => handleSaveLine(line)}
        >
          Opslaan
        </button>
      </td>
      <td className="ellipsis-column">
        <div className="ellipsis-container">
          <FaEllipsisV
            className="ellipsis-icon"
            onClick={() => toggleTooltipLine(line.id)}
          />
          {openTooltipLineId === line.id && (
            <div className="tooltip-container">
              <div
                className="tooltip-item delete-item"
                onClick={() => handleDeleteLine(line)}
              >
                Verwijderen
              </div>
            </div>
          )}
        </div>
      </td>
    </tr>
  );
};

export default TableGroupRow;


--- Tables/TableList/TableList.js ---
// TablesList.js
import React, { useState, useEffect } from 'react';
import './css/tableList.css';
import useApi from '../../../Hooks/useApi';
import useNotification from '../../../Components/Notification';
import TableRow from './TableRow';
import TableGroupRow from './TableGroupRow';

const TablesList = () => {
  const api = useApi();
  const { triggerNotification, NotificationComponent } = useNotification();

  const [tables, setTables] = useState([]);
  const [lines, setLines] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);

  const [openTooltipTableId, setOpenTooltipTableId] = useState(null);
  const [openTooltipLineId, setOpenTooltipLineId] = useState(null);

  useEffect(() => {
    const fetchTablesAndLines = async () => {
      try {
        console.log("TableList GET");
        const data = await api.get(`${window.baseDomain}api/tables`, { noCache: true });
        if (Array.isArray(data)) {
          const elementsData = data.filter((item) => item.type !== 'line');
          const linesData = data.filter((item) => item.type === 'line');
          setTables(elementsData);
          setLines(linesData);
        } else if (data && Array.isArray(data.tables)) {
          const elementsData = data.tables.filter((item) => item.type !== 'line');
          const linesData = data.tables.filter((item) => item.type === 'line');
          setTables(elementsData);
          setLines(linesData);
        } else {
          setTables([]);
          setLines([]);
        }
        setLoading(false);
      } catch (error) {
        console.error('Error fetching tables:', error);
        setError(true);
        setLoading(false);
      }
    };

    fetchTablesAndLines();
  }, [api]);

  // Handle changes to table fields
  const handleTableInputChange = (id, field, value) => {
    setTables((prevTables) =>
      prevTables.map((table) => (table.id === id ? { ...table, [field]: value } : table))
    );
  };

  // Handle changes to line fields
  const handleLineInputChange = (id, field, value) => {
    setLines((prevLines) =>
      prevLines.map((line) => (line.id === id ? { ...line, [field]: value } : line))
    );
  };

  // Handle deletion of a table and related tafelgroepen
  const handleDeleteTable = async (table) => {
    try {
      if (table._id) {
        // Delete the table
        await api.delete(`${window.baseDomain}api/tables/${table._id}`);
        setTables((prevTables) => prevTables.filter((t) => t.id !== table.id));
        triggerNotification('Tafel succesvol verwijderd', 'success');

        // Find and delete related tafelgroepen
        const relatedLines = lines.filter(
          (line) => line.from === table.id || line.to === table.id
        );

        for (const line of relatedLines) {
          if (line._id) {
            await api.delete(`${window.baseDomain}api/tables/${line._id}`);
            setLines((prevLines) => prevLines.filter((l) => l.id !== line.id));
            triggerNotification('Gerelateerde tafelgroep succesvol verwijderd', 'success');
          }
        }
      }
    } catch (error) {
      console.error('Error deleting table:', error);
      triggerNotification('Fout bij het verwijderen van de tafel', 'error');
    }
  };

  // Handle deletion of a tafelgroep (line)
  const handleDeleteLine = async (line) => {
    try {
      if (line._id) {
        // Existing line, use DELETE
        await api.delete(`${window.baseDomain}api/tables/${line._id}`);
        setLines((prevLines) => prevLines.filter((l) => l.id !== line.id));
        triggerNotification('Tafelgroep succesvol verwijderd', 'success');
      }
    } catch (error) {
      console.error('Error deleting tafelgroep:', error);
      triggerNotification('Fout bij het verwijderen van de tafelgroep', 'error');
    }
  };

  // Save changes to a single table
  const handleSaveTable = async (table) => {
    try {
      if (table._id) {
        // Existing table, use PUT
        await api.put(`${window.baseDomain}api/tables/${table._id}`, table);
        triggerNotification('Tafel succesvol opgeslagen', 'success');
      } else {
        // New table, use POST
        await api.post(`${window.baseDomain}api/tables`, table);
        triggerNotification('Tafel succesvol aangemaakt', 'success');
      }
    } catch (error) {
      console.error('Error saving table:', error);
      triggerNotification('Fout bij het opslaan van de tafel', 'error');
    }
  };

  // Save changes to a single tafelgroep (line)
  const handleSaveLine = async (line) => {
    try {
      if (line._id) {
        // Existing line, use PUT
        await api.put(`${window.baseDomain}api/tables/${line._id}`, line);
        triggerNotification('Tafelgroep succesvol opgeslagen', 'success');
      } else {
        // New line, use POST
        await api.post(`${window.baseDomain}api/tables`, line);
        triggerNotification('Tafelgroep succesvol aangemaakt', 'success');
      }
    } catch (error) {
      console.error('Error saving tafelgroep:', error);
      triggerNotification('Fout bij het opslaan van de tafelgroep', 'error');
    }
  };

  // Toggle tooltip for tables
  const toggleTooltipTable = (tableId) => {
    setOpenTooltipTableId((prevId) => (prevId === tableId ? null : tableId));
  };

  // Toggle tooltip for lines
  const toggleTooltipLine = (lineId) => {
    setOpenTooltipLineId((prevId) => (prevId === lineId ? null : lineId));
  };

  // Close tooltip when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        !event.target.closest('.tooltip-container') &&
        !event.target.closest('.ellipsis-icon')
      ) {
        setOpenTooltipTableId(null);
        setOpenTooltipLineId(null);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Get table options for selection boxes
  const tableOptions = tables.map((table) => ({
    value: table.id,
    label: table.name || `Tafel ${table.tableNumber}`,
  }));

  if (loading) {
    return <div>Loading tables...</div>;
  }

  if (error) {
    return <div>Error loading tables.</div>;
  }

  return (
    <div className="tables-list-page">
      <h2 className="tables-list-title">Tafeloverzicht</h2>
      <table className="tables-list">
        <thead>
          <tr>
            <th>Tafelnummer</th>
            <th className="hide-on-mobile">Naam</th>
            <th >Min. Capaciteit</th>
            <th >Max. Capaciteit</th>
            <th className="hide-on-mobile">Vorm</th>
            <th className="hide-on-mobile">Prioriteit</th>
            <th className="actions-column">Acties</th>
            <th className="ellipsis-column"></th>
          </tr>
        </thead>
        <tbody>
          {tables.map((table) => (
            <TableRow
              key={table.id}
              table={table}
              openTooltipTableId={openTooltipTableId}
              toggleTooltipTable={toggleTooltipTable}
              handleTableInputChange={handleTableInputChange}
              handleSaveTable={handleSaveTable}
              handleDeleteTable={handleDeleteTable}
            />
          ))}
        </tbody>
      </table>

      <h2 className="tables-list-title">Tafelgroepen</h2>
      <table className="table-groups-list">
        <thead>
          <tr>
            <th>Tafel 1</th>
            <th>Tafel 2</th>
            <th className="actions-column">Acties</th>
            <th className="ellipsis-column"></th>
          </tr>
        </thead>
        <tbody>
          {lines.map((line) => (
            <TableGroupRow
              key={line.id}
              line={line}
              tableOptions={tableOptions}
              openTooltipLineId={openTooltipLineId}
              toggleTooltipLine={toggleTooltipLine}
              handleLineInputChange={handleLineInputChange}
              handleSaveLine={handleSaveLine}
              handleDeleteLine={handleDeleteLine}
            />
          ))}
        </tbody>
      </table>

      {/* Include the NotificationComponent to display notifications */}
      <NotificationComponent />
    </div>
  );
};

export default TablesList;


--- Tables/TableList/TableRow.js ---
// TableRow.js
import React from 'react';
import { FaEllipsisV } from 'react-icons/fa';

const TableRow = ({
  table,
  openTooltipTableId,
  toggleTooltipTable,
  handleTableInputChange,
  handleSaveTable,
  handleDeleteTable,
}) => {
  return (
    <tr>
      <td>
        <input
          type="text"
          value={table.tableNumber || ''}
          onChange={(e) =>
            handleTableInputChange(table.id, 'tableNumber', e.target.value)
          }
        />
      </td>
      <td>
        <input
          type="text"
          value={table.name || ''}
          onChange={(e) => handleTableInputChange(table.id, 'name', e.target.value)}
        />
      </td>
      <td className="hide-on-mobile">
        <input
          type="number"
          value={table.minCapacity || ''}
          onChange={(e) =>
            handleTableInputChange(table.id, 'minCapacity', parseInt(e.target.value, 10))
          }
        />
      </td>
      <td className="hide-on-mobile">
        <input
          type="number"
          value={table.maxCapacity || ''}
          onChange={(e) =>
            handleTableInputChange(table.id, 'maxCapacity', parseInt(e.target.value, 10))
          }
        />
      </td>
      <td className="hide-on-mobile">
        <select
          value={table.shape || ''}
          onChange={(e) => handleTableInputChange(table.id, 'shape', e.target.value)}
        >
          <option value="">Selecteer Vorm</option>
          <option value="rond">Rond</option>
          <option value="vierkant">Vierkant</option>
          <option value="metStoelen">Met Stoelen</option>
        </select>
      </td>
      <td className="hide-on-mobile">
        <select
          value={table.priority || ''}
          onChange={(e) =>
            handleTableInputChange(table.id, 'priority', e.target.value)
          }
        >
          <option value="">Selecteer Prioriteit</option>
          <option value="metVoorangInvullen">Met Voorrang Invullen</option>
          <option value="snellerInvullen">Sneller Invullen</option>
          <option value="tragerInvullen">Trager Invullen</option>
          <option value="alsLaatsteIndelen">Als Laatste Indelen</option>
        </select>
      </td>
      <td className="actions-column">
        <button
          className="standard-button blue"
          onClick={() => handleSaveTable(table)}
        >
          Opslaan
        </button>
      </td>
      <td className="ellipsis-column">
        <div className="ellipsis-container">
          <FaEllipsisV
            className="ellipsis-icon"
            onClick={() => toggleTooltipTable(table.id)}
          />
          {openTooltipTableId === table.id && (
            <div className="tooltip-container">
              <div
                className="tooltip-item delete-item"
                onClick={() => handleDeleteTable(table)}
              >
                Verwijderen
              </div>
            </div>
          )}
        </div>
      </td>
    </tr>
  );
};

export default TableRow;


--- Tables/TableList/css/tableList.css ---
/* css/tableList.css */

.tables-list-page {
	padding: 20px;
  }
  
  .tables-list-page h2 {
	margin-bottom: 20px;
	color: #333;
  }
  
  .tables-list-page .tables-list,
  .tables-list-page .table-groups-list {
	width: 100%;
	border-collapse: collapse;
	margin-bottom: 30px;
	font-size: 14px;
  }
  
  .tables-list-page th,
  .tables-list-page td {
	border: 1px solid #ddd;
	padding: 12px 15px;
	text-align: left;
  }
  
  .tables-list-page th {
	background-color: #f9f9f9;
	font-weight: bold;
	color: #555;
  }
  
  .tables-list-page tr:nth-child(even) {
	background-color: #f9f9f9;
  }
  
  .tables-list-page input[type='text'],
  .tables-list-page input[type='number'],
  .tables-list-page select {
	width: 100%;
	padding: 8px 10px;
	box-sizing: border-box;
	border: 1px solid #ccc;
	border-radius: 4px;
	font-size: 14px;
  }
  
  .tables-list-page input[type='text']:focus,
  .tables-list-page input[type='number']:focus,
  .tables-list-page select:focus {
	border-color: var(--color-blue);
	outline: none;
  }
  
  .tables-list-page .ellipsis-container {
	position: relative;
	display: inline-block;
  }
  
  .tables-list-page .ellipsis-icon {
	cursor: pointer;
	color: #a6a6a6;
	font-size: 16px;
  }
  
  .tables-list-page .tooltip-container {
	position: absolute;
	top: 100%;
	right: 0;
	transform: translateY(10px);
	background-color: white;
	border: 1px solid lightgray;
	border-radius: 5px;
	padding: 5px 0;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
	z-index: 1000;
  }
  
  .tables-list-page .tooltip-item {
	padding: 8px 15px;
	cursor: pointer;
  }
  
  .tables-list-page .tooltip-item:hover {
	background-color: #f0f0f0;
  }
  
  .tables-list-page .tooltip-item.delete-item {
	color: red;
  }
  
  .tables-list-page .tooltip-item.delete-item:hover {
	background-color: #ffe6e6;
  }
  
  .tables-list-page .actions-column {
	width: 100px; /* Adjust the width as needed */
	text-align: center;
  }
  
  .tables-list-page .ellipsis-column {
	width: 40px; /* Limit the width to the icon with some margin */
	text-align: center;
  }
  
  .tables-list-page .tables-list-title {
	font-size: 1.5rem;
	margin-bottom: 10px;
	color: #333;
  }

  
  /* Responsive Styles */
  @media (max-width: 768px) {
	.tables-list-page th,
	.tables-list-page td {
	  padding: 8px 10px;
	  font-size: 12px;
	}
	.tables-list-page .ellipsis-icon {
	  font-size: 14px;
	}
  
	/* Hide 'Vorm' and 'Prioriteit' columns on mobile */
	.tables-list-page .hide-on-mobile {
	  display: none;
	}
  
	/* Adjust actions column width on mobile */
	.tables-list-page .actions-column {
	  width: 80px;
	}
  
	.tables-list-page .ellipsis-column {
	  width: 40px;
	}
  }
  

--- Tables/TableList/index.js ---
// index.js
import TablesList from './TableList.js';
import { withHeader } from '../../../Components/Structural/Header/index.js'; // Ensure correct path

export default withHeader(TablesList);


--- Tables/TablePlan/FloorPlan.js ---
// FloorPlan.js
import React, { useRef, useEffect, useState } from 'react';
import { useDrop } from 'react-dnd';
import './css/floorPlan.css';
import { ResizableBox } from 'react-resizable';
import 'react-resizable/css/styles.css';
import FloorPlanElement from './FloorPlanElement.js';
import useApi from '../../../Hooks/useApi.js'; // Ensure correct path

const FloorPlanGeneral = ({
  reservations,
  assignReservation,
  removeReservation,
  updateNotes,
}) => {
  const floorPlanRef = useRef(null);
  const [floorPlanSize, setFloorPlanSize] = useState({ width: 800, height: 600 });
  const [tables, setTables] = useState([]);

  const api = useApi(); // Initialize useApi hook

  // Update floor plan size on mount and when resized
  useEffect(() => {
    const updateSize = () => {
      if (floorPlanRef.current) {
        const { width, height } = floorPlanRef.current.getBoundingClientRect();
        setFloorPlanSize({ width, height });
      }
    };

    // Initial size
    updateSize();

    // Update size on window resize
    window.addEventListener('resize', updateSize);

    // Cleanup
    return () => window.removeEventListener('resize', updateSize);
  }, []);

  // Load tables from API on mount
  useEffect(() => {
    const fetchTables = async () => {
      try {
        console.log("Floorplan GET");
        const data = await api.get(window.baseDomain + 'api/tables', { noCache: true });
        // Ensure that data is an array
        if (Array.isArray(data)) {
          setTables(data);
        } else if (data && Array.isArray(data.tables)) {
          // If API returns { tables: [...] }
          setTables(data.tables);
        } else {
          setTables([]); // Fallback to empty array
        }
      } catch (error) {
        console.error('Error fetching tables:', error);
        setTables([]); // Fallback to empty array on error
      }
    };

    fetchTables();
  }, [api]);

  const [, drop] = useDrop({
    accept: 'GUEST',
    drop: (item, monitor) => {
      // Dropping on the floor plan background does nothing
      // You might want to implement additional functionality here if needed
    },
  });

  return (
    <ResizableBox
      width={800}
      height={600}
      minConstraints={[400, 300]}
      maxConstraints={[1600, 1200]}
      className="resizable-floor-plan"
      onResizeStop={(e, data) => {
        // Directly set the new size without snapping
        setFloorPlanSize({ width: data.size.width, height: data.size.height });
      }}
      resizeHandles={['se']} // Optional: specify resize handles if needed
    >
      <div
        id="floor-plan-container"
        className="floor-plan"
        ref={(node) => {
          drop(node);
          floorPlanRef.current = node;
        }}
        style={{ position: 'relative', width: '100%', height: '100%' }}
      >
        {tables.map((table) => (
          <FloorPlanElement
            key={table.id}
            table={table}
            reservations={reservations.filter((res) => res.tableId === table.id)}
            assignReservation={assignReservation}
            removeReservation={removeReservation}
            updateNotes={updateNotes}
            floorPlanSize={floorPlanSize}
          />
        ))}
      </div>
    </ResizableBox>
  );
};

export default FloorPlanGeneral;


--- Tables/TablePlan/FloorPlanElement.js ---
// FloorPlanElement.js
import React from 'react';
import { useDrop } from 'react-dnd';
import Table from './Table.js';

const FloorPlanElement = ({
  table,
  reservations,
  assignReservation,
  removeReservation,
  updateNotes,
  floorPlanSize,
}) => {
  const [{ isOver, canDrop }, drop] = useDrop({
    accept: 'GUEST',
    drop: (item) => {
      assignReservation(item.id, table.id);
    },
    canDrop: (item) => {
      // Check if table can accommodate the reservation
      const currentGuests = reservations.reduce((acc, res) => acc + res.numberOfGuests, 0);
      return currentGuests + item.numberOfGuests <= table.capacity;
    },
    collect: (monitor) => ({
      isOver: monitor.isOver(),
      canDrop: monitor.canDrop(),
    }),
  });

  const isActive = isOver && canDrop;

  return (
    <div
      ref={drop}
      style={{
        position: 'absolute',
        left: `${table.x}px`,
        top: `${table.y}px`,
        border: isActive ? '2px dashed #4CAF50' : 'none', // Visual feedback
        transition: 'border 0.2s ease',
      }}
    >
      <Table
        capacity={table.capacity}
        reservations={reservations}
        tableId={table.id}
        tableName={table.name} // Display the table's name
        removeReservation={removeReservation}
        updateNotes={updateNotes}
        isActive={isActive}
      />
    </div>
  );
};

export default FloorPlanElement;


--- Tables/TablePlan/Hooks/useReservations.js ---
// src/Components/Calendar/Hooks/useReservations.js

import { useState, useEffect } from 'react';
import useApi from '../../../../Hooks/useApi';

/**
 * Custom hook to fetch and manage reservations data.
 *
 * @returns {Array} An array of reservation objects.
 */
const useReservations = () => {
  const [reservations, setReservations] = useState([]);
  const api = useApi();

  useEffect(() => {
    /**
     * Fetches reservations from the backend API and processes them.
     */
    const fetchReservations = async () => {
      try {
        // Fetch raw data from the backend API
        console.log("Tableplan GET");
        const data = await api.get(`${window.baseDomain}api/auth-reservations`, { noCache: true });

        console.log('Raw data from backend:', data);

        // Check if data is an array
        if (!Array.isArray(data)) {
          console.error('Unexpected data format: Expected an array of reservations.');
          setReservations([]);
          return;
        }

        // Process and map each reservation to the frontend format
        const mappedReservations = data.map((reservation) => {
          // Extract the reservation ID
          const id = reservation._id?.$oid || reservation._id || `unknown-${Math.random()}`;

          // Parse the number of guests
          const guests = parseInt(reservation.guests?.$numberInt || reservation.guests, 10);
          const numberOfGuests = isNaN(guests) ? 1 : guests; // Default to 1 if parsing fails

          // Extract and trim extra information
          const notes = reservation.extraInfo?.trim() || '';

          // Return the mapped reservation object
          return {
            id,
            date: reservation.date, // Ensure this is in 'YYYY-MM-DD' format or adjust as needed
            time: reservation.time, // Ensure this is in 'HH:MM' format or adjust as needed
            firstName: reservation.firstName || 'Unknown',
            lastName: reservation.lastName || 'Guest',
            numberOfGuests,
            tableId: null, // Initialize as null; will be updated when assigned
            notes,
            email: reservation.email || '',
            phone: reservation.phone || '',
            reservationType: reservation.reservationType || 'common',
            // Add other fields if necessary
          };
        });

        setReservations(mappedReservations);
      } catch (error) {
        console.error('Error fetching reservations:', error);
        setReservations([]); // Fallback to an empty array on error
      }
    };

    fetchReservations();
  }, [api]);

  return reservations;
};

export default useReservations;


--- Tables/TablePlan/Sidebar.js ---
// Sidebar.js
import React, { useState, useMemo } from 'react';
import { useDrag } from 'react-dnd';
import './css/sidebar.css';

const Sidebar = ({ reservations }) => {
  const [searchTerm, setSearchTerm] = useState('');

  // Filter reservations based on search term and only show unassigned
  const filteredReservations = useMemo(() => {
    const lowerSearch = searchTerm.toLowerCase();
    return reservations.filter(
      (guest) =>
        guest.tableId === null &&
        (guest.firstName.toLowerCase().includes(lowerSearch) ||
          guest.lastName.toLowerCase().includes(lowerSearch) ||
          guest.numberOfGuests.toString().includes(lowerSearch) ||
          guest.time.includes(lowerSearch))
    );
  }, [searchTerm, reservations]);

  // Guest Block Component
  const GuestBlock = ({ guest }) => {
    const [{ isDragging }, drag] = useDrag(
      () => ({
        type: 'GUEST',
        item: { id: guest.id, ...guest },
        collect: (monitor) => ({
          isDragging: !!monitor.isDragging(),
        }),
      }),
      [guest]
    );

    return (
      <div
        className="guest-block"
        ref={drag}
        style={{ opacity: isDragging ? 0.5 : 1 }}
      >
        <p className="guest-name">
          {guest.firstName} {guest.lastName}
        </p>
        <p className="guest-details">
          {guest.numberOfGuests}p • {guest.time}
        </p>
      </div>
    );
  };

  return (
    <div className="sidebar">
      <div className="search-bar">
        <input
          type="text"
          placeholder="Zoek gasten..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          aria-label="Zoek gasten"
        />
      </div>
      <div className="guests-list">
        {filteredReservations.length > 0 ? (
          filteredReservations.map((guest) => (
            <GuestBlock key={guest.id} guest={guest} />
          ))
        ) : (
          <p className="no-results">Geen gasten gevonden.</p>
        )}
      </div>
    </div>
  );
};

export default Sidebar;


--- Tables/TablePlan/Table.js ---
// Table.js
import React from 'react';
import { useDrag } from 'react-dnd';
import './css/table.css';

const Table = ({
  capacity,
  reservations,
  tableId,
  tableName,
  removeReservation,
  updateNotes,
  isActive,
}) => {
  const isOccupied = reservations.length > 0;

  // Calculate table width based on capacity
  const tableWidth = 70 + (capacity > 4 ? (capacity - 4) * 10 : 0);
  const tableHeight = 70;

  const chairsPerSide = Math.ceil(capacity / 2);

  const topChairs = [];
  const bottomChairs = [];

  for (let i = 0; i < chairsPerSide; i++) {
    topChairs.push(i);
    bottomChairs.push(i);
  }

  return (
    <div
      className={`table-container ${isOccupied ? 'occupied' : ''} ${isActive ? 'active' : ''}`}
      style={{ width: `${tableWidth}px`, height: `${tableHeight + 80}px` }}
    >
      {/* Tooltip */}
      {isOccupied && (
        <div className="tooltip">
          {reservations.map((res) => (
            <div key={res.id} className="tooltip-content">
              <div className="reservation-summary">
                <span className="reservation-name">
                  {res.firstName} {res.lastName}
                </span>{' '}
                ({res.numberOfGuests}p) - {res.time}
              </div>
              <div className="reservation-notes">
                <input
                  type="text"
                  placeholder="Add a note..."
                  value={res.notes}
                  onChange={(e) => updateNotes(res.id, e.target.value)}
                  aria-label={`Add a note for reservation of ${res.firstName} ${res.lastName}`}
                />
              </div>
            </div>
          ))}
        </div>
      )}

      <div
        className="table-plan-component chairs top-chairs"
        style={{
          width: `${tableWidth}px`,
        }}
      >
        {topChairs.slice(0, Math.floor(capacity / 2)).map((chair, index) => (
          <div key={`top-${index}`} className="table-plan-component chair"></div>
        ))}
      </div>
      <div
        className={`table ${isOccupied ? 'table-occupied' : ''}`}
        style={{
          width: `${tableWidth}px`,
          height: `${tableHeight}px`,
        }}
      >
        {/* Display Reservations Assigned to This Table */}
        {reservations.map((res) => (
          <Reservation
            key={res.id}
            reservation={res}
            tableId={tableId}
            removeReservation={removeReservation}
          />
        ))}
        {/* Table Name */}
        <div className="table-number">{tableName}</div>
      </div>
      <div
        className="table-plan-component chairs bottom-chairs"
        style={{
          width: `${tableWidth}px`,
        }}
      >
        {bottomChairs.slice(0, Math.ceil(capacity / 2)).map((chair, index) => (
          <div key={`bottom-${index}`} className="table-plan-component chair"></div>
        ))}
      </div>
    </div>
  );
};

// Reservation Component
const Reservation = ({ reservation, tableId, removeReservation }) => {
  const [{ isDragging }, drag] = useDrag(
    () => ({
      type: 'GUEST',
      item: { id: reservation.id, ...reservation },
      collect: (monitor) => ({
        isDragging: !!monitor.isDragging(),
      }),
    }),
    [reservation]
  );

  return (
    <div
      className="reservation"
      ref={drag}
      style={{ opacity: isDragging ? 0.5 : 1, cursor: 'grab' }}
    >
      <span className="reservation-name">
        {reservation.firstName} {reservation.lastName}
      </span>{' '}
      ({reservation.numberOfGuests}p) - {reservation.time}
    </div>
  );
};

export default Table;


--- Tables/TablePlan/TableSlots.js ---
import React, { useRef, useEffect } from 'react';
import './css/tableslots.css';

const slotToTime = (slot) => {
  const totalMinutes = (slot - 14) * 30 + 420;
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;
  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
};

const getDateInDutch = (date) => {
  const day = date.getDate();
  const months = [
    'januari', 'februari', 'maart', 'april', 'mei', 'juni',
    'juli', 'augustus', 'september', 'oktober', 'november', 'december',
  ];
  const month = months[date.getMonth()];
  return `${day} ${month}`;
};

const TableSlots = ({ selectedSlot, onSelectSlot, currentDate, floorPlanWidth }) => {
  const slotsContainerRef = useRef(null);
  const dateInDutch = getDateInDutch(currentDate);

  const handleSlotClick = (slot) => {
    if (onSelectSlot) {
      onSelectSlot(slot);
    }
    centerSelectedSlot(slot - 14);
  };

  const centerSelectedSlot = (slotIndex) => {
    const slotsContainer = slotsContainerRef.current;
    const slotWidth = 120.85;
    const containerWidth = slotsContainer.offsetWidth;
    const newScrollPosition = slotIndex * slotWidth - (containerWidth / 2 - slotWidth / 2);
    slotsContainer.scrollTo({ left: newScrollPosition, behavior: 'smooth' });
  };

  useEffect(() => {
    if (selectedSlot) {
      centerSelectedSlot(selectedSlot - 14);
    }
  }, [selectedSlot]);

  return (
    <div
      className="tableslot-timeline-container"
      ref={slotsContainerRef}
      style={{ width: `${floorPlanWidth}px` }}
    >
      <div className="tableslot-timeline" style={{ width: `${34 * 120.85}px` }}>
        {Array.from({ length: 34 }, (_, i) => i + 14).map((slot) => (
          <div
            key={slot}
            className={`tableslot-timeline-slot ${selectedSlot === slot ? 'selected' : ''}`}
            onClick={() => handleSlotClick(slot)}
          >
            <div className="tableslot-slot-content">
              <div className="tableslot-slot-subtitle">{dateInDutch}</div>
              <div className="tableslot-slot-title">{slotToTime(slot)}</div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default TableSlots;


--- Tables/TablePlan/Walls.js ---
// Walls.js
import React from 'react';
import './css/walls.css';

const Walls = ({ length }) => {
  const wallWidth = (length - 1) * 20;
  const wallHeight = 20;

  return (
    <div
      className="walls-container"
      style={{ width: `${wallWidth}px`, height: `${wallHeight}px` }}
    >
      <div className="wall"></div>
    </div>
  );
};

export default Walls;


--- Tables/TablePlan/css/app.css ---
/* app.css */

.table-display-component .app-container {
  display: flex;
  flex-direction: row;
  height: 100vh;
}

.table-display-component {
  flex: 1;
  position: relative;
}

.table-display-component .sidebar {
  width: 300px;
  background-color: #f5f5f5;
  border-left: 1px solid #ddd;
  padding: 20px;
  overflow-y: auto;
}


--- Tables/TablePlan/css/floorPlan.css ---
/* floorPlan.css */

.table-display-component .floor-plan {
  position: relative;
  width: 100%;
  height: 100%;
  background-color: #ffffff;
  border: 2px solid #ccc;
  box-sizing: border-box;
  overflow: hidden;
  background-image:
    linear-gradient(to right, #ddd 1px, transparent 1px),
    linear-gradient(to bottom, #ddd 1px, transparent 1px);
  background-size: 50px 50px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  transition: width 0.2s, height 0.2s;
}

.table-display-component .resizable-floor-plan {
  position: relative;
  width: 100%;
  height: 100%;
}

.table-display-component .alignment-line {
  position: absolute;
  background-color: red;
  z-index: 100;
}


--- Tables/TablePlan/css/sidebar.css ---
/* css/sidebar.css */

.table-display-component .sidebar {
  width: 350px;
  position: fixed;
  height: calc(100% - 60px);
  right: 0;
  top: 60px;
  background-color: rgb(220, 220, 220);
  box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
  padding: 20px;
  overflow-y: auto;
  z-index: 1000;
  border-left: 1px solid #ccc;
}

.table-display-component .search-bar {
  margin-bottom: 20px;
}

.table-display-component .search-bar input {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #cccccc;
  border-radius: 4px;
  font-size: 14px;
}

.table-display-component .guests-list {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.table-display-component .guest-block {
  background-color: #ffffff;
  border: 1px solid #e0e0e0;
  padding: 10px 15px;
  border-radius: 6px;
  cursor: grab;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: background-color 0.2s, box-shadow 0.2s;
}

.table-display-component .guest-block:hover {
  background-color: #f9f9f9;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.table-display-component .guest-name {
  margin: 0;
  font-weight: bold;
  font-size: 16px;
  color: #333333;
}

.table-display-component .guest-details {
  margin: 5px 0 0 0;
  font-size: 14px;
  color: #555555;
}

.table-display-component .no-results {
  text-align: center;
  color: #888888;
  font-size: 16px;
  margin-top: 50px;
}


--- Tables/TablePlan/css/table.css ---
/* table.css */

.table-display-component .table-container {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 80px;
}

.table-display-component .table {
  background-color: rgba(245, 245, 220, 1); /* Light color with opacity */
  border: 2px solid #d2b48c;
  border-radius: 8px;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 2;
  overflow: hidden;
  padding: 5px;
  box-sizing: border-box;
  transition: background-color 0.3s, color 0.3s, border-color 0.3s;
}

.table-display-component .table-occupied {
  background-color: rgba(76, 175, 80, 1); /* Green with opacity */
  color: #ffffff; /* White text */
  border-color: #388e3c; /* Darker green border */
}

.table-display-component .chairs {
  display: flex;
  justify-content: center;
  gap: 10px;
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  z-index: 1;
}

.table-display-component .top-chairs {
  top: 0;
  transform: translate(-50%, 150%);
}

.table-display-component .bottom-chairs {
  bottom: 0;
  transform: translate(-50%, -150%);
}

.table-display-component .chair {
  width: 20px !important;
  height: 20px !important;
  background-color: rgba(245, 245, 220, 0.8); /* Light color with opacity */
  border: 2px solid #d2b48c;
  border-radius: 50%;
  transition: background-color 0.3s, border-color 0.3s;
}

.table-display-component .occupied .chair {
  background-color: rgba(76, 175, 80, 0.8); /* Green with opacity */
  border-color: #388e3c;
}

.table-display-component .reservation {
  background-color: transparent; /* Remove background to show table's color */
  border: none;
  color: #ffffff; /* White text */
  font-size: 12px;
  padding: 0;
  margin: 0;
  cursor: grab;
}

.table-display-component .reservation:hover {
  text-decoration: underline;
}

.table-display-component .reservation-name {
  font-weight: bold;
}

/* Tooltip Styles */
.table-display-component .tooltip {
  display: none; /* Hidden by default */
  position: absolute;
  top: -10px;
  left: 50%;
  transform: translate(-50%, -100%);
  background-color: rgba(255, 255, 255, 0.95);
  color: #333333;
  padding: 10px;
  border-radius: 8px;
  font-size: 14px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  z-index: 10;
  width: 250px;
  max-height: 300px;
  overflow-y: auto;
  transition: opacity 0.3s;
}

.table-display-component .table-container:hover .tooltip {
  display: block;
}

.table-display-component .tooltip-content {
  margin-bottom: 15px;
  border-bottom: 1px solid #eee;
  padding-bottom: 10px;
}

.table-display-component .tooltip-content:last-child {
  margin-bottom: 0;
  border-bottom: none;
  padding-bottom: 0;
}

.table-display-component .reservation-summary {
  font-weight: bold;
  margin-bottom: 5px;
}

.table-display-component .reservation-notes input {
  width: 100%;
  padding: 5px;
  border: 1px solid #ccc;
  border-radius: 4px;
  margin-bottom: 10px;
  box-sizing: border-box;
}


.table-display-component .table-number {
  position: absolute;
  bottom: 5px;
  right: 5px; /* Changed from left to right */
  background-color: rgba(255, 255, 255, 0.7);
  padding: 2px 4px;
  border-radius: 3px;
  font-size: 12px;
  color: #333;
  pointer-events: none; /* Ensure the number doesn't interfere with dragging */
  transition: transform 0.2s;
}


--- Tables/TablePlan/css/tableslots.css ---
.table-display-component .tableslot-timeline-container {
	position: relative;
	overflow-x: auto;
	white-space: nowrap;
	margin: 20px 0;
	padding: 0 10px;
	height: 80px;
	-ms-overflow-style: none;  /* Internet Explorer 10+ */
	scrollbar-width: none;  /* Firefox */
  }
  
  .table-display-component .tableslot-timeline-container::-webkit-scrollbar {
	display: none;  /* Safari and Chrome */
  }
  
  .table-display-component .tableslot-timeline {
	display: inline-block;
  }
  
  
  .table-display-component .tableslot-timeline-slot {
	display: inline-block;
	width: 100px;
	height: 70px;
	background-color: #f8f9fa;
	border-radius: 12px;
	margin: 0 10px;
	transition: transform 0.3s ease, background-color 0.3s ease, width 0.3s ease, height 0.3s ease;
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	cursor: pointer;
	text-align: center;
	vertical-align: middle;
	margin-top: 5px;
	user-select: none;
	line-height: 70px; /* Center text vertically */
  }
  
  .table-display-component .tableslot-timeline-slot:hover {
	background-color: #e9ecef;
  }
  
  .table-display-component .tableslot-timeline-slot.selected {
	background-color: #0073e6;
	color: white;
	border: 1px solid #005bb5;
	width: 150px; /* Expanded width */
	line-height: normal; /* Reset line-height */
  }
  
  .table-display-component .tableslot-slot-content {
	text-align: center;
  }
  
  .table-display-component .tableslot-slot-title {
	font-size: 18px;
	font-weight: bold;
	line-height: normal; /* Reset line-height */
  }
  
  .table-display-component .tableslot-slot-subtitle {
	font-size: 14px;
	margin-top: 14px;
	color: #6c757d;
	line-height: normal; /* Reset line-height */
  }
  
  .table-display-component .tableslot-timeline-slot.selected .slot-subtitle {
	color: white;
  }
  

--- Tables/TablePlan/css/walls.css ---
/* walls.css */

.table-plan-component .walls-container {
  display: flex;
  align-items: center;
  justify-content: center;
}

.table-plan-component .wall {
  width: 100%;
  height: 100%;
  background-color: #654321;
}


--- Tables/TablePlan/index.js ---
import React, { useState, useEffect } from 'react';
import FloorPlanGeneral from './FloorPlan.js';
import Sidebar from './Sidebar.js';
import { withHeader } from '../../../Components/Structural/Header/index.js';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import useReservations from './Hooks/useReservations.js';
import './css/app.css';
import TableSlots from './TableSlots.js';

const TablePlan = () => {
  const fetchedReservations = useReservations();

  const [reservations, setReservations] = useState([]);
  const [floorPlanWidth, setFloorPlanWidth] = useState(800);

  useEffect(() => {
    if (fetchedReservations.length > 0 && reservations.length === 0) {
      setReservations(fetchedReservations);
    }
  }, [fetchedReservations, reservations]);

  const assignReservation = (reservationId, targetTableId) => {
    setReservations((prevReservations) =>
      prevReservations.map((res) =>
        res.id === reservationId ? { ...res, tableId: targetTableId } : res
      )
    );
  };

  const removeReservation = (reservationId) => {
    setReservations((prevReservations) =>
      prevReservations.map((res) =>
        res.id === reservationId ? { ...res, tableId: null } : res
      )
    );
  };

  const updateNotes = (reservationId, newNotes) => {
    setReservations((prevReservations) =>
      prevReservations.map((res) =>
        res.id === reservationId ? { ...res, notes: newNotes } : res
      )
    );
  };

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="table-display-component">
        <TableSlots
          selectedSlot={null}
          onSelectSlot={null}
          currentDate={new Date()}
          floorPlanWidth={floorPlanWidth} // Pass floor plan width
        />
        <div className="app-container">
          <FloorPlanGeneral
            reservations={reservations}
            assignReservation={assignReservation}
            removeReservation={removeReservation}
            updateNotes={updateNotes}
          />
          <Sidebar reservations={reservations} />
        </div>
      </div>
    </DndProvider>
  );
};

export default withHeader(TablePlan);


--- Uitzonderingen/ExceptionCalendar.js ---
// src/Pages/Uitzonderingen/ExceptionCalendar.js

import React, { useState, useEffect } from 'react';
import './css/exceptions.css';
import { FaChevronLeft, FaChevronRight } from 'react-icons/fa';

const ExceptionCalendar = ({ exceptions, onDateClick, monthOffset, onMonthChange }) => {
  const [calendarData, setCalendarData] = useState([]);
  const [isLoaded, setIsLoaded] = useState(false);

  const daysOfWeekShort = ['Ma', 'Di', 'Wo', 'Do', 'Vr', 'Za', 'Zo'];
  const months = [
    'Januari', 'Februari', 'Maart', 'April', 'Mei', 'Juni',
    'Juli', 'Augustus', 'September', 'Oktober', 'November', 'December',
  ];

  useEffect(() => {
    generateCalendar();
  }, [exceptions, monthOffset]);

  // Helper function to normalize dates to midnight
  const normalizeDate = (date) => {
    return new Date(date.getFullYear(), date.getMonth(), date.getDate());
  };

  const generateCalendar = () => {
    const today = new Date();
    let monthToDisplay = today.getMonth() + monthOffset;
    let yearToDisplay = today.getFullYear();

    // Adjust for year overflow
    if (monthToDisplay > 11) {
      monthToDisplay = monthToDisplay % 12;
      yearToDisplay += Math.floor((today.getMonth() + monthOffset) / 12);
    } else if (monthToDisplay < 0) {
      monthToDisplay = 12 + (monthToDisplay % 12);
      yearToDisplay -= Math.ceil(Math.abs(monthOffset) / 12);
    }

    const firstDayOfMonth = new Date(yearToDisplay, monthToDisplay, 1);
    const daysInMonth = new Date(yearToDisplay, monthToDisplay + 1, 0).getDate();

    const startDay = (firstDayOfMonth.getDay() + 6) % 7; // Adjust so Monday is 0
    const weeks = [];
    let dayCounter = 1 - startDay;

    for (let week = 0; week < 6; week++) {
      const days = [];
      for (let day = 0; day < 7; day++) {
        if (dayCounter > 0 && dayCounter <= daysInMonth) {
          const dateObj = new Date(yearToDisplay, monthToDisplay, dayCounter);
          const dateStr = dateObj.toISOString().split('T')[0];

          // Normalize dateObj
          const normalizedDateObj = normalizeDate(dateObj);

          // Get the day index (0: Sunday, 1: Monday, ..., 6: Saturday)
          const dayOfWeekIndex = normalizedDateObj.getDay();
          const dayOfWeekNames = ['zondag', 'maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag'];
          const dayName = dayOfWeekNames[dayOfWeekIndex];

          // Determine the exceptions on this date considering daysOfWeek
          const dateExceptions = exceptions.filter((exception) => {
            const startDate = new Date(exception.startDate);
            const endDate = new Date(exception.endDate);
            const exceptionDaysOfWeek = exception.daysOfWeek || [];

            // Normalize dates
            const normalizedStartDate = normalizeDate(startDate);
            const normalizedEndDate = normalizeDate(endDate);

            const dateInRange =
              normalizedDateObj >= normalizedStartDate &&
              normalizedDateObj <= normalizedEndDate;

            if (!dateInRange) {
              return false;
            }

            // If daysOfWeek is specified and not empty, check if the dayName is included
            if (exceptionDaysOfWeek.length > 0) {
              return exceptionDaysOfWeek.includes(dayName);
            } else {
              // If daysOfWeek is not specified or empty, exception applies to all dates in range
              return true;
            }
          });

          // Determine the highest priority exception type
          let exceptionType = null;
          if (dateExceptions.length > 0) {
            const typePriority = ['Opening', 'Uitzondering', 'Sluiting'];
            for (const type of typePriority) {
              if (dateExceptions.some((ex) => ex.type === type || ex.type === 'Sluitingsdag')) {
                exceptionType = type === 'Sluitingsdag' ? 'Sluiting' : type;
                break;
              }
            }
          }

          days.push(
            <td key={dayCounter} className="exceptions-page__calendar-cell">
              <div
                className={`exceptions-page__calendar-day ${
                  exceptionType ? `tag-${exceptionType.toLowerCase()}` : ''
                }`}
                onClick={() => onDateClick(dateStr)}
              >
                {dayCounter}
              </div>
            </td>
          );
        } else {
          days.push(<td key={`${week}-${day}`} className="exceptions-page__calendar-cell"></td>);
        }
        dayCounter++;
      }
      weeks.push(<tr key={week}>{days}</tr>);
    }

    setCalendarData({
      weeks,
      month: months[monthToDisplay],
      year: yearToDisplay,
    });

    setIsLoaded(true);
  };

  return (
    <div className="exceptions-page__calendar">
      <div className="exceptions-page__calendar-header">
        <FaChevronLeft
          className="exceptions-page__calendar-nav"
          onClick={() => onMonthChange(-1)}
        />
        <h3>
          {calendarData.month} {calendarData.year}
        </h3>
        <FaChevronRight
          className="exceptions-page__calendar-nav"
          onClick={() => onMonthChange(1)}
        />
      </div>
      <table className="exceptions-page__calendar-table">
        <thead>
          <tr>
            {daysOfWeekShort.map((day) => (
              <th key={day}>{day}</th>
            ))}
          </tr>
        </thead>
        <tbody>{calendarData.weeks}</tbody>
      </table>
      <div className="exceptions-page__calendar-legend">
        <span>
          <span className="exceptions-page__calendar-legend-box tag-opening"></span> Opening
        </span>
        <span>
          <span className="exceptions-page__calendar-legend-box tag-uitzondering"></span> Uitzondering
        </span>
        <span>
          <span className="exceptions-page__calendar-legend-box tag-sluiting"></span> Sluiting
        </span>
      </div>
    </div>
  );
};

export default ExceptionCalendar;


--- Uitzonderingen/ExceptionForm.js ---
// src/Pages/Uitzonderingen/ExceptionForm.js

import React from 'react';
import './css/exceptions.css';
import { shifts } from './constants';
import useExceptionForm from './Hooks/useExceptionForm';
import { getTodayDateString, getTimeOptions } from './Utils/utils';

const ExceptionForm = ({ api, triggerNotification, refreshExceptions }) => {
  const initialFormData = {
    title: '',
    type: '',
    timeframe: '',
    date: '',
    startDate: '',
    endDate: '',
    startHour: '',
    endHour: '',
    maxSeats: '',
    daysOfWeek: [],
  };

  const {
    formData,
    errors,
    handleChange,
    handleSubmit,
    startDateRef,
    endDateRef,
  } = useExceptionForm(initialFormData, api, triggerNotification, refreshExceptions);

  return (
    <form className="exceptions-page__form" onSubmit={handleSubmit}>
      <div className="exceptions-page__form-group">
        <label>Titel</label>
        <input
          type="text"
          name="title"
          value={formData.title}
          onChange={handleChange}
          placeholder="Titel"
          className="exceptions-page__input"
        />
        {errors.title && <p className="exceptions-page__error">{errors.title}</p>}
      </div>

      <div className="exceptions-page__form-group">
        <label>Type</label>
        <select
          name="type"
          value={formData.type}
          onChange={handleChange}
          className="exceptions-page__select"
        >
          <option value="">Selecteer Type</option>
          <option value="Opening">Opening</option>
          <option value="Sluiting">Sluiting</option>
          <option value="Sluitingsdag">Sluitingsdag</option>
          <option value="Sluitingsdagen">Sluitingsdagen</option>
          <option value="Uitzondering">Uitzondering</option>
        </select>
        {errors.type && <p className="exceptions-page__error">{errors.type}</p>}
      </div>

      {formData.type && formData.type !== 'Sluitingsdag' && formData.type !== 'Sluitingsdagen' && (
        <div className="exceptions-page__form-group">
          <label>Toepassing</label>
          <select
            name="timeframe"
            value={formData.timeframe}
            onChange={handleChange}
            className="exceptions-page__select"
          >
            <option value="">Selecteer Toepassing</option>
            <option value="breakfast">Ochtend</option>
            <option value="lunch">Middag</option>
            <option value="dinner">Avond</option>
          </select>
          {errors.timeframe && <p className="exceptions-page__error">{errors.timeframe}</p>}
        </div>
      )}

      {formData.type === 'Sluitingsdag' && (
        <div className="exceptions-page__form-group">
          <label>Datum</label>
          <input
            type="date"
            name="date"
            value={formData.date}
            onChange={handleChange}
            className="exceptions-page__input"
            min={getTodayDateString()}
          />
          {errors.date && <p className="exceptions-page__error">{errors.date}</p>}
        </div>
      )}

      {formData.type === 'Sluitingsdagen' && (
        <>
          <div className="exceptions-page__form-group">
            <label>Start Datum</label>
            <input
              type="date"
              name="startDate"
              value={formData.startDate}
              onChange={handleChange}
              className="exceptions-page__input"
              ref={startDateRef}
              min={getTodayDateString()}
            />
            {errors.startDate && <p className="exceptions-page__error">{errors.startDate}</p>}
          </div>

          <div className="exceptions-page__form-group">
            <label>Eind Datum</label>
            <input
              type="date"
              name="endDate"
              value={formData.endDate}
              onChange={handleChange}
              className="exceptions-page__input"
              ref={endDateRef}
              min={getTodayDateString()}
            />
            {errors.endDate && <p className="exceptions-page__error">{errors.endDate}</p>}
          </div>
        </>
      )}

      {(formData.type === 'Opening' ||
        formData.type === 'Uitzondering' ||
        formData.type === 'Sluiting') && (
        <>
          <div className="exceptions-page__form-group">
            <label>Start Datum</label>
            <input
              type="date"
              name="startDate"
              value={formData.startDate}
              onChange={handleChange}
              className="exceptions-page__input"
              ref={startDateRef}
              min={getTodayDateString()}
            />
            {errors.startDate && <p className="exceptions-page__error">{errors.startDate}</p>}
          </div>

          <div className="exceptions-page__form-group">
            <label>Eind Datum</label>
            <input
              type="date"
              name="endDate"
              value={formData.endDate}
              onChange={handleChange}
              className="exceptions-page__input"
              ref={endDateRef}
              min={getTodayDateString()}
            />
            {errors.endDate && <p className="exceptions-page__error">{errors.endDate}</p>}
          </div>
        </>
      )}

      {(formData.type === 'Opening' || formData.type === 'Uitzondering') && (
        <>
          <div className="exceptions-page__form-group">
            <label>Start Uur</label>
            <select
              name="startHour"
              value={formData.startHour}
              onChange={handleChange}
              className="exceptions-page__select"
            >
              <option value="">Selecteer Start Uur</option>
              {formData.timeframe &&
                getTimeOptions(formData.timeframe, shifts).map((time) => (
                  <option key={time} value={time}>
                    {time}
                  </option>
                ))}
            </select>
            {errors.startHour && <p className="exceptions-page__error">{errors.startHour}</p>}
          </div>

          <div className="exceptions-page__form-group">
            <label>Eind Uur</label>
            <select
              name="endHour"
              value={formData.endHour}
              onChange={handleChange}
              className="exceptions-page__select"
            >
              <option value="">Selecteer Eind Uur</option>
              {formData.timeframe &&
                getTimeOptions(formData.timeframe, shifts).map((time) => (
                  <option key={time} value={time}>
                    {time}
                  </option>
                ))}
            </select>
            {errors.endHour && <p className="exceptions-page__error">{errors.endHour}</p>}
          </div>

          <div className="exceptions-page__form-group">
            <label>Max. Zitplaatsen</label>
            <input
              type="number"
              name="maxSeats"
              value={formData.maxSeats}
              onChange={handleChange}
              className="exceptions-page__input"
            />
            {errors.maxSeats && <p className="exceptions-page__error">{errors.maxSeats}</p>}
          </div>
        </>
      )}

      {/* Dagen van de week - Not shown for Sluitingsdag */}
      {formData.type && formData.type !== 'Sluitingsdag' && (
        <div className="exceptions-page__form-group">
          <label>Dagen van de week</label>
          <div className="exceptions-page__checkbox-group">
            {['maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag', 'zondag'].map(
              (day) => (
                <label key={day} className="exceptions-page__checkbox-label">
                  <input
                    type="checkbox"
                    name="daysOfWeek"
                    value={day}
                    checked={formData.daysOfWeek.includes(day)}
                    onChange={handleChange}
                    className="exceptions-page__checkbox"
                  />
                  {day.charAt(0).toUpperCase() + day.slice(1)}
                </label>
              )
            )}
          </div>
          {errors.daysOfWeek && <p className="exceptions-page__error">{errors.daysOfWeek}</p>}
        </div>
      )}

      <button type="submit" className="button-style-3">
        Opslaan
      </button>
    </form>
  );
};

export default ExceptionForm;


--- Uitzonderingen/ExceptionItem.js ---
// src/Pages/Uitzonderingen/ExceptionItem.js

import React, { useState } from 'react';
import './css/exceptions.css';
import { FaTrashAlt } from 'react-icons/fa';
import ConfirmationModal from '../../Components/Structural/Modal/Delete';

const ExceptionItem = ({ exception, api, triggerNotification, refreshExceptions }) => {
  const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);

  const handleDeleteClick = () => {
    setIsDeleteModalVisible(true);
  };

  const handleConfirmDelete = async () => {
    setIsDeleteModalVisible(false);
    try {
      await api.delete(`${window.baseDomain}api/exceptions/${exception._id}`);
      triggerNotification('Uitzondering succesvol verwijderd', 'success');
      refreshExceptions();
    } catch (error) {
      console.error('Error deleting exception:', error);
      triggerNotification('Fout bij het verwijderen van de uitzondering', 'error');
    }
  };

  const handleCancelDelete = () => {
    setIsDeleteModalVisible(false);
  };

  // Determine the color class based on the type
  const typeColorClass = () => {
    switch (exception.type) {
      case 'Opening':
        return 'tag-green';
      case 'Uitzondering':
        return 'tag-blue';
      case 'Sluiting':
      case 'Sluitingsdag':
        return 'tag-orange';
      default:
        return '';
    }
  };

  return (
    <div className="exceptions-page__exception-item">
      <div className="exceptions-page__exception-content">
        <h4>
          {exception.title}{' '}
          <span className={`exceptions-page__tag ${typeColorClass()}`}>{exception.type}</span>
        </h4>
        {exception.timeframe && <p>Toepassing: {exception.timeframe}</p>}
        <p>
          Geldig van {exception.startDate} tot {exception.endDate}
        </p>
        {exception.startHour && exception.endHour && (
          <p>
            Van {exception.startHour} tot {exception.endHour}
          </p>
        )}
        {exception.maxSeats && <p>Max. Zitplaatsen: {exception.maxSeats}</p>}
        {exception.daysOfWeek && exception.daysOfWeek.length > 0 && (
          <p>Dagen: {exception.daysOfWeek.join(', ')}</p>
        )}
      </div>
      <div className="exceptions-page__exception-actions">
        <FaTrashAlt onClick={handleDeleteClick} className="exceptions-page__delete-icon" />
      </div>
      {isDeleteModalVisible && (
        <ConfirmationModal
          isVisible={isDeleteModalVisible}
          title="Uitzondering Verwijderen"
          message="Weet u zeker dat u deze uitzondering wilt verwijderen?"
          onConfirm={handleConfirmDelete}
          onCancel={handleCancelDelete}
          confirmText="Verwijderen"
          cancelText="Annuleren"
          confirmButtonClass="discard-button red"
          cancelButtonClass="cancel-button"
        />
      )}
    </div>
  );
};

export default ExceptionItem;


--- Uitzonderingen/ExceptionList.js ---
// src/Pages/Uitzonderingen/ExceptionList.js

import React from 'react';
import './css/exceptions.css';
import ExceptionItem from './ExceptionItem';

const ExceptionList = ({ exceptions, api, triggerNotification, refreshExceptions }) => {
  return (
    <div className="exceptions-page__list">
      <h3>Uitzonderingen</h3>
      {exceptions.length > 0 ? (
        <div className="exceptions-page__exception-list">
          {exceptions.map((exception) => (
            <ExceptionItem
              key={exception._id}
              exception={exception}
              api={api}
              triggerNotification={triggerNotification}
              refreshExceptions={refreshExceptions}
            />
          ))}
        </div>
      ) : (
        <p>Geen uitzonderingen gevonden.</p>
      )}
    </div>
  );
};

export default ExceptionList;


--- Uitzonderingen/ExceptionTabs.js ---
// src/Pages/Uitzonderingen/ExceptionTabs.js

import React from 'react';
import './css/exceptions.css';

const ExceptionTabs = ({ activeTab, onTabChange }) => {
  const months = [
    'Januari', 'Februari', 'Maart', 'April', 'Mei', 'Juni',
    'Juli', 'Augustus', 'September', 'Oktober', 'November', 'December',
  ];

  const today = new Date();
  const currentMonth = months[today.getMonth()];
  const nextMonth = months[(today.getMonth() + 1) % 12];

  return (
    <div className="exceptions-page__tabs-container">
      <div className="exceptions-page__tabs">
        <div
          className={`exceptions-page__tab ${activeTab === 'current' ? 'active' : ''}`}
          onClick={() => onTabChange('current')}
        >
          {currentMonth}
        </div>
        <div
          className={`exceptions-page__tab ${activeTab === 'next' ? 'active' : ''}`}
          onClick={() => onTabChange('next')}
        >
          {nextMonth}
        </div>
        <div
          className={`exceptions-page__tab ${activeTab === 'all' ? 'active' : ''}`}
          onClick={() => onTabChange('all')}
        >
          Alle
        </div>
      </div>
    </div>
  );
};

export default ExceptionTabs;


--- Uitzonderingen/Hooks/useExceptionForm.js ---
// src/hooks/useExceptionForm.js

import { useState, useEffect, useRef } from 'react';
import { getTodayDateString, isStartDateAfterEndDate } from '../Utils/utils.js';

const useExceptionForm = (initialFormData, api, triggerNotification, refreshExceptions) => {
  const [formData, setFormData] = useState(initialFormData);
  const [errors, setErrors] = useState({});
  const startDateRef = useRef(null);
  const endDateRef = useRef(null);

  // Focus shift when start date is selected
  useEffect(() => {
    if (formData.startDate && !formData.endDate && endDateRef.current) {
      endDateRef.current.focus();
      // Animation to guide user
      endDateRef.current.classList.add('highlight-animation');
      setTimeout(() => {
        endDateRef.current.classList.remove('highlight-animation');
      }, 2000);
    }
  }, [formData.startDate]);

  // Handle field changes
  const handleChange = (e) => {
    const { name, value, type: inputType, checked } = e.target;

    if (inputType === 'checkbox' && name === 'daysOfWeek') {
      const day = value;
      setFormData((prevFormData) => {
        let daysOfWeek = [...prevFormData.daysOfWeek];
        if (checked) {
          daysOfWeek.push(day);
        } else {
          daysOfWeek = daysOfWeek.filter((d) => d !== day);
        }
        return { ...prevFormData, daysOfWeek };
      });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    setErrors({ ...errors, [name]: '' });
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();

    const validationErrors = {};
    if (!formData.title.trim()) validationErrors.title = 'Titel is verplicht.';
    if (!formData.type) validationErrors.type = 'Type is verplicht.';
    if (formData.type !== 'Sluitingsdag' && formData.type !== 'Sluitingsdagen' && !formData.timeframe)
      validationErrors.timeframe = 'Toepassing is verplicht.';

    if (formData.type === 'Sluitingsdag' && !formData.date)
      validationErrors.date = 'Datum is verplicht.';
    if (formData.type === 'Sluitingsdagen' && !formData.startDate)
      validationErrors.startDate = 'Startdatum is verplicht.';
    if (formData.type === 'Sluitingsdagen' && !formData.endDate)
      validationErrors.endDate = 'Einddatum is verplicht.';

    if (
      (formData.type === 'Opening' ||
        formData.type === 'Uitzondering' ||
        formData.type === 'Sluiting') &&
      !formData.startDate
    )
      validationErrors.startDate = 'Startdatum is verplicht.';
    if (
      (formData.type === 'Opening' ||
        formData.type === 'Uitzondering' ||
        formData.type === 'Sluiting') &&
      !formData.endDate
    )
      validationErrors.endDate = 'Einddatum is verplicht.';
    if (
      (formData.type === 'Opening' || formData.type === 'Uitzondering') &&
      !formData.startHour
    )
      validationErrors.startHour = 'Startuur is verplicht.';
    if (
      (formData.type === 'Opening' || formData.type === 'Uitzondering') &&
      !formData.endHour
    )
      validationErrors.endHour = 'Einduur is verplicht.';
    if (
      (formData.type === 'Opening' || formData.type === 'Uitzondering') &&
      !formData.maxSeats
    )
      validationErrors.maxSeats = 'Max. Zitplaatsen is verplicht.';

    if (
      formData.startDate &&
      formData.endDate &&
      isStartDateAfterEndDate(formData.startDate, formData.endDate)
    ) {
      validationErrors.startDate = 'Startdatum mag niet na de einddatum liggen.';
      validationErrors.endDate = 'Einddatum mag niet voor de startdatum liggen.';
    }

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    // Prepare payload
    let payload = {
      title: formData.title,
      type: ['Sluitingsdag', 'Sluitingsdagen'].includes(formData.type)
        ? 'Sluiting'
        : formData.type,
      timeframe:
        formData.type === 'Sluitingsdag' || formData.type === 'Sluitingsdagen'
          ? 'Volledige Dag'
          : formData.timeframe,
      startDate: formData.startDate,
      endDate: formData.endDate,
      startHour: formData.startHour,
      endHour: formData.endHour,
      maxSeats: formData.maxSeats,
      daysOfWeek: formData.daysOfWeek,
    };

    // Handle Sluitingsdag (single date)
    if (formData.type === 'Sluitingsdag') {
      payload.startDate = formData.date;
      payload.endDate = formData.date;
      payload.daysOfWeek = []; // Clear daysOfWeek for Sluitingsdag
    }

    // Remove daysOfWeek for Sluitingsdag
    if (formData.type === 'Sluitingsdag') {
      delete payload.daysOfWeek;
    }

    payload = Object.fromEntries(
      Object.entries(payload).filter(([_, value]) => value != null && value !== '')
    );

    try {
      const response = await api.post(`${window.baseDomain}api/exceptions`, payload);
      if (response) {
        setFormData(initialFormData);
        setErrors({});
        triggerNotification('Uitzondering succesvol toegevoegd', 'success');
        refreshExceptions();
      } else {
        triggerNotification('Fout bij het toevoegen van de uitzondering', 'error');
      }
    } catch (error) {
      console.error('Error adding exception:', error);
      triggerNotification('Fout bij het toevoegen van de uitzondering', 'error');
    }
  };

  return {
    formData,
    errors,
    handleChange,
    handleSubmit,
    startDateRef,
    endDateRef,
  };
};

export default useExceptionForm;


--- Uitzonderingen/Utils/utils.js ---
// src/utils/utils.js


// Function to get today's date in YYYY-MM-DD format
export const getTodayDateString = () => {
	const today = new Date();
	const year = today.getFullYear();
	const month = String(today.getMonth() + 1).padStart(2, '0');
	const day = String(today.getDate()).padStart(2, '0');
	return `${year}-${month}-${day}`;
  };
  
  export const isStartDateAfterEndDate = (startDateStr, endDateStr) => {
	const startDate = new Date(startDateStr);
	const endDate = new Date(endDateStr);
	return startDate > endDate;
  };
  
  // Generate time options based on 'Toepassing'
  export const getTimeOptions = (shift, shifts) => {
	const options = [];
	const startTime = shifts[shift].start;
	const endTime = shifts[shift].end;
  
	const [startHour, startMinute] = startTime.split(':').map(Number);
	const [endHour, endMinute] = endTime.split(':').map(Number);
  
	let currentTime = new Date();
	currentTime.setHours(startHour, startMinute, 0, 0);
  
	const endTimeObj = new Date();
	endTimeObj.setHours(endHour, endMinute, 0, 0);
  
	while (currentTime <= endTimeObj) {
	  const timeStr = currentTime.toTimeString().substring(0, 5);
	  options.push(timeStr);
	  currentTime.setMinutes(currentTime.getMinutes() + 15);
	}
  
	return options;
  };
  

--- Uitzonderingen/constants.js ---
// src/Pages/Uitzonderingen/constants.js

export const shifts = {
	breakfast: { start: '07:00', end: '11:00' },
	lunch: { start: '11:00', end: '16:00' },
	dinner: { start: '16:00', end: '23:00' },
  };
  

--- Uitzonderingen/css/exceptions.css ---
/* src/Pages/Uitzonderingen/css/exceptions.css */

.exceptions-page {
	display: flex;
	flex-direction: column;
	gap: 20px;
	margin-top: 30px;
	padding-bottom: 80px;
  }
  
  .exceptions-page__title {
	font-size: 2rem;
	text-align: center;
  }
  
  .exceptions-page__container {
	display: flex;
	flex-direction: row;
	gap: 20px;
	flex-wrap: wrap;
  }
  
  .exceptions-page__form {
	flex: 1;
	display: flex;
	flex-direction: column;
	gap: 15px;
	max-width: 100%;
  }
  
  .exceptions-page__form-group {
	display: flex;
	flex-direction: column;
  }
  
  .exceptions-page__form-group label {
	margin-bottom: 5px;
	font-weight: 500;
  }
  
  .exceptions-page__input,
  .exceptions-page__select {
	width: 100%;
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: 5px;
	font-size: 1rem;
  }
  
  .exceptions-page__checkbox-group {
	display: flex;
	flex-wrap: wrap;
	gap: 10px;
  }
  
  .exceptions-page__checkbox-label {
	display: flex;
	align-items: center;
  }
  
  .exceptions-page__checkbox {
	margin-right: 5px;
  }
  
  .exceptions-page__submit-button {
	padding: 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1.1rem;
	transition: background-color 0.3s ease;
  }
  
  .exceptions-page__submit-button:hover {
	background-color: #0056b3;
  }
  
  .exceptions-page__error {
	color: var(--color-red);
	font-size: 0.9rem;
  }
  
  .exceptions-page__list {
	flex: 1;
  }
  
  .exceptions-page__exception-list {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  .exceptions-page__exception-item {
	border: 1px solid #ccc;
	border-radius: 8px;
	padding: 15px;
	position: relative;
	display: flex;
	justify-content: space-between;
	align-items: center;
  }
  
  .exceptions-page__exception-content h4 {
	margin: 0 0 5px 0;
  }
  
  .exceptions-page__exception-actions {
	position: relative;
  }
  
  .exceptions-page__ellipsis-icon {
	cursor: pointer;
	font-size: 18px;
	color: #555;
  }
  
  .tooltip-container {
	position: absolute;
	bottom: 100%;
	right: 0;
	transform: translateY(-10px);
	background-color: white;
	border: 1px solid lightgray;
	border-radius: 5px;
	padding: 5px 0;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
	z-index: 1000;
  }
  
  .tooltip-item {
	display: flex;
	align-items: center;
	padding: 8px 15px;
	cursor: pointer;
  }
  
  .tooltip-item:hover {
	background-color: #f0f0f0;
  }
  
  .tooltip-icon {
	margin-right: 8px;
  }
  
  .tooltip-item.delete-item {
	color: red;
  }
  
  .tooltip-item.delete-item .tooltip-icon {
	color: red;
  }
  
  .tooltip-separator {
	height: 1px;
	background-color: lightgray;
	margin: 5px 0;
  }
  
  .exceptions-page__edit-modal {
	display: flex;
	flex-direction: column;
	gap: 15px;
  }
  
  @media (max-width: 900px) {
	.exceptions-page__container {
	  flex-direction: column;
	  padding: 10px;
	}
  
	.exceptions-page__exception-item {
	  flex-direction: column;
	  align-items: flex-start;
	}
  
	.exceptions-page__exception-actions {
	  position: absolute;
	  top: 15px;
	  right: 15px;
	}
  }
  
  /* Additional styles as needed */

  /* src/Pages/Uitzonderingen/css/exceptions.css */

/* ... (existing styles) */

.exceptions-page__tag {
	display: inline-block;
	padding: 2px 8px;
	border-radius: 4px;
	color: white;
	font-size: 0.8rem;
	margin-left: 10px;
  }
  
  .tag-green {
	background-color: green;
  }
  
  .tag-blue {
	background-color: blue;
  }
  
  .tag-orange {
	background-color: orange;
  }
  
  /* ... (rest of the existing styles) */
  
  /* src/Pages/Uitzonderingen/css/exceptions.css */

/* Existing styles */
/* ... */

/* Calendar Styles */
.exceptions-page__calendar {
	margin-bottom: 20px;
  }
  
  .exceptions-page__calendar-header {
	display: flex;
	align-items: center;
	justify-content: center;
	position: relative;
	margin-bottom: 10px;
  }
  
  .exceptions-page__calendar-nav {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
	font-size: 1.5rem;
	cursor: pointer;
  }
  
  .exceptions-page__calendar-nav:hover {
	color: var(--color-blue);
  }
  
  .exceptions-page__calendar-nav:first-child {
	left: 10px;
  }
  
  .exceptions-page__calendar-nav:last-child {
	right: 10px;
  }
  
  .exceptions-page__calendar h3 {
	margin: 0;
  }
  
  .exceptions-page__calendar-table {
	width: 100%;
	border-collapse: collapse;
  }
  
  .exceptions-page__calendar-table th,
  .exceptions-page__calendar-table td {
	width: 14.28%;
	text-align: center;
	padding: 5px;
  }
  
  .exceptions-page__calendar-cell {
	height: 50px;
  }

  .exceptions-page__calendar-day {
	display: flex;
	align-items: center;
	justify-content: center;
	height: 40px;
	width: 40px;
	margin: auto;
	border-radius: 5px;
	cursor: pointer;
  }
  
  .exceptions-page__calendar-day:hover {
	background-color: #e0e0e0;
  }
  
  .tag-opening {
	background-color: green;
	color: white;
  }
  
  .tag-uitzondering {
	background-color: blue;
	color: white;
  }
  
  .tag-sluitingsdag {
	background-color: orange;
	color: white;
  }
  
  /* Legend Styles */
  .exceptions-page__calendar-legend {
	display: flex;
	justify-content: center;
	gap: 20px;
	margin-top: 10px;
  }
  
  .exceptions-page__calendar-legend-box {
	display: inline-block;
	width: 15px;
	height: 15px;
	margin-right: 5px;
	vertical-align: middle;
	border-radius: 50%;
  }
  
  .exceptions-page__calendar-legend .tag-opening {
	background-color: green;
  }
  
  .exceptions-page__calendar-legend .tag-uitzondering {
	background-color: blue;
  }
  
  .exceptions-page__calendar-legend .tag-sluitingsdag {
	background-color: orange;
  }
  
  /* Tabs Styles */
  .exceptions-page__tabs-container {
	display: flex;
	justify-content: center;
	width: 100%;
  }
  
  .exceptions-page__tabs {
	display: flex;
	gap: 10px;
  }
  
  .exceptions-page__tab {
	padding: 10px 20px;
	background-color: #f0f0f0;
	cursor: pointer;
	border-radius: 4px;
  }
  
  .exceptions-page__tab.active {
	background-color: var(--color-blue);
	color: white;
  }
  
  /* Adjustments for ExceptionList and ExceptionItem */
  .exceptions-page__content {
	flex: 1;
  }
  
  .exceptions-page__selected-date-exceptions {
	margin-bottom: 20px;
  }
  
  /* ExceptionItem Styles */
  .exceptions-page__exception-actions {
	display: flex;
	align-items: center;
  }
  
  .exceptions-page__delete-icon {
	cursor: pointer;
	font-size: 18px;
	color: red;
  }
  
  .exceptions-page__delete-icon:hover {
	color: darkred;
  }
  
  @media (max-width: 768px) {
	.exceptions-page__calendar-table th,
	.exceptions-page__calendar-table td {
	  padding: 2px;
	}
  
	.exceptions-page__calendar-day {
	  height: 30px;
	  width: 30px;
	}
  
	.exceptions-page__tab {
	  padding: 8px 10px;
	  font-size: 0.9rem;
	}
  
	.exceptions-page__calendar-nav {
	  font-size: 1.2rem;
	}
  }
  
  /* ... (rest of the existing styles) */
  
  .exceptions-page__tabs-container {
	margin-bottom: 30px;
  }

  .exceptions-page__list h3 {
	margin-bottom: 10px;
  }

  /* src/Pages/Uitzonderingen/css/exceptions.css */

/* ... existing styles ... */

/* Tag Colors */
.exceptions-page__tag {
	display: inline-block;
	padding: 2px 8px;
	border-radius: 4px;
	color: white;
	font-size: 0.8rem;
	margin-left: 10px;
  }
  
  .tag-green {
	background-color: var(--color-green);
  }
  
  .tag-blue {
	background-color: var(--color-blue);
  }
  
  .tag-orange {
	background-color: var(--color-orange);
  }
  
  .tag-sluiting {
	background-color: var(--color-orange);
	color: white;
  }
  
  /* Calendar Day Colors */
  .exceptions-page__calendar-day.tag-opening {
	background-color: var(--color-green);
	color: white;
  }
  
  .exceptions-page__calendar-day.tag-uitzondering {
	background-color: var(--color-blue);
	color: white;
  }
  
  .exceptions-page__calendar-day.tag-sluiting {
	background-color: var(--color-orange);
	color: white;
  }
  
  /* Legend Colors */
  .exceptions-page__calendar-legend .tag-opening {
	background-color: var(--color-green);
  }
  
  .exceptions-page__calendar-legend .tag-uitzondering {
	background-color: var(--color-blue);
  }
  
  .exceptions-page__calendar-legend .tag-sluiting {
	background-color: var(--color-orange);
  }
  
  /* ... rest of the existing styles ... */
  /* src/Pages/Uitzonderingen/css/exceptions.css */

/* ... existing styles ... */

/* Validation Error Messages in Orange */
.exceptions-page__error {
	color: var(--color-orange);
	font-size: 0.9rem;
  }
  


--- Uitzonderingen/index.js ---
// src/Pages/Uitzonderingen/index.js

import React, { useState, useEffect } from 'react';
import { withHeader } from '../../Components/Structural/Header/index.js';
import './css/exceptions.css';
import useApi from '../../Hooks/useApi';
import useNotification from '../../Components/Notification';
import ExceptionForm from './ExceptionForm';
import ExceptionList from './ExceptionList';
import ExceptionCalendar from './ExceptionCalendar';
import ExceptionTabs from './ExceptionTabs';
import ExceptionItem from './ExceptionItem.js';

const Uitzonderingen = () => {
  const api = useApi();
  const { triggerNotification, NotificationComponent } = useNotification();

  // State for the list of exceptions
  const [exceptions, setExceptions] = useState([]);
  const [filteredExceptions, setFilteredExceptions] = useState([]);
  const [activeTab, setActiveTab] = useState('current');
  const [calendarMonthOffset, setCalendarMonthOffset] = useState(0); // For navigating months

  // Fetch the exceptions at component mount
  useEffect(() => {
    const fetchExceptions = async () => {
      try {
        const data = await api.get(window.baseDomain + 'api/exceptions', { noCache: true });
        if (Array.isArray(data)) {
          setExceptions(data);
        } else {
          setExceptions([]);
        }
      } catch (error) {
        console.error('Error fetching exceptions:', error);
        setExceptions([]);
        triggerNotification('Fout bij het ophalen van uitzonderingen.', 'error');
      }
    };
    fetchExceptions();
  }, [api, triggerNotification]);

  // Filter exceptions based on the active tab
  useEffect(() => {
    const filterExceptionsByTab = () => {
      const today = new Date();
      const currentMonth = today.getMonth();
      const nextMonth = (currentMonth + 1) % 12;

      let filtered = [];

      exceptions.forEach((exception) => {
        const startDate = new Date(exception.startDate);
        const endDate = new Date(exception.endDate);

        switch (activeTab) {
          case 'current':
            if (startDate.getMonth() === currentMonth || endDate.getMonth() === currentMonth) {
              filtered.push(exception);
            }
            break;
          case 'next':
            if (startDate.getMonth() === nextMonth || endDate.getMonth() === nextMonth) {
              filtered.push(exception);
            }
            break;
          case 'all':
          default:
            filtered.push(exception);
            break;
        }
      });

      setFilteredExceptions(filtered);
    };

    filterExceptionsByTab();
  }, [exceptions, activeTab]);

  // Handler to refresh exceptions
  const refreshExceptions = async () => {
    try {
      const data = await api.get(window.baseDomain + 'api/exceptions', { noCache: true });
      if (Array.isArray(data)) {
        setExceptions(data);
      } else {
        setExceptions([]);
      }
    } catch (error) {
      console.error('Error fetching exceptions:', error);
      setExceptions([]);
      triggerNotification('Fout bij het ophalen van uitzonderingen.', 'error');
    }
  };

  // Handle tab change
  const handleTabChange = (tab) => {
    setActiveTab(tab);
    if (tab === 'current') {
      setCalendarMonthOffset(0);
    } else if (tab === 'next') {
      setCalendarMonthOffset(1);
    } else if (tab === 'all') {
      setCalendarMonthOffset(0); // Or handle 'all' differently
    }
  };

  // Handle month navigation in calendar
  const handleMonthChange = (offset) => {
    setCalendarMonthOffset((prevOffset) => prevOffset + offset);
  };

  // Optional: If you still want to handle date clicks without displaying exceptions
  const handleDateClick = (date) => {
    // Implement any other logic you need when a date is clicked
    console.log('Date clicked:', date);
  };

  return (
    <div className="exceptions-page">
		
      <NotificationComponent />
      <div className="exceptions-page__container">
        <ExceptionForm
          api={api}
          triggerNotification={triggerNotification}
          refreshExceptions={refreshExceptions}
        />
        <div className="exceptions-page__content">
          {activeTab !== 'all' && (
            <ExceptionCalendar
              exceptions={exceptions}
              onDateClick={handleDateClick}
              monthOffset={calendarMonthOffset}
              onMonthChange={handleMonthChange}
            />
          )}
          <ExceptionTabs activeTab={activeTab} onTabChange={handleTabChange} />
          <ExceptionList
            exceptions={filteredExceptions}
            api={api}
            triggerNotification={triggerNotification}
            refreshExceptions={refreshExceptions}
          />
        </div>
      </div>
    </div>
  );
};

export default withHeader(Uitzonderingen);


--- UploadPdf/css/pdf.css ---
/* src/Pages/UploadPdf/css/pdf.css */

  .pdf-page .pdf-page {
	display: flex;
	flex-direction: column;
	gap: 20px;
	margin-top: 30px;
	padding-bottom: 80px;
  }
  
  .pdf-page .pdf-page__title {
	font-size: 2rem;
	text-align: center;
  }
  
  .pdf-page .pdf-page__container {
	display: flex;
	flex-direction: row;
	gap: 20px;
	flex-wrap: wrap;
  }
  
  .pdf-page .pdf-page__form {
	flex: 1;
	display: flex;
	flex-direction: column;
	gap: 15px;
	max-width: 100%;
  }
  
  .pdf-page .pdf-page__form-group {
	display: flex;
	flex-direction: column;
  }
  
  .pdf-page .pdf-page__form-group label {
	margin-bottom: 5px;
	font-weight: 500;
  }
  
  .pdf-page .pdf-page__input {
	width: 100%;
	padding: 10px;
	border: 1px solid #ccc;
	border-radius: 5px;
	font-size: 1rem;
  }
  
  .pdf-page .pdf-page__content {
	flex: 1;
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
  }
  
  .pdf-page .pdf-page__qr-section {
	display: flex;
	flex-direction: column;
	align-items: center;
	gap: 15px;
  }
  
  .pdf-page .pdf-page__qr-container {
	background-color: #fff;
	border: 1px solid #ddd;
	border-radius: 8px;
	width: 200px;
	height: 200px;
	display: flex;
	align-items: center;
	justify-content: center;
  }
  
  .pdf-page .pdf-page__qr-code {
	margin: 0;
  }
  
  .pdf-page .pdf-page__button-group {
	display: flex;
	gap: 10px;
	position: relative; /* To allow absolute positioning of the color editor */
	justify-content: center;
	align-items: center;
	margin-top: 10px;

  }
  
  .pdf-page .pdf-page__download-button,
  .pdf-page .pdf-page__edit-color-button,
  .pdf-page .pdf-page__view-link-button {
	padding: 10px 15px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1rem;
	transition: background-color 0.3s ease;
  }
  
  .pdf-page .pdf-page__download-button:hover,
  .pdf-page .pdf-page__edit-color-button:hover,
  .pdf-page .pdf-page__view-link-button:hover {
	background-color: #0056b3;
  }
  
  .pdf-page .pdf-page__view-link-button:disabled {
	background-color: #999;
	cursor: not-allowed;
  }
  
  .pdf-page .pdf-page__color-editor {
	position: absolute;
	bottom: 100%; /* Show above the buttons */
	left: 50%;
	transform: translateX(-50%);
	background-color: #f9f9f9;
	border: 1px solid #ddd;
	border-radius: 8px;
	padding: 15px;
	display: flex;
	flex-direction: column;
	gap: 10px;
	align-items: center;
	width: 300px;
	z-index: 999;
  }
  
  .pdf-page .pdf-page__color-editor h4 {
	margin: 0;
  }
  
  .pdf-page .pdf-page__color-picker {
	height: 40px;
	width: 100%;
	padding: 0;
  }
  
  .pdf-page .pdf-page__close-color-editor {
	padding: 8px 12px;
	background-color: var(--color-blue);
	color: #fff;
	border: none;
	border-radius: 5px;
	cursor: pointer;
	font-size: 1rem;
	transition: background-color 0.3s ease;
	width: 100%;
  }
  
  .pdf-page .pdf-page__close-color-editor:hover {
	background-color: #0056b3;
  }
  
  .pdf-page .pdf-page__no-pdf {
	font-size: 1.1rem;
	color: #555;
	text-align: center;
  }
  
  @media (max-width: 900px) {
	.pdf-page .pdf-page__container {
	  flex-direction: column;
	  padding: 10px;
	}
  
	.pdf-page .pdf-page__content {
	  align-items: flex-start;
	}
  
	.pdf-page .pdf-page__button-group {
	  flex-wrap: wrap;
	}
  }
  


  @media (max-width: 900px) {
	.pdf-page .pdf-page__container {
	  flex-direction: column;
	  padding: 10px;
	}
  
	/* Remove or comment out this line so the QR remains centered:
	.pdf-page__content {
	  align-items: flex-start;
	}
	*/
  
	.pdf-page .pdf-page__button-group {
	  flex-wrap: wrap;
	}
  }
  

--- UploadPdf/index.js ---
// src/Pages/UploadPdf/index.js

import React, { useState, useRef, useEffect } from 'react';
import { withHeader } from '../../Components/Structural/Header/index.js';
import useApi from '../../Hooks/useApi';
import useNotification from '../../Components/Notification';
import { QRCodeCanvas } from 'qrcode.react'; 
import './css/pdf.css';

const PdfUpload = () => {
  const api = useApi();
  const { triggerNotification, NotificationComponent } = useNotification();

  const [pdfFile, setPdfFile] = useState(null);
  const [pdfUrl, setPdfUrl] = useState('');
  const [isUploading, setIsUploading] = useState(false);

  const [qrColor, setQrColor] = useState('#000000');
  const [showColorEditor, setShowColorEditor] = useState(false);

  const [restaurantName, setRestaurantName] = useState(() => {
    // Load stored restaurantName from localStorage if available
    return localStorage.getItem('restaurantName') || '';
  });

  const qrCanvasRef = useRef(null);
  const qrDownloadRef = useRef(null);

  useEffect(() => {
    // Load stored pdfUrl from localStorage if available
    const storedPdfUrl = localStorage.getItem('pdfUrl');
    if (storedPdfUrl) {
      setPdfUrl(storedPdfUrl);
    }
  }, []);

  const handleFileChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      if (file.type === 'application/pdf') {
        setPdfFile(file);
      } else {
        triggerNotification('Alleen PDF bestanden zijn toegestaan.', 'error');
      }
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!pdfFile) {
      triggerNotification('Selecteer eerst een PDF bestand.', 'error');
      return;
    }

    if (!restaurantName.trim()) {
      triggerNotification('Vul een restaurantnaam in.', 'error');
      return;
    }

    setIsUploading(true);

    const formData = new FormData();
    formData.append('pdf', pdfFile);

    try {
      const response = await api.post(`${window.baseDomain}api/upload-pdf`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      if (response) {
        const restaurantId = localStorage.getItem('username'); // Existing logic for ID
        const encodedName = encodeURIComponent(restaurantName.trim());
        const menuUrl = `http://menu.reservaties.net/?restaurantId=${restaurantId}&restaurantName=${encodedName}`;

        // Save URL and restaurantName to localStorage
        setPdfUrl(menuUrl);
        localStorage.setItem('pdfUrl', menuUrl);
        localStorage.setItem('restaurantName', restaurantName.trim());

        triggerNotification('PDF succesvol geüpload.', 'success');
      } else {
        triggerNotification('Fout bij het uploaden van de PDF.', 'error');
      }
    } catch (error) {
      console.error('Error uploading PDF:', error);
      triggerNotification('Fout bij het uploaden van de PDF.', 'error');
    } finally {
      setIsUploading(false);
    }
  };

  const handleDownloadQR = () => {
    if (!qrDownloadRef.current) return;
    const canvas = qrDownloadRef.current.querySelector('canvas');
    if (!canvas) return;

    const dataURL = canvas.toDataURL("image/png");
    const a = document.createElement('a');
    a.href = dataURL;
    a.download = 'qrcode.png';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  };

  const handleViewLink = () => {
    if (!pdfUrl) return;
    window.open(pdfUrl, '_blank');
  };

  return (
    <div className="pdf-page">
      <NotificationComponent />
      <div className="pdf-page__container">
        {/* Left side: Upload Form */}
        <form className="pdf-page__form" onSubmit={handleSubmit}>
          <div className="pdf-page__form-group">
            <label>Restaurant Naam</label>
            <input
              type="text"
              value={restaurantName}
              onChange={(e) => setRestaurantName(e.target.value)}
              className="pdf-page__input"
            />
          </div>
          <div className="pdf-page__form-group">
            <label>Kies een PDF</label>
            <input
              type="file"
              accept="application/pdf"
              onChange={handleFileChange}
              className="pdf-page__input"
            />
          </div>
          <button type="submit" className="button-style-3" disabled={isUploading}>
            {isUploading ? 'Bezig met uploaden...' : 'Uploaden'}
          </button>
        </form>

        {/* Right side */}
        <div className="pdf-page__content">
          <div className="pdf-page__qr-section">
            <h3>QR Code</h3>
            {pdfUrl ? (
              <>
                {/* Visible QR Code (small, no margin) */}
                <div className="pdf-page__qr-container" ref={qrCanvasRef}>
                  <QRCodeCanvas
                    value={pdfUrl}
                    size={150}
                    fgColor={qrColor}
                    bgColor="#ffffff"
                    includeMargin={false}
                    className="pdf-page__qr-code"
                  />
                </div>

                {/* Hidden larger QR code for high-res download with white margin */}
                <div style={{ display: 'none' }} ref={qrDownloadRef}>
                  <QRCodeCanvas
                    value={pdfUrl}
                    size={800}
                    fgColor={qrColor}
                    bgColor="#ffffff"
                    includeMargin={true}
                  />
                </div>

                {/* Button Group */}
                <div className="pdf-page__button-group">
                  <button onClick={handleDownloadQR} className="pdf-page__download-button">
                    Download QR Code
                  </button>
                  <button
                    className="pdf-page__edit-color-button"
                    onClick={() => setShowColorEditor(!showColorEditor)}
                  >
                    Kleur Bewerken
                  </button>
                  <button
                    className="pdf-page__view-link-button"
                    onClick={handleViewLink}
                    disabled={!pdfUrl}
                  >
                    Bekijk Link
                  </button>

                  {showColorEditor && (
                    <div className="pdf-page__color-editor">
                      <h4>Pas QR Kleur aan</h4>
                      <input
                        type="color"
                        value={qrColor}
                        onChange={(e) => setQrColor(e.target.value)}
                        className="pdf-page__input pdf-page__color-picker"
                      />
                      <button
                        className="pdf-page__close-color-editor"
                        onClick={() => setShowColorEditor(false)}
                      >
                        Sluiten
                      </button>
                    </div>
                  )}
                </div>
              </>
            ) : (
              <p className="pdf-page__no-pdf">Upload een nieuwe pdf</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default withHeader(PdfUpload);



Directory Structure for "/Users/thibaultvandesompele/Desktop/Mateza 4.0/Client/Dashboard/dashboard-general/src/Pages":

├── .DS_Store
├── Dashboard
│   ├── CalendarMap
│   │   ├── BarChartView.js
│   │   ├── BezettingspercentageForm.js
│   │   ├── CalendarDay.js
│   │   ├── CalendarGrid.js
│   │   ├── CalendarHeader.js
│   │   ├── Hooks
│   │   │   ├── useChartData.js
│   │   │   ├── useDates.js
│   │   │   ├── usePredictions.js
│   │   │   ├── useReportData.js
│   │   │   ├── useReservations.js
│   │   │   └── useWeatherData.js
│   │   ├── Reports
│   │   │   ├── MonthReport.js
│   │   │   ├── WeekReport.js
│   │   │   └── css
│   │   │       └── weekReport.css
│   │   ├── ReservationDetailsModal.js
│   │   ├── ShiftSelector.js
│   │   ├── TimeOfDayBox.js
│   │   ├── Utils
│   │   │   ├── dateUtils.js
│   │   │   ├── predictionUtils.js
│   │   │   └── reportUtils.js
│   │   ├── ViewModeSelector.js
│   │   ├── css
│   │   │   ├── barChartView.css
│   │   │   ├── bezettingspercentageForm.css
│   │   │   ├── calendarComponent.css
│   │   │   ├── calendarDay.css
│   │   │   ├── calendarGrid.css
│   │   │   ├── calendarHeader.css
│   │   │   ├── reservationDetailsModal.css
│   │   │   ├── shiftSelector.css
│   │   │   ├── timeOfDay.css
│   │   │   └── viewModeSelector.css
│   │   ├── index.js
│   │   └── reservationData.js
│   └── DayList
│       ├── FieldFilterModal.js
│       ├── Filters
│       │   ├── DatePicker.js
│       │   ├── ShiftSelector.js
│       │   └── css
│       │       ├── datePicker.css
│       │       └── shiftSelector.css
│       ├── Hooks
│       │   ├── useFilteredReservations.js
│       │   ├── useIsMobile.js
│       │   ├── usePagination.js
│       │   ├── useReservationsList.js
│       │   └── useSortedReservation.js
│       ├── Pagination.js
│       ├── ReservationRow
│       │   ├── NameColumn.js
│       │   ├── ReservationNumber.js
│       │   ├── TooltipView.js
│       │   ├── css
│       │   │   ├── mobile.css
│       │   │   ├── nameColumn.css
│       │   │   ├── reservationNumber.css
│       │   │   ├── reservationRow.css
│       │   │   └── tooltip.css
│       │   └── index.js
│       ├── SearchFilters
│       │   ├── SearchBar.js
│       │   ├── css
│       │   │   └── searchBar.css
│       │   └── index.js
│       ├── Utils
│       │   ├── constants.js
│       │   ├── localStorageUtils.js
│       │   └── sortUtils.js
│       ├── css
│       │   ├── fieldFilterModal.css
│       │   ├── pagination.css
│       │   ├── print.css
│       │   ├── reservationList.css
│       │   └── settingsTabs.css
│       └── index.js
├── Diverse
│   ├── Account
│   │   ├── .DS_Store
│   │   ├── AvatarSelection.js
│   │   ├── LanguageSelection.js
│   │   ├── WelcomeAnimation.js
│   │   ├── avatars.js
│   │   ├── css
│   │   │   ├── animations.css
│   │   │   ├── avatarSelection.css
│   │   │   ├── languageSelection.css
│   │   │   ├── mobile.css
│   │   │   └── welcomeAnimation.css
│   │   └── index.js
│   ├── Notepad
│   │   ├── .DS_Store
│   │   ├── css
│   │   │   └── style.css
│   │   └── index.js
│   └── Pincode
│       ├── PincodeInput.js
│       ├── css
│       │   ├── mobile.css
│       │   ├── pincodeInput.css
│       │   └── pincodeScreen.css
│       └── index.js
├── FormEditor
│   ├── .DS_Store
│   ├── DragAndDrop
│   │   ├── Block.js
│   │   ├── Canvas.js
│   │   ├── Palette.js
│   │   └── css
│   │       ├── animations.css
│   │       ├── block.css
│   │       ├── canvas.css
│   │       ├── mobile.css
│   │       ├── palette.css
│   │       └── style.css
│   ├── FormSettings
│   │   ├── Colors
│   │   │   ├── BackgroundTypeSelector.js
│   │   │   ├── ColorPicker.js
│   │   │   ├── css
│   │   │   │   └── backgroundTypeSelector.css
│   │   │   └── index.js
│   │   ├── Fonts
│   │   │   ├── FontSelector.js
│   │   │   ├── css
│   │   │   │   └── fonts.css
│   │   │   ├── fontsConfig.js
│   │   │   └── index.js
│   │   ├── Settings
│   │   │   ├── AlignmentSelector.js
│   │   │   ├── BackgroundBlurSelector.js
│   │   │   ├── SettingsForm.js
│   │   │   ├── ThemePreview.js
│   │   │   ├── css
│   │   │   │   ├── alignmentSelector.css
│   │   │   │   ├── backgroundBlur.css
│   │   │   │   └── theme.css
│   │   │   └── index.js
│   │   ├── SettingsTabs.js
│   │   ├── css
│   │   │   ├── formSettings.css
│   │   │   ├── mobile.css
│   │   │   └── settingsTabs.css
│   │   └── index.js
│   ├── Hooks
│   │   └── fetchCanvas.js
│   ├── LaunchPage
│   │   ├── EmailSample
│   │   │   ├── EmailSampleTab.js
│   │   │   └── css
│   │   │       └── emailSample.css
│   │   ├── EmbedCode
│   │   │   ├── EmbedCodeTab.js
│   │   │   └── css
│   │   │       └── embedCode.css
│   │   ├── css
│   │   │   ├── launchPage.css
│   │   │   └── mobile.css
│   │   └── index.js
│   ├── Theme
│   │   ├── Square.js
│   │   ├── css
│   │   │   ├── animations.css
│   │   │   ├── mobile.css
│   │   │   ├── themeSelectorModal.css
│   │   │   └── themeSquare.css
│   │   ├── defaultThemes.js
│   │   └── index.js
│   ├── Utils
│   │   └── responsiveStyles.js
│   ├── defaultElements.js
│   └── index.js
├── Giftcard
│   ├── GiftCard
│   │   ├── AddGiftcardSection
│   │   │   ├── ValueSelector.js
│   │   │   ├── css
│   │   │   │   ├── addGiftCardSection.css
│   │   │   │   └── valueSelector.css
│   │   │   └── index.js
│   │   ├── OverviewSection
│   │   │   ├── SearchBar.js
│   │   │   ├── css
│   │   │   │   └── overviewSection.css
│   │   │   └── index.js
│   │   ├── ValidationSection
│   │   │   ├── ValidationPopup.js
│   │   │   ├── css
│   │   │   │   ├── validationPopup.css
│   │   │   │   └── validationSection.css
│   │   │   └── index.js
│   │   ├── css
│   │   │   └── giftCard.css
│   │   └── index.js
│   └── GiftcardEditor
│       └── index.js
├── Login
│   ├── OTPLogin
│   │   └── index.js
│   ├── css
│   │   └── login.css
│   └── index.js
├── Mededeling
│   ├── EditMededelingModal.js
│   ├── MededelingForm.js
│   ├── MededelingItem.js
│   ├── MededelingList.js
│   ├── css
│   │   └── mededeling.css
│   └── index.js
├── Menu
│   ├── EditMenuModal.js
│   ├── MenuForm.js
│   ├── MenuItem.js
│   ├── MenuList.js
│   ├── css
│   │   └── menu.css
│   └── index.js
├── NewReservation
│   ├── FormField.js
│   ├── ReservationSidebar.js
│   ├── ReservationStepTwo.js
│   ├── ReservationSummary.js
│   ├── StepOne
│   │   ├── Calendar.js
│   │   ├── DateSelector.js
│   │   ├── TimeSelector.js
│   │   ├── Utils
│   │   │   ├── dateUtils.js
│   │   │   ├── dates
│   │   │   │   ├── blockDates.js
│   │   │   │   └── schemeDates.js
│   │   │   ├── exceptions.js
│   │   │   ├── generateDates.js
│   │   │   └── generateTimes.js
│   │   ├── ValueSelector.js
│   │   ├── algorithm
│   │   │   ├── .DS_Store
│   │   │   ├── getAvailableTimeblocks.js
│   │   │   ├── isDateAvailable.js
│   │   │   ├── processing
│   │   │   │   ├── dailyGuestCounts.js
│   │   │   │   ├── mealTypeCount.js
│   │   │   │   └── timeblocksAvailable.js
│   │   │   ├── reservation_data
│   │   │   │   └── counter.js
│   │   │   └── restaurant_data
│   │   │       ├── exceptions.js
│   │   │       └── openinghours.js
│   │   ├── css
│   │   │   ├── calendar.css
│   │   │   ├── reservationMode.css
│   │   │   ├── timeSelector.css
│   │   │   └── valueSelector.css
│   │   └── index.js
│   ├── css
│   │   ├── newReservationAdmin.css
│   │   ├── reservationSidebar.css
│   │   ├── reservationSummary.css
│   │   └── reservationsStepTwo.css
│   └── index.js
├── Openingsuren
│   ├── DayContent.js
│   ├── Hooks
│   │   └── useWindowWidth.js
│   ├── MaxCapacityAccordion.js
│   ├── NavigationBar.js
│   ├── ShiftsAccordion.js
│   ├── ToggleSwitch.js
│   ├── constants.js
│   ├── css
│   │   ├── dayContent.css
│   │   ├── maxCapacityAccordion.css
│   │   ├── navigationBar.css
│   │   ├── schedulePage.css
│   │   └── shiftsAccordion.css
│   └── index.js
├── Personeel
│   ├── EditPersoneelModal.js
│   ├── PersoneelForm.js
│   ├── PersoneelItem.js
│   ├── PersoneelList.js
│   ├── css
│   │   └── personeel.css
│   └── index.js
├── Profile
│   ├── AccountManage
│   │   ├── FormField.js
│   │   ├── Utils
│   │   │   └── validationUtils.js
│   │   ├── css
│   │   │   ├── accountManage.css
│   │   │   └── mobile.css
│   │   └── index.js
│   ├── Hooks
│   │   ├── avatarMapping.js
│   │   └── useProfile.js
│   ├── Language
│   │   ├── css
│   │   │   └── language.css
│   │   └── index.js
│   ├── ProfileBio.js
│   ├── ProfileHeader.js
│   ├── ProfileImage.js
│   ├── css
│   │   ├── animations.css
│   │   ├── language.css
│   │   ├── mobile.css
│   │   └── style.css
│   └── index.js
├── Settings
│   ├── EmailSettings
│   │   ├── BannerUploadComponent.js
│   │   ├── EmailPreview.js
│   │   ├── GeneralSettings.js
│   │   ├── NotificationSettings.js
│   │   ├── css
│   │   │   └── emailSettings.css
│   │   └── index.js
│   └── GeneralSettings
│       ├── css
│       │   └── generalSettings.css
│       ├── index.js
│       └── settings.md
├── Tables
│   ├── TableEditor
│   │   ├── FloorPlan.js
│   │   ├── FloorPlanElement.js
│   │   ├── Hooks
│   │   │   ├── useElementsActions.js
│   │   │   └── useLineActions.js
│   │   ├── LinesLayer.js
│   │   ├── Sidebar.js
│   │   ├── Table.js
│   │   ├── TableEditModalContent.js
│   │   ├── Walls.js
│   │   ├── css
│   │   │   ├── app.css
│   │   │   ├── floorPlan.css
│   │   │   ├── sidebar.css
│   │   │   ├── table.css
│   │   │   ├── tableEditModalContent.css
│   │   │   └── walls.css
│   │   └── index.js
│   ├── TableList
│   │   ├── TableGroupRow.js
│   │   ├── TableList.js
│   │   ├── TableRow.js
│   │   ├── css
│   │   │   └── tableList.css
│   │   └── index.js
│   └── TablePlan
│       ├── FloorPlan.js
│       ├── FloorPlanElement.js
│       ├── Hooks
│       │   └── useReservations.js
│       ├── Sidebar.js
│       ├── Table.js
│       ├── TableSlots.js
│       ├── Walls.js
│       ├── css
│       │   ├── app.css
│       │   ├── floorPlan.css
│       │   ├── sidebar.css
│       │   ├── table.css
│       │   ├── tableslots.css
│       │   └── walls.css
│       └── index.js
├── Uitzonderingen
│   ├── ExceptionCalendar.js
│   ├── ExceptionForm.js
│   ├── ExceptionItem.js
│   ├── ExceptionList.js
│   ├── ExceptionTabs.js
│   ├── Hooks
│   │   └── useExceptionForm.js
│   ├── Utils
│   │   └── utils.js
│   ├── constants.js
│   ├── css
│   │   └── exceptions.css
│   └── index.js
└── UploadPdf
    ├── css
    │   └── pdf.css
    └── index.js


List of Files:
.DS_Store
Dashboard/CalendarMap/BarChartView.js
Dashboard/CalendarMap/BezettingspercentageForm.js
Dashboard/CalendarMap/CalendarDay.js
Dashboard/CalendarMap/CalendarGrid.js
Dashboard/CalendarMap/CalendarHeader.js
Dashboard/CalendarMap/Hooks/useChartData.js
Dashboard/CalendarMap/Hooks/useDates.js
Dashboard/CalendarMap/Hooks/usePredictions.js
Dashboard/CalendarMap/Hooks/useReportData.js
Dashboard/CalendarMap/Hooks/useReservations.js
Dashboard/CalendarMap/Hooks/useWeatherData.js
Dashboard/CalendarMap/Reports/MonthReport.js
Dashboard/CalendarMap/Reports/WeekReport.js
Dashboard/CalendarMap/Reports/css/weekReport.css
Dashboard/CalendarMap/ReservationDetailsModal.js
Dashboard/CalendarMap/ShiftSelector.js
Dashboard/CalendarMap/TimeOfDayBox.js
Dashboard/CalendarMap/Utils/dateUtils.js
Dashboard/CalendarMap/Utils/predictionUtils.js
Dashboard/CalendarMap/Utils/reportUtils.js
Dashboard/CalendarMap/ViewModeSelector.js
Dashboard/CalendarMap/css/barChartView.css
Dashboard/CalendarMap/css/bezettingspercentageForm.css
Dashboard/CalendarMap/css/calendarComponent.css
Dashboard/CalendarMap/css/calendarDay.css
Dashboard/CalendarMap/css/calendarGrid.css
Dashboard/CalendarMap/css/calendarHeader.css
Dashboard/CalendarMap/css/reservationDetailsModal.css
Dashboard/CalendarMap/css/shiftSelector.css
Dashboard/CalendarMap/css/timeOfDay.css
Dashboard/CalendarMap/css/viewModeSelector.css
Dashboard/CalendarMap/index.js
Dashboard/CalendarMap/reservationData.js
Dashboard/DayList/FieldFilterModal.js
Dashboard/DayList/Filters/DatePicker.js
Dashboard/DayList/Filters/ShiftSelector.js
Dashboard/DayList/Filters/css/datePicker.css
Dashboard/DayList/Filters/css/shiftSelector.css
Dashboard/DayList/Hooks/useFilteredReservations.js
Dashboard/DayList/Hooks/useIsMobile.js
Dashboard/DayList/Hooks/usePagination.js
Dashboard/DayList/Hooks/useReservationsList.js
Dashboard/DayList/Hooks/useSortedReservation.js
Dashboard/DayList/Pagination.js
Dashboard/DayList/ReservationRow/NameColumn.js
Dashboard/DayList/ReservationRow/ReservationNumber.js
Dashboard/DayList/ReservationRow/TooltipView.js
Dashboard/DayList/ReservationRow/css/mobile.css
Dashboard/DayList/ReservationRow/css/nameColumn.css
Dashboard/DayList/ReservationRow/css/reservationNumber.css
Dashboard/DayList/ReservationRow/css/reservationRow.css
Dashboard/DayList/ReservationRow/css/tooltip.css
Dashboard/DayList/ReservationRow/index.js
Dashboard/DayList/SearchFilters/SearchBar.js
Dashboard/DayList/SearchFilters/css/searchBar.css
Dashboard/DayList/SearchFilters/index.js
Dashboard/DayList/Utils/constants.js
Dashboard/DayList/Utils/localStorageUtils.js
Dashboard/DayList/Utils/sortUtils.js
Dashboard/DayList/css/fieldFilterModal.css
Dashboard/DayList/css/pagination.css
Dashboard/DayList/css/print.css
Dashboard/DayList/css/reservationList.css
Dashboard/DayList/css/settingsTabs.css
Dashboard/DayList/index.js
Diverse/Account/.DS_Store
Diverse/Account/AvatarSelection.js
Diverse/Account/LanguageSelection.js
Diverse/Account/WelcomeAnimation.js
Diverse/Account/avatars.js
Diverse/Account/css/animations.css
Diverse/Account/css/avatarSelection.css
Diverse/Account/css/languageSelection.css
Diverse/Account/css/mobile.css
Diverse/Account/css/welcomeAnimation.css
Diverse/Account/index.js
Diverse/Notepad/.DS_Store
Diverse/Notepad/css/style.css
Diverse/Notepad/index.js
Diverse/Pincode/PincodeInput.js
Diverse/Pincode/css/mobile.css
Diverse/Pincode/css/pincodeInput.css
Diverse/Pincode/css/pincodeScreen.css
Diverse/Pincode/index.js
FormEditor/.DS_Store
FormEditor/DragAndDrop/Block.js
FormEditor/DragAndDrop/Canvas.js
FormEditor/DragAndDrop/Palette.js
FormEditor/DragAndDrop/css/animations.css
FormEditor/DragAndDrop/css/block.css
FormEditor/DragAndDrop/css/canvas.css
FormEditor/DragAndDrop/css/mobile.css
FormEditor/DragAndDrop/css/palette.css
FormEditor/DragAndDrop/css/style.css
FormEditor/FormSettings/Colors/BackgroundTypeSelector.js
FormEditor/FormSettings/Colors/ColorPicker.js
FormEditor/FormSettings/Colors/css/backgroundTypeSelector.css
FormEditor/FormSettings/Colors/index.js
FormEditor/FormSettings/Fonts/FontSelector.js
FormEditor/FormSettings/Fonts/css/fonts.css
FormEditor/FormSettings/Fonts/fontsConfig.js
FormEditor/FormSettings/Fonts/index.js
FormEditor/FormSettings/Settings/AlignmentSelector.js
FormEditor/FormSettings/Settings/BackgroundBlurSelector.js
FormEditor/FormSettings/Settings/SettingsForm.js
FormEditor/FormSettings/Settings/ThemePreview.js
FormEditor/FormSettings/Settings/css/alignmentSelector.css
FormEditor/FormSettings/Settings/css/backgroundBlur.css
FormEditor/FormSettings/Settings/css/theme.css
FormEditor/FormSettings/Settings/index.js
FormEditor/FormSettings/SettingsTabs.js
FormEditor/FormSettings/css/formSettings.css
FormEditor/FormSettings/css/mobile.css
FormEditor/FormSettings/css/settingsTabs.css
FormEditor/FormSettings/index.js
FormEditor/Hooks/fetchCanvas.js
FormEditor/LaunchPage/EmailSample/EmailSampleTab.js
FormEditor/LaunchPage/EmailSample/css/emailSample.css
FormEditor/LaunchPage/EmbedCode/EmbedCodeTab.js
FormEditor/LaunchPage/EmbedCode/css/embedCode.css
FormEditor/LaunchPage/css/launchPage.css
FormEditor/LaunchPage/css/mobile.css
FormEditor/LaunchPage/index.js
FormEditor/Theme/Square.js
FormEditor/Theme/css/animations.css
FormEditor/Theme/css/mobile.css
FormEditor/Theme/css/themeSelectorModal.css
FormEditor/Theme/css/themeSquare.css
FormEditor/Theme/defaultThemes.js
FormEditor/Theme/index.js
FormEditor/Utils/responsiveStyles.js
FormEditor/defaultElements.js
FormEditor/index.js
Giftcard/GiftCard/AddGiftcardSection/ValueSelector.js
Giftcard/GiftCard/AddGiftcardSection/css/addGiftCardSection.css
Giftcard/GiftCard/AddGiftcardSection/css/valueSelector.css
Giftcard/GiftCard/AddGiftcardSection/index.js
Giftcard/GiftCard/OverviewSection/SearchBar.js
Giftcard/GiftCard/OverviewSection/css/overviewSection.css
Giftcard/GiftCard/OverviewSection/index.js
Giftcard/GiftCard/ValidationSection/ValidationPopup.js
Giftcard/GiftCard/ValidationSection/css/validationPopup.css
Giftcard/GiftCard/ValidationSection/css/validationSection.css
Giftcard/GiftCard/ValidationSection/index.js
Giftcard/GiftCard/css/giftCard.css
Giftcard/GiftCard/index.js
Giftcard/GiftcardEditor/index.js
Login/OTPLogin/index.js
Login/css/login.css
Login/index.js
Mededeling/EditMededelingModal.js
Mededeling/MededelingForm.js
Mededeling/MededelingItem.js
Mededeling/MededelingList.js
Mededeling/css/mededeling.css
Mededeling/index.js
Menu/EditMenuModal.js
Menu/MenuForm.js
Menu/MenuItem.js
Menu/MenuList.js
Menu/css/menu.css
Menu/index.js
NewReservation/FormField.js
NewReservation/ReservationSidebar.js
NewReservation/ReservationStepTwo.js
NewReservation/ReservationSummary.js
NewReservation/StepOne/Calendar.js
NewReservation/StepOne/DateSelector.js
NewReservation/StepOne/TimeSelector.js
NewReservation/StepOne/Utils/dateUtils.js
NewReservation/StepOne/Utils/dates/blockDates.js
NewReservation/StepOne/Utils/dates/schemeDates.js
NewReservation/StepOne/Utils/exceptions.js
NewReservation/StepOne/Utils/generateDates.js
NewReservation/StepOne/Utils/generateTimes.js
NewReservation/StepOne/ValueSelector.js
NewReservation/StepOne/algorithm/.DS_Store
NewReservation/StepOne/algorithm/getAvailableTimeblocks.js
NewReservation/StepOne/algorithm/isDateAvailable.js
NewReservation/StepOne/algorithm/processing/dailyGuestCounts.js
NewReservation/StepOne/algorithm/processing/mealTypeCount.js
NewReservation/StepOne/algorithm/processing/timeblocksAvailable.js
NewReservation/StepOne/algorithm/reservation_data/counter.js
NewReservation/StepOne/algorithm/restaurant_data/exceptions.js
NewReservation/StepOne/algorithm/restaurant_data/openinghours.js
NewReservation/StepOne/css/calendar.css
NewReservation/StepOne/css/reservationMode.css
NewReservation/StepOne/css/timeSelector.css
NewReservation/StepOne/css/valueSelector.css
NewReservation/StepOne/index.js
NewReservation/css/newReservationAdmin.css
NewReservation/css/reservationSidebar.css
NewReservation/css/reservationSummary.css
NewReservation/css/reservationsStepTwo.css
NewReservation/index.js
Openingsuren/DayContent.js
Openingsuren/Hooks/useWindowWidth.js
Openingsuren/MaxCapacityAccordion.js
Openingsuren/NavigationBar.js
Openingsuren/ShiftsAccordion.js
Openingsuren/ToggleSwitch.js
Openingsuren/constants.js
Openingsuren/css/dayContent.css
Openingsuren/css/maxCapacityAccordion.css
Openingsuren/css/navigationBar.css
Openingsuren/css/schedulePage.css
Openingsuren/css/shiftsAccordion.css
Openingsuren/index.js
Personeel/EditPersoneelModal.js
Personeel/PersoneelForm.js
Personeel/PersoneelItem.js
Personeel/PersoneelList.js
Personeel/css/personeel.css
Personeel/index.js
Profile/AccountManage/FormField.js
Profile/AccountManage/Utils/validationUtils.js
Profile/AccountManage/css/accountManage.css
Profile/AccountManage/css/mobile.css
Profile/AccountManage/index.js
Profile/Hooks/avatarMapping.js
Profile/Hooks/useProfile.js
Profile/Language/css/language.css
Profile/Language/index.js
Profile/ProfileBio.js
Profile/ProfileHeader.js
Profile/ProfileImage.js
Profile/css/animations.css
Profile/css/language.css
Profile/css/mobile.css
Profile/css/style.css
Profile/index.js
Settings/EmailSettings/BannerUploadComponent.js
Settings/EmailSettings/EmailPreview.js
Settings/EmailSettings/GeneralSettings.js
Settings/EmailSettings/NotificationSettings.js
Settings/EmailSettings/css/emailSettings.css
Settings/EmailSettings/index.js
Settings/GeneralSettings/css/generalSettings.css
Settings/GeneralSettings/index.js
Settings/GeneralSettings/settings.md
Tables/TableEditor/FloorPlan.js
Tables/TableEditor/FloorPlanElement.js
Tables/TableEditor/Hooks/useElementsActions.js
Tables/TableEditor/Hooks/useLineActions.js
Tables/TableEditor/LinesLayer.js
Tables/TableEditor/Sidebar.js
Tables/TableEditor/Table.js
Tables/TableEditor/TableEditModalContent.js
Tables/TableEditor/Walls.js
Tables/TableEditor/css/app.css
Tables/TableEditor/css/floorPlan.css
Tables/TableEditor/css/sidebar.css
Tables/TableEditor/css/table.css
Tables/TableEditor/css/tableEditModalContent.css
Tables/TableEditor/css/walls.css
Tables/TableEditor/index.js
Tables/TableList/TableGroupRow.js
Tables/TableList/TableList.js
Tables/TableList/TableRow.js
Tables/TableList/css/tableList.css
Tables/TableList/index.js
Tables/TablePlan/FloorPlan.js
Tables/TablePlan/FloorPlanElement.js
Tables/TablePlan/Hooks/useReservations.js
Tables/TablePlan/Sidebar.js
Tables/TablePlan/Table.js
Tables/TablePlan/TableSlots.js
Tables/TablePlan/Walls.js
Tables/TablePlan/css/app.css
Tables/TablePlan/css/floorPlan.css
Tables/TablePlan/css/sidebar.css
Tables/TablePlan/css/table.css
Tables/TablePlan/css/tableslots.css
Tables/TablePlan/css/walls.css
Tables/TablePlan/index.js
Uitzonderingen/ExceptionCalendar.js
Uitzonderingen/ExceptionForm.js
Uitzonderingen/ExceptionItem.js
Uitzonderingen/ExceptionList.js
Uitzonderingen/ExceptionTabs.js
Uitzonderingen/Hooks/useExceptionForm.js
Uitzonderingen/Utils/utils.js
Uitzonderingen/constants.js
Uitzonderingen/css/exceptions.css
Uitzonderingen/index.js
UploadPdf/css/pdf.css
UploadPdf/index.js
