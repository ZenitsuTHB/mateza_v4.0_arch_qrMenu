File Contents:

--- DayContent.js ---
// DayContent.js

import React, { useState, useEffect } from 'react';
import './css/dayContent.css';
import MaxCapacityAccordion from './MaxCapacityAccordion';
import ShiftsAccordion from './ShiftsAccordion';
import useApi from '../../Hooks/useApi'; // Adjust the path based on your project structure
import useNotification from '../../Components/Notification';

const DayContent = ({ dayId, days, mealType }) => {
  const api = useApi();
  const day = days.find((d) => d.id === dayId);

  const { triggerNotification, NotificationComponent } = useNotification();

  const [dayData, setDayData] = useState({
    startTime: '',
    endTime: '',
    maxCapacityEnabled: false,
    maxCapacity: '',
    shiftsEnabled: false,
    shifts: [],
  });

  const [loading, setLoading] = useState(true);
  const [dataExists, setDataExists] = useState(false);

  useEffect(() => {
    // Fetch data from api/openingsuren
    const fetchData = async () => {
      setLoading(true);
      try {
        const response = await api.get(window.baseDomain + 'api/openingsuren' + '-' + mealType);
        // Assume the response has a structure similar to:
        // { schemeSettings: { Monday: { ... }, ... } }

        if (response && response.schemeSettings && response.schemeSettings[day.id]) {
          const dataForDay = response.schemeSettings[day.id];
          setDayData({
            startTime: dataForDay.startTime || '',
            endTime: dataForDay.endTime || '',
            maxCapacityEnabled: dataForDay.maxCapacityEnabled || false,
            maxCapacity: dataForDay.maxCapacity || '',
            shiftsEnabled: dataForDay.shiftsEnabled || false,
            shifts: dataForDay.shifts || [],
          });
          setDataExists(true);
        } else {
          // No data exists
          setDayData({
            startTime: '',
            endTime: '',
            maxCapacityEnabled: false,
            maxCapacity: '',
            shiftsEnabled: false,
            shifts: [],
          });
          setDataExists(false);
        }
      } catch (error) {
        console.error('Error fetching data:', error);
        // Handle error, perhaps set default values or show an error message
        setDataExists(false);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [api, day.id, mealType]);

  const handleSave = async () => {
    // Prepare data to send
    const updatedData = {
      schemeSettings: {
        [day.id]: {
          enabled: true, // Assuming the day is enabled
          startTime: dayData.startTime,
          endTime: dayData.endTime,
          maxCapacityEnabled: dayData.maxCapacityEnabled,
          maxCapacity: dayData.maxCapacity,
          shiftsEnabled: dayData.shiftsEnabled,
          shifts: dayData.shifts,
        },
      },
    };

    try {
      if (dataExists) {
        // Do PUT request
        await api.put(window.baseDomain + 'api/openingsuren' + '-' + mealType, updatedData);
      } else {
        // Do POST request
        await api.post(window.baseDomain + 'api/openingsuren'+ '-' + mealType, updatedData);
      }
      triggerNotification('Data succesvol opgeslagen', 'success');
    } catch (error) {
      console.error('Error saving data:', error);
      triggerNotification('Fout bij het opslaan van data', 'error');
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="schedule-page">
      {/* Title outside the container with the same class as AccountManage */}
      <h1 className="schedule-page-title">{day.title}</h1>

      <NotificationComponent />

      {/* White container for input fields */}
      <div className="day-content scheme-container">
        <div className="time-inputs-container">
          <div className="input-container">
            <label htmlFor="startTime">Start Tijd</label>
            <input
              type="time"
              id="startTime"
              name="startTime"
              value={dayData.startTime}
              onChange={(e) => setDayData({ ...dayData, startTime: e.target.value })}
            />
          </div>
          <div className="input-container">
            <label htmlFor="endTime">Eind Tijd</label>
            <input
              type="time"
              id="endTime"
              name="endTime"
              value={dayData.endTime}
              onChange={(e) => setDayData({ ...dayData, endTime: e.target.value })}
            />
          </div>
        </div>

        {/* MaxCapacityAccordion with props */}
        <MaxCapacityAccordion
          enabled={dayData.maxCapacityEnabled}
          setEnabled={(enabled) => setDayData({ ...dayData, maxCapacityEnabled: enabled })}
          maxCapacity={dayData.maxCapacity}
          setMaxCapacity={(maxCapacity) => setDayData({ ...dayData, maxCapacity })}
        />

        {/* ShiftsAccordion with props */}
        <ShiftsAccordion
          enabled={dayData.shiftsEnabled}
          setEnabled={(enabled) => setDayData({ ...dayData, shiftsEnabled: enabled })}
          shifts={dayData.shifts}
          setShifts={(shifts) => setDayData({ ...dayData, shifts })}
        />

        <button className="button-style-3" onClick={handleSave}>
          Opslaan
        </button>
      </div>
    </div>
  );
};

export default DayContent;


--- Hooks/useWindowWidth.js ---
// src/hooks/useWindowWidth.js

import { useState, useEffect } from 'react';

const useWindowWidth = () => {
  const [windowWidth, setWindowWidth] = useState(window.innerWidth);

  useEffect(() => {
    const handleResize = () => setWindowWidth(window.innerWidth);
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return windowWidth;
};

export default useWindowWidth;


--- MaxCapacityAccordion.js ---
// MaxCapacityAccordion.js

import React from 'react';
import { FaChevronDown } from 'react-icons/fa';
import ToggleSwitch from './ToggleSwitch';
import './css/maxCapacityAccordion.css';

const MaxCapacityAccordion = ({
  enabled,
  setEnabled,
  maxCapacity,
  setMaxCapacity,
}) => {
  const [isExpanded, setIsExpanded] = React.useState(enabled);

  React.useEffect(() => {
    setIsExpanded(enabled);
  }, [enabled]);

  const handleHeaderClick = () => {
    if (enabled) {
      setIsExpanded(!isExpanded);
    }
  };

  const handleToggle = () => {
    setEnabled(!enabled);
    if (!enabled) {
      setIsExpanded(true);
    } else {
      setIsExpanded(false);
    }
  };

  return (
    <div className="max-capacity-accordion">
      <div
        className={`item-header ${isExpanded ? 'expanded' : ''}`}
        onClick={handleHeaderClick}
      >
        <div className={`item-label ${!enabled ? 'disabled' : ''}`}>
          {enabled && (
            <FaChevronDown className={`arrow-icon ${isExpanded ? 'expanded' : ''}`} />
          )}
          <span>Max Capaciteit</span>
        </div>
        <div className="toggle-middle" onClick={(e) => e.stopPropagation()}>
          <ToggleSwitch checked={enabled} onChange={handleToggle} />
        </div>
      </div>
      {isExpanded && enabled && (
        <div className="item-content">
          <label htmlFor="maxCapacity">Max Capaciteit</label>
          <input
            type="number"
            id="maxCapacity"
            name="maxCapacity"
            value={maxCapacity}
            onChange={(e) => setMaxCapacity(e.target.value)}
            min="1"
          />
        </div>
      )}
    </div>
  );
};

export default MaxCapacityAccordion;


--- NavigationBar.js ---
// src/pages/SchedulePage/NavigationBar.js

import React from 'react';
import './css/navigationBar.css';
import {
  FaSun,
  FaCloud,
  FaUmbrella,
  FaBolt,
  FaRainbow,
  FaSnowflake,
  FaMoon,
} from 'react-icons/fa';
import { motion, LayoutGroup } from 'framer-motion';

const NavigationBar = ({ days, selectedDay, onDayClick }) => {
  const icons = {
    FaSun: <FaSun />,
    FaCloud: <FaCloud />,
    FaUmbrella: <FaUmbrella />,
    FaBolt: <FaBolt />,
    FaRainbow: <FaRainbow />,
    FaSnowflake: <FaSnowflake />,
    FaMoon: <FaMoon />,
  };

  return (
    <div className="schedule-page navigation-bar">
      <div className="navigation-container">
        <LayoutGroup>
          {days.map((day, index) => {
            const isSelected = selectedDay === day.id;
            return (
              <motion.div
                key={day.id}
                className={`navigation-item ${isSelected ? 'selected' : ''}`}
                onClick={() => onDayClick(day.id)}
                whileHover={{ scale: 1.05 }}
                animate={{ scale: isSelected ? 1.1 : 1 }}
                layout
              >
                {isSelected && (
                  <motion.div
                    className="selected-day-background"
                    layoutId="selected-day-background"
                    transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                  />
                )}
                <div className="icon">{icons[day.icon]}</div>
                <div className="label">{day.label}</div>
                {/* Render border-right only if not selected and not the last item */}
                {!isSelected && index < days.length - 1 && (
                  <div className="border-right"></div>
                )}
              </motion.div>
            );
          })}
        </LayoutGroup>
      </div>
    </div>
  );
};

export default NavigationBar;


--- ShiftsAccordion.js ---
// ShiftsAccordion.js

import React, { useState, useEffect } from 'react';
import { FaChevronDown } from 'react-icons/fa';
import ToggleSwitch from './ToggleSwitch';
import './css/shiftsAccordion.css';

const ShiftsAccordion = ({ enabled, setEnabled, shifts, setShifts }) => {
  const [isExpanded, setIsExpanded] = useState(enabled);

  useEffect(() => {
    setIsExpanded(enabled);
  }, [enabled]);

  const handleHeaderClick = () => {
    if (enabled) {
      setIsExpanded(!isExpanded);
    }
  };

  const handleToggle = () => {
    setEnabled(!enabled);
    if (!enabled) {
      setIsExpanded(true);
    } else {
      setIsExpanded(false);
    }
  };

  const addNewShift = () => {
    setShifts([...shifts, { name: '', time: '' }]);
  };

  const handleShiftChange = (index, field, value) => {
    const newShifts = [...shifts];
    newShifts[index][field] = value;
    setShifts(newShifts);
  };

  return (
    <div className="shifts-accordion">
      <div
        className={`item-header ${isExpanded ? 'expanded' : ''}`}
        onClick={handleHeaderClick}
      >
        <div className={`item-label ${!enabled ? 'disabled' : ''}`}>
          {enabled && (
            <FaChevronDown className={`arrow-icon ${isExpanded ? 'expanded' : ''}`} />
          )}
          <span>Shifts ({shifts.length})</span>
        </div>
        <div className="toggle-middle" onClick={(e) => e.stopPropagation()}>
          <ToggleSwitch checked={enabled} onChange={handleToggle} />
        </div>
      </div>
      {isExpanded && enabled && (
        <div className="item-content">
          {shifts.map((shift, index) => (
            <div key={index} className="shift-row">
              <input
                type="time"
                value={shift.time}
                onChange={(e) => handleShiftChange(index, 'time', e.target.value)}
                placeholder="Tijd"
              />
              <input
                type="text"
                placeholder="Shift Naam"
                value={shift.name}
                onChange={(e) => handleShiftChange(index, 'name', e.target.value)}
              />
            </div>
          ))}
          <div className="add-shift" onClick={addNewShift}>
            <span>Voeg Nieuwe Shift Toe</span>
          </div>
        </div>
      )}
    </div>
  );
};

export default ShiftsAccordion;


--- ToggleSwitch.js ---
// ToggleSwitch.jsx

import React from 'react';
import PropTypes from 'prop-types';

const ToggleSwitch = ({ checked, onChange, label, className }) => (
  <div className={`day-header ${className || ''}`}>
    <span className="day-label">{label}</span>
    <label className="switch" aria-label={label}>
      <input
        type="checkbox"
        checked={checked}
        onChange={onChange}
        aria-checked={checked}
        aria-labelledby={`${label}-toggle`}
      />
      <span className="slider round"></span>
    </label>
  </div>
);

ToggleSwitch.propTypes = {
  checked: PropTypes.bool.isRequired,
  onChange: PropTypes.func.isRequired,
  label: PropTypes.string.isRequired,
  className: PropTypes.string,
};

ToggleSwitch.defaultProps = {
  className: '',
};

export default ToggleSwitch;


--- index.js ---
// src/pages/SchedulePage/index.js

import React, { useState } from 'react';
import './css/schedulePage.css';
import NavigationBar from './NavigationBar';
import DayContent from './DayContent';
import { withHeader } from '../../Components/Structural/Header';
import useWindowWidth from './Hooks/useWindowWidth'; // Import the custom hook

const SchedulePage = ({ mealType }) => { // Accept mealType as a prop
  const [selectedDay, setSelectedDay] = useState('Monday');
  const windowWidth = useWindowWidth(); // Use the custom hook

  const isMobile = windowWidth < 900; // Determine if the screen is mobile-sized

  const days = [
    { id: 'Monday', title: 'Maandag', label: isMobile ? 'Ma' : 'Maandag', icon: 'FaSun' },
    { id: 'Tuesday', title: 'Dinsdag', label: isMobile ? 'Di' : 'Dinsdag', icon: 'FaCloud' },
    { id: 'Wednesday', title: 'Woensdag', label: isMobile ? 'Wo' : 'Woensdag', icon: 'FaUmbrella' },
    { id: 'Thursday', title: 'Donderdag', label: isMobile ? 'Do' : 'Donderdag', icon: 'FaBolt' },
    { id: 'Friday', title: 'Vrijdag', label: isMobile ? 'Vr' : 'Vrijdag', icon: 'FaRainbow' },
    { id: 'Saturday', title: 'Zaterdag', label: isMobile ? 'Za' : 'Zaterdag', icon: 'FaSnowflake' },
    { id: 'Sunday', title: 'Zondag', label: isMobile ? 'Zo' : 'Zondag', icon: 'FaMoon' },
  ];

  const handleDayClick = (dayId) => {
    setSelectedDay(dayId);
  };

  return (
    <div className="schedule-page-component">
      <div className="schedule-page">
        <NavigationBar days={days} selectedDay={selectedDay} onDayClick={handleDayClick} />
        {selectedDay && <DayContent dayId={selectedDay} days={days} mealType={mealType} />} {/* Pass mealType here */}
      </div>
    </div>
  );
};

export default withHeader(SchedulePage);



Directory Structure for "/Users/thibaultvandesompele/Desktop/Mateza 4.0/Client/Dashboard/dashboard-general/src/Pages/Openingsuren":

├── DayContent.js
├── Hooks
│   └── useWindowWidth.js
├── MaxCapacityAccordion.js
├── NavigationBar.js
├── ShiftsAccordion.js
├── ToggleSwitch.js
├── css
│   ├── dayContent.css
│   ├── maxCapacityAccordion.css
│   ├── navigationBar.css
│   ├── schedulePage.css
│   └── shiftsAccordion.css
└── index.js


List of Files:
DayContent.js
Hooks/useWindowWidth.js
MaxCapacityAccordion.js
NavigationBar.js
ShiftsAccordion.js
ToggleSwitch.js
index.js
