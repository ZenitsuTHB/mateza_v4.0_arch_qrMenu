File Contents:

--- FloorPlan.js ---
// FloorPlan.js
import React, { useState, useCallback } from 'react';
import { useDrop } from 'react-dnd';
import './css/floorPlan.css';
import { ResizableBox } from 'react-resizable';
import 'react-resizable/css/styles.css';

const FloorPlan = () => {
  const [elements, setElements] = useState([]);

  const addElement = (element) => {
    setElements((prevElements) => [...prevElements, element]);
  };

  const updateElement = useCallback((id, x, y, updatedProps = {}) => {
    setElements((prevElements) =>
      prevElements.map((el) =>
        el.id === id
          ? {
              ...el,
              x: x !== undefined ? x : el.x,
              y: y !== undefined ? y : el.y,
              ...updatedProps,
            }
          : el
      )
    );
  }, []);

  const removeElement = useCallback((id) => {
    setElements((prevElements) => prevElements.filter((el) => el.id !== id));
  }, []);

  const snapToGrid = (x, y, gridSize = 50) => {
    const snappedX = Math.round(x / gridSize) * gridSize;
    const snappedY = Math.round(y / gridSize) * gridSize;
    return [snappedX, snappedY];
  };

  const [, drop] = useDrop({
    accept: ['TABLE', 'DECORATION', 'TABLE_ON_FLOOR', 'DECORATION_ON_FLOOR'],
    drop: (item, monitor) => {
      const offset = monitor.getClientOffset();
      const floorPlanRect = document
        .getElementById('floor-plan-container')
        .getBoundingClientRect();

      let x = offset.x - floorPlanRect.left - item.width / 2;
      let y = offset.y - floorPlanRect.top - item.height / 2;

      const [snappedX, snappedY] = snapToGrid(x, y);
      x = Math.max(0, Math.min(snappedX, floorPlanRect.width - item.width));
      y = Math.max(0, Math.min(snappedY, floorPlanRect.height - item.height));

      if (item.type === 'TABLE' || item.type === 'DECORATION') {
        const id = Date.now();

        addElement({
          id,
          type: item.elementType,
          subtype: item.subtype,
          x,
          y,
          width: item.width,
          height: item.height,
          capacity: item.capacity,
          name:
            item.type === 'TABLE'
              ? `${item.subtype.charAt(0).toUpperCase() + item.subtype.slice(1)} Table ${id}`
              : `${item.subtype.charAt(0).toUpperCase() + item.subtype.slice(1)} Decoration ${id}`,
          minCapacity: item.minCapacity || 1,
          maxCapacity: item.maxCapacity || 10,
          priority: 'Medium',
        });
      } else if (item.type === 'TABLE_ON_FLOOR' || item.type === 'DECORATION_ON_FLOOR') {
        updateElement(item.id, x, y);
      }
    },
  });

  return (
    <ResizableBox
      width={800}
      height={600}
      minConstraints={[400, 300]}
      maxConstraints={[1600, 1200]}
      className="resizable-floor-plan"
    >
      <div id="floor-plan-container" className="floor-plan" ref={drop}>
       
      </div>
    </ResizableBox>
  );
};

export default FloorPlan;


--- Sidebar.js ---
// Sidebar.js
import React, { useState, useRef } from 'react';
import { motion } from 'framer-motion';
import Table from './Table.js';
import Walls from './Walls.js';
import './css/sidebar.css';

const Sidebar = ({ tables, walls }) => {
  const [activeTab, setActiveTab] = useState('tables');
  const [searchTerm, setSearchTerm] = useState('');
  const [pendingTab, setPendingTab] = useState(null);

  const tablesRef = useRef();
  const wallsRef = useRef();

  const isIframe = typeof window !== 'undefined' && window.isIframe;

  const tabs = [
    { id: 'tables', label: 'Tafels', title: "Beheer Tafels" },
    { id: 'walls', label: 'Muren', title: "Beheer Muren" },
  ];

  const filteredTables = tables.filter(
    (table) =>
      table.id.toString().includes(searchTerm) ||
      table.numberOfGuests.toString().includes(searchTerm)
  );

  const filteredWalls = walls.filter(
    (wall) =>
      wall.id.toString().includes(searchTerm) ||
      wall.length.toString().includes(searchTerm)
  );

  const handleTabClick = async (tabId, tabTitle) => {
    let currentRef;
    if (activeTab === 'tables') {
      currentRef = tablesRef;
    } else if (activeTab === 'walls') {
      currentRef = wallsRef;
    }

    if (currentRef && currentRef.current && currentRef.current.isDirty) {
      if (isIframe) {
        try {
          await currentRef.current.handleSave();
          setActiveTab(tabId);
        } catch (error) {
          console.error('Error saving before tab switch:', error);
        }
      } else {
        setPendingTab({ id: tabId, title: tabTitle });
      }
    } else {
      setActiveTab(tabId);
    }
  };

  return (
    <div className="sidebar">
      <div className="tabs">
        <div className="buttons-container">
          {tabs.map((tab) => (
            <motion.button
              key={tab.id}
              type="button"
              className={`tab-button ${activeTab === tab.id ? 'active' : ''}`}
              onClick={() => handleTabClick(tab.id, tab.title)}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <span className="tab-label">{tab.label}</span>
              {activeTab === tab.id && (
                <motion.div
                  layoutId="underline-sidebar-tabs"
                  className="tab-underline"
                  initial={false}
                  animate={{ opacity: 1 }}
                  transition={{ duration: 0.3 }}
                />
              )}
            </motion.button>
          ))}
        </div>
      </div>
      <div className="search-bar">
        <input
          type="text"
          placeholder={`Zoek ${activeTab === 'tables' ? 'Tafels' : 'Muren'}...`}
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          aria-label={`Zoek ${activeTab === 'tables' ? 'Tafels' : 'Muren'}`}
        />
      </div>
      <div className="items-list">
        {activeTab === 'tables' && filteredTables.length > 0 ? (
          <div className="grid-container">
            {filteredTables.map((table) => (
              <div key={table.id} className="item">
                <Table numberOfGuests={table.numberOfGuests} ref={tablesRef} />
                <div className="item-info">
                  <p>Tafel {table.id}</p>
                  <p>Gasten: {table.numberOfGuests}</p>
                </div>
              </div>
            ))}
          </div>
        ) : activeTab === 'walls' && filteredWalls.length > 0 ? (
          <div className="grid-container">
            {filteredWalls.map((wall) => (
              <div key={wall.id} className="item">
                <Walls length={wall.length} ref={wallsRef} />
                <div className="item-info">
                  <p>Muur {wall.id}</p>
                  <p>Lengte: {wall.length} eenheden</p>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p className="no-results">Geen {activeTab === 'tables' ? 'tafels' : 'muren'} gevonden.</p>
        )}
      </div>
    </div>
  );
};

export default Sidebar;


--- Table.js ---
// Table.js
import React from 'react';
import './css/table.css';

const Table = ({ numberOfGuests }) => {
  const isSquare = numberOfGuests === 4;

  const tableWidth = isSquare ? 70 : 70 + (numberOfGuests - 4) * 15;
  const tableHeight = 70;

  const chairsPerSide = Math.ceil(numberOfGuests / 2);

  const topChairs = [];
  const bottomChairs = [];

  for (let i = 0; i < chairsPerSide; i++) {
    topChairs.push(i);
    bottomChairs.push(i);
  }

  return (
    <div
      className="table-container"
      style={{ width: `${tableWidth}px`, height: `${tableHeight + 80}px` }}
    >
      <div
        className="chairs top-chairs"
        style={{
          width: `${tableWidth}px`,
        }}
      >
        {topChairs.slice(0, Math.floor(numberOfGuests / 2)).map((chair, index) => (
          <div key={`top-${index}`} className="chair"></div>
        ))}
      </div>
      <div
        className="table"
        style={{
          width: `${tableWidth}px`,
          height: `${tableHeight}px`,
        }}
      ></div>
      <div
        className="chairs bottom-chairs"
        style={{
          width: `${tableWidth}px`,
        }}
      >
        {bottomChairs.slice(0, Math.ceil(numberOfGuests / 2)).map((chair, index) => (
          <div key={`bottom-${index}`} className="chair"></div>
        ))}
      </div>
    </div>
  );
};

export default Table;


--- Walls.js ---
// Walls.js
import React from 'react';
import './css/walls.css';

const Walls = ({ length }) => {
  const wallWidth = 0 + (length - 1) * 20;
  const wallHeight = 20;

  return (
    <div
      className="walls-container"
      style={{ width: `${wallWidth}px`, height: `${wallHeight}px` }}
    >
      <div className="wall"></div>
    </div>
  );
};

export default Walls;


--- css/app.css ---
/* app.css */
.table-plan-page .app-container {
	display: flex;
	flex-direction: row;
	height: 100vh;
	width: 100vw;
	box-sizing: border-box;
	padding: 20px;
}

.table-plan-page .floor-plan {
	flex: 3;
	margin-right: 20px;
	background-color: #ffffff;
	border-radius: 8px;
	overflow: hidden;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}


--- css/floorPlan.css ---
/* floorPlan.css */
.table-plan-page .floor-plan {
	position: relative;
	width: 100%;
	height: 100%;
	background-color: #ffffff;
	border: 2px solid #ccc;
	box-sizing: border-box;
	overflow: hidden;
	background-image:
	  linear-gradient(to right, #ddd 1px, transparent 1px),
	  linear-gradient(to bottom, #ddd 1px, transparent 1px);
	background-size: 50px 50px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
	border-radius: 8px;
	transition: width 0.2s, height 0.2s;
}

.table-plan-page .resizable-floor-plan {
	position: relative;
	width: 100%;
	height: 100%;
}


--- css/sidebar.css ---
/* sidebar.css */
.table-plan-page .sidebar {
	width: 350px;
	position: fixed;
	height: calc(100% - 60px);
	right: 0;
	top: 60px;
	background-color: rgb(220, 220, 220);
	box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
	padding: 20px;
	overflow-y: auto;
	z-index: 1000;
}

.table-plan-page .tabs {
	width: 100%;
	align-items: center;
	justify-content: center;
	display: flex;
	margin-bottom: 30px;
	max-width: 800px;
	margin: 0 auto;
}

.table-plan-page .tabs .buttons-container {
	display: flex;
}

.table-plan-page .tabs .tab-button {
	position: relative;
	padding: 10px 20px;
	background: none;
	border: none;
	outline: none;
	cursor: pointer;
	font-size: 16px;
	color: #333;
	transition: color 0.3s;
}

.table-plan-page .tabs .tab-button.active {
	color: var(--color-blue, #007bff);
}

.table-plan-page .tabs .tab-button:hover {
	color: #555;
}

.table-plan-page .tabs .tab-underline {
	position: absolute;
	bottom: -2px;
	left: 0;
	right: 0;
	height: 2px;
	background-color: var(--color-blue, #007bff);
	border-radius: 5px;
}

.table-plan-page .search-bar {
	margin-bottom: 20px;
	margin-top: 20px;
}

.table-plan-page .search-bar input {
	width: 100%;
	padding: 8px 12px;
	border: 1px solid #cccccc;
	border-radius: 4px;
	font-size: 14px;
}

.table-plan-page .items-list {
	display: flex;
	flex-direction: column;
	gap: 20px;
}

.table-plan-page .grid-container {
	display: grid;
	grid-template-columns: repeat(2, 1fr);
	gap: 20px;
}

.table-plan-page .item {
	display: flex;
	flex-direction: column;
	align-items: center;
	border: 1px solid #e0e0e0;
	padding: 10px;
	border-radius: 8px;
	background-color: #fafafa;
	transition: box-shadow 0.2s, transform 0.2s;
}

.table-plan-page .item:hover {
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
	transform: translateY(-2px);
}

.table-plan-page .item-info {
	margin-top: 10px;
	text-align: center;
}

.table-plan-page .item-info p {
	margin: 2px 0;
	font-size: 14px;
	color: #555555;
}

.table-plan-page .no-results {
	text-align: center;
	color: #888888;
}

.table-plan-page .unsaved-changes-modal {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background-color: rgba(0, 0, 0, 0.5);
	display: flex;
	justify-content: center;
	align-items: center;
}

.table-plan-page .unsaved-changes-modal .modal-content {
	background-color: #fff;
	padding: 30px 20px;
	border-radius: 5px;
	width: 90%;
}

.table-plan-page .unsaved-changes-modal .modal-content p {
	font-size: 16px;
	margin-bottom: 30px;
	text-align: center;
}

.table-plan-page .unsaved-changes-modal .modal-buttons {
	display: flex;
	justify-content: center;
}

.table-plan-page .unsaved-changes-modal .modal-buttons .cancel-button,
.table-plan-page .unsaved-changes-modal .modal-buttons .discard-button {
	padding: 10px 20px;
	font-size: 16px;
	cursor: pointer;
	border: none;
	position: relative;
	border-radius: 5px;
}

.table-plan-page .unsaved-changes-modal .modal-buttons .cancel-button {
	margin-right: 10px;
	background-color: #f0f0f0;
	color: #333333;
}

@media (max-width: 768px) {
	.table-plan-page .grid-container {
	  grid-template-columns: 1fr;
	}
}


--- css/table.css ---
/* table.css */
.table-plan-page .table-container {
	position: relative;
	display: flex;
	align-items: center;
	justify-content: center;
	height: 80px;
}

.table-plan-page .table {
	background-color: #f5f5dc;
	border: 2px solid #d2b48c;
	border-radius: 8px;
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	z-index: 2;
}

.table-plan-page .chairs {
	display: flex;
	justify-content: center;
	gap: 10px;
	position: absolute;
	left: 50%;
	transform: translateX(-50%);
	z-index: 1;
}

.table-plan-page .top-chairs {
	top: 0;
	transform: translate(-50%, 150%);
}

.table-plan-page .bottom-chairs {
	bottom: 0;
	transform: translate(-50%, -150%);
}

.table-plan-page .chair {
	width: 20px;
	height: 20px;
	background-color: #f5f5dc;
	border: 2px solid #d2b48c;
	border-radius: 50%;
}


--- css/walls.css ---
/* walls.css */
.table-plan-page .walls-container {
	display: flex;
	align-items: center;
	justify-content: center;
	margin: 10px;
}

.table-plan-page .wall {
	width: 100%;
	height: 100%;
	background-color: #8b4513;
	border: 2px solid #654321;
	border-radius: 4px;
}


--- index.js ---
// index.js
import React from 'react';
import FloorPlan from './FloorPlan.js';
import Sidebar from './Sidebar.js';
import { withHeader } from '../../Components/Structural/Header/index.js';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import './css/app.css';

const TablePlan = () => {
  const tables = [
    { id: 1, numberOfGuests: 4 },
    { id: 2, numberOfGuests: 6 },
    { id: 3, numberOfGuests: 2 },
    { id: 4, numberOfGuests: 8 },
    { id: 5, numberOfGuests: 4 },
    { id: 6, numberOfGuests: 5 },
  ];

  const walls = [
    { id: 1, length: 3 },
    { id: 2, length: 5 },
    { id: 3, length: 2 },
    { id: 4, length: 4 },
    { id: 5, length: 6 },
  ];

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="table-plan-page">
        <div className="app-container">
          <FloorPlan />
          <Sidebar tables={tables} walls={walls} />
        </div>
      </div>
    </DndProvider>
  );
};

export default withHeader(TablePlan);



Directory Structure for "/Users/thibaultvandesompele/Desktop/Mateza 4.0/Client/Dashboard/dashboard-general/src/Pages/TablePlan":

├── FloorPlan.js
├── Sidebar.js
├── Table.js
├── Walls.js
├── css
│   ├── app.css
│   ├── floorPlan.css
│   ├── sidebar.css
│   ├── table.css
│   └── walls.css
└── index.js


List of Files:
FloorPlan.js
Sidebar.js
Table.js
Walls.js
css/app.css
css/floorPlan.css
css/sidebar.css
css/table.css
css/walls.css
index.js

**Instruction:**
1. Please encapsulate the main component in index.js inside the `.component-name-component` class.
2. Prefix all CSS classes with the `.component-name-component` class.

**Examples:**

*Encapsulation in index.js:*
```jsx
<div className="profile-component">
    <h2 className="account-manage-title">Admin Reservaties</h2>
    <div className="account-manage-container">
        {/* ... */}
        onClose={() => setIsModalOpen(false)}
    </div>
</div>
```

*Prefixed CSS Classes:*
```css
.component-name-component .account-manage-container {
    justify-content: center;
    align-items: center;
    flex-direction: column;
    position: relative;
    width: 100%;
    max-width: 600px;
    text-align: center;
    background-color: white;
}

.component-name-component .modal-title {
    text-align: center;
    width: 100%;
    margin-top: 20px;
    margin-bottom: 40px;
}
```Sometimes the encapsulation is already done, and we don't need to do it twice. Don't write any comments. Delete all comments and don't write any extra comments.Only print the code with changes. Print the codes in full. Don't skip anything print them full.