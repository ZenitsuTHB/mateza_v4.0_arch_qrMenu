File Contents:

--- EditMenuModal.js ---
import React, { useState } from 'react';
import ModalWithoutTabs from '../../Components/Structural/Modal/Standard';
import './css/menu.css';

const EditMenuModal = ({
  isVisible,
  menu,
  api,
  triggerNotification,
  refreshMenus,
  onClose,
}) => {
  const [formData, setFormData] = useState({
    name: menu.name || '',
    startDate: menu.startDate || '',
    endDate: menu.endDate || '',
    startHour: menu.startHour || '',
    endHour: menu.endHour || '',
    daysOfWeek: menu.daysOfWeek || [],
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;

    if (type === 'checkbox') {
      const day = value;
      setFormData((prev) => {
        let daysOfWeek = [...prev.daysOfWeek];
        if (checked) {
          daysOfWeek.push(day);
        } else {
          daysOfWeek = daysOfWeek.filter((d) => d !== day);
        }
        return { ...prev, daysOfWeek };
      });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    setErrors({ ...errors, [name]: '' });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const validationErrors = {};
    if (!formData.name.trim()) validationErrors.name = 'Menu naam is verplicht.';
    if (!formData.startDate) validationErrors.startDate = 'Startdatum is verplicht.';
    if (!formData.endDate) validationErrors.endDate = 'Einddatum is verplicht.';
    if (!formData.startHour) validationErrors.startHour = 'Startuur is verplicht.';
    if (!formData.endHour) validationErrors.endHour = 'Einduur is verplicht.';
    if (formData.daysOfWeek.length === 0) validationErrors.daysOfWeek = 'Selecteer minstens één dag.';

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    const payload = {
      ...formData,
    };

    try {
      const response = await api.put(`${window.baseDomain}api/menu/${menu._id}`, payload);
      if (response) {
        triggerNotification('Menu succesvol bijgewerkt', 'success');
        refreshMenus();
        onClose();
      } else {
        triggerNotification('Fout bij het bijwerken van het menu', 'error');
      }
    } catch (error) {
      console.error('Error updating menu:', error);
      triggerNotification('Fout bij het bijwerken van het menu', 'error');
    }
  };

  if (!isVisible) return null;

  return (
    <ModalWithoutTabs
      onClose={onClose}
      content={
        <div className="menu-component__edit-modal">
          <form className="menu-component__form" onSubmit={handleSubmit}>
            <div className="menu-component__form-group">
              <label>Menu Naam</label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className="menu-component__input"
              />
              {errors.name && <p className="menu-component__error">{errors.name}</p>}
            </div>

            <div className="menu-component__form-group">
              <label>Start Datum</label>
              <input
                type="date"
                name="startDate"
                value={formData.startDate}
                onChange={handleChange}
                className="menu-component__input"
              />
              {errors.startDate && <p className="menu-component__error">{errors.startDate}</p>}
            </div>

            <div className="menu-component__form-group">
              <label>Eind Datum</label>
              <input
                type="date"
                name="endDate"
                value={formData.endDate}
                onChange={handleChange}
                className="menu-component__input"
              />
              {errors.endDate && <p className="menu-component__error">{errors.endDate}</p>}
            </div>

            <div className="menu-component__form-group">
              <label>Start Uur</label>
              <input
                type="time"
                name="startHour"
                value={formData.startHour}
                onChange={handleChange}
                className="menu-component__input"
              />
              {errors.startHour && <p className="menu-component__error">{errors.startHour}</p>}
            </div>

            <div className="menu-component__form-group">
              <label>Eind Uur</label>
              <input
                type="time"
                name="endHour"
                value={formData.endHour}
                onChange={handleChange}
                className="menu-component__input"
              />
              {errors.endHour && <p className="menu-component__error">{errors.endHour}</p>}
            </div>

            <div className="menu-component__form-group">
              <label>Dagen van de week</label>
              <div className="menu-component__checkbox-group">
                {['maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag', 'zondag'].map(
                  (day) => (
                    <label key={day} className="menu-component__checkbox-label">
                      <input
                        type="checkbox"
                        name="daysOfWeek"
                        value={day}
                        checked={formData.daysOfWeek.includes(day)}
                        onChange={handleChange}
                        className="menu-component__checkbox"
                      />
                      {day}
                    </label>
                  )
                )}
              </div>
              {errors.daysOfWeek && <p className="menu-component__error">{errors.daysOfWeek}</p>}
            </div>

            <button type="submit" className="button-style-3">
              Menu Bijwerken
            </button>
          </form>
        </div>
      }
    />
  );
};

export default EditMenuModal;


--- MenuForm.js ---
import React, { useState } from 'react';
import './css/menu.css';

const MenuForm = ({ api, triggerNotification, refreshMenus }) => {
  const [formData, setFormData] = useState({
    name: '',
    startDate: '',
    endDate: '',
    startHour: '',
    endHour: '',
    daysOfWeek: [],
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;

    if (type === 'checkbox') {
      const day = value;
      setFormData((prevFormData) => {
        let daysOfWeek = [...prevFormData.daysOfWeek];
        if (checked) {
          daysOfWeek.push(day);
        } else {
          daysOfWeek = daysOfWeek.filter((d) => d !== day);
        }
        return { ...prevFormData, daysOfWeek };
      });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    setErrors({ ...errors, [name]: '' });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const validationErrors = {};
    if (!formData.name.trim()) validationErrors.name = 'Menu naam is verplicht.';
    if (!formData.startDate) validationErrors.startDate = 'Startdatum is verplicht.';
    if (!formData.endDate) validationErrors.endDate = 'Einddatum is verplicht.';
    if (!formData.startHour) validationErrors.startHour = 'Startuur is verplicht.';
    if (!formData.endHour) validationErrors.endHour = 'Einduur is verplicht.';
    if (formData.daysOfWeek.length === 0) validationErrors.daysOfWeek = 'Selecteer minstens één dag.';

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    const payload = {
      name: formData.name,
      startDate: formData.startDate,
      endDate: formData.endDate,
      startHour: formData.startHour,
      endHour: formData.endHour,
      daysOfWeek: formData.daysOfWeek,
    };

    try {
      const response = await api.post(`${window.baseDomain}api/menu`, payload);
      if (response) {
        setFormData({
          name: '',
          startDate: '',
          endDate: '',
          startHour: '',
          endHour: '',
          daysOfWeek: [],
        });
        setErrors({});
        triggerNotification('Menu succesvol toegevoegd', 'success');
        refreshMenus();
      } else {
        triggerNotification('Fout bij het toevoegen van het menu', 'error');
      }
    } catch (error) {
      console.error('Error adding menu:', error);
      triggerNotification('Fout bij het toevoegen van het menu', 'error');
    }
  };

  return (
    <form className="menu-component__form" onSubmit={handleSubmit}>
      <div className="menu-component__form-group">
        <label>Menu Naam</label>
        <input
          type="text"
          name="name"
          value={formData.name}
          onChange={handleChange}
          placeholder="Menu Naam"
          className="menu-component__input"
        />
        {errors.name && <p className="menu-component__error">{errors.name}</p>}
      </div>

      <div className="menu-component__form-group">
        <label>Start Datum</label>
        <input
          type="date"
          name="startDate"
          value={formData.startDate}
          onChange={handleChange}
          className="menu-component__input"
        />
        {errors.startDate && <p className="menu-component__error">{errors.startDate}</p>}
      </div>

      <div className="menu-component__form-group">
        <label>Eind Datum</label>
        <input
          type="date"
          name="endDate"
          value={formData.endDate}
          onChange={handleChange}
          className="menu-component__input"
        />
        {errors.endDate && <p className="menu-component__error">{errors.endDate}</p>}
      </div>

      <div className="menu-component__form-group">
        <label>Start Uur</label>
        <input
          type="time"
          name="startHour"
          value={formData.startHour}
          onChange={handleChange}
          className="menu-component__input"
        />
        {errors.startHour && <p className="menu-component__error">{errors.startHour}</p>}
      </div>

      <div className="menu-component__form-group">
        <label>Eind Uur</label>
        <input
          type="time"
          name="endHour"
          value={formData.endHour}
          onChange={handleChange}
          className="menu-component__input"
        />
        {errors.endHour && <p className="menu-component__error">{errors.endHour}</p>}
      </div>

      <div className="menu-component__form-group">
        <label>Dagen van de week</label>
        <div className="menu-component__checkbox-group">
          {['maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag', 'zondag'].map(
            (day) => (
              <label key={day} className="menu-component__checkbox-label">
                <input
                  type="checkbox"
                  name="daysOfWeek"
                  value={day}
                  checked={formData.daysOfWeek.includes(day)}
                  onChange={handleChange}
                  className="menu-component__checkbox"
                />
                {day.charAt(0).toUpperCase() + day.slice(1)}
              </label>
            )
          )}
        </div>
        {errors.daysOfWeek && <p className="menu-component__error">{errors.daysOfWeek}</p>}
      </div>

      <button type="submit" className="button-style-3">
        Menu Toevoegen
      </button>
    </form>
  );
};

export default MenuForm;


--- MenuItem.js ---
import React, { useState } from 'react';
import './css/menu.css';
import { FaEllipsisV, FaPencilAlt, FaTrashAlt } from 'react-icons/fa'; // Import additional icons
import ConfirmationModal from '../../Components/Structural/Modal/Delete'; // Adjust the path if necessary
import EditMenuModal from './EditMenuModal';

const MenuItem = ({ menu, api, triggerNotification, refreshMenus }) => {
  const [isTooltipOpen, setIsTooltipOpen] = useState(false);
  const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
  const [isEditModalVisible, setIsEditModalVisible] = useState(false);

  const handleEllipsisClick = () => {
    setIsTooltipOpen(!isTooltipOpen);
  };

  const handleDeleteClick = () => {
    setIsDeleteModalVisible(true);
    setIsTooltipOpen(false);
  };

  const handleEditClick = () => {
    setIsEditModalVisible(true);
    setIsTooltipOpen(false);
  };

  const handleConfirmDelete = async () => {
    setIsDeleteModalVisible(false);
    try {
      await api.delete(`${window.baseDomain}api/menu/${menu._id}`);
      triggerNotification('Menu succesvol verwijderd', 'success');
      refreshMenus();
    } catch (error) {
      console.error('Error deleting menu:', error);
      triggerNotification('Fout bij het verwijderen van het menu', 'error');
    }
  };

  const handleCancelDelete = () => {
    setIsDeleteModalVisible(false);
  };

  return (
    <div className="menu-component__menu-item">
      <div className="menu-component__menu-content">
        <h4>{menu.name}</h4>
        <p>
          Geldig van {menu.startDate} tot {menu.endDate}
        </p>
        <p>
          Van {menu.startHour} tot {menu.endHour}
        </p>
        <p>Dagen: {menu.daysOfWeek.join(', ')}</p>
      </div>
      <div className="menu-component__menu-actions">
        <FaEllipsisV onClick={handleEllipsisClick} className="menu-component__ellipsis-icon" />
        {isTooltipOpen && (
          <div className="tooltip-container">
            <div className="tooltip-item" onClick={handleEditClick}>
              <FaPencilAlt className="tooltip-icon" />
              Bewerken
            </div>
            <div className="tooltip-separator"></div>
            <div className="tooltip-item delete-item" onClick={handleDeleteClick}>
              <FaTrashAlt className="tooltip-icon" />
              Verwijderen
            </div>
          </div>
        )}
      </div>
      {isDeleteModalVisible && (
        <ConfirmationModal
          isVisible={isDeleteModalVisible}
          title="Menu Verwijderen"
          message="Weet u zeker dat u dit menu wilt verwijderen?"
          onConfirm={handleConfirmDelete}
          onCancel={handleCancelDelete}
          confirmText="Verwijderen"
          cancelText="Annuleren"
          confirmButtonClass="discard-button red"
          cancelButtonClass="cancel-button"
        />
      )}
      {isEditModalVisible && (
        <EditMenuModal
          isVisible={isEditModalVisible}
          menu={menu}
          api={api}
          triggerNotification={triggerNotification}
          refreshMenus={refreshMenus}
          onClose={() => setIsEditModalVisible(false)}
        />
      )}
    </div>
  );
};

export default MenuItem;


--- MenuList.js ---
// src/Pages/Menu/MenuList.js

import React from 'react';
import './css/menu.css';
import MenuItem from './MenuItem';

const MenuList = ({ menus, api, triggerNotification, refreshMenus }) => {
  return (
    <div className="menu-component__list">
      <h3>Menu's</h3>
      {menus.length > 0 ? (
        <div className="menu-component__menu-list">
          {menus.map((menu) => (
            <MenuItem
              key={menu._id}
              menu={menu}
              api={api}
              triggerNotification={triggerNotification}
              refreshMenus={refreshMenus}
            />
          ))}
        </div>
      ) : (
        <p>Geen menu's gevonden.</p>
      )}
    </div>
  );
};

export default MenuList;


--- index.js ---
// src/Pages/Menu/index.js

import React, { useState, useEffect } from 'react';
import { withHeader } from '../../Components/Structural/Header/index.js';
import './css/menu.css';
import useApi from '../../Hooks/useApi';
import useNotification from '../../Components/Notification';
import MenuForm from './MenuForm';
import MenuList from './MenuList';

const Menu = () => {
  const api = useApi();
  const { triggerNotification, NotificationComponent } = useNotification();

  // State for the list of menus
  const [menus, setMenus] = useState([]);

  // Fetch the menus at component mount
  useEffect(() => {
    const fetchMenus = async () => {
      try {
        const data = await api.get(window.baseDomain + 'api/menu', { noCache: true });
        if (Array.isArray(data)) {
          setMenus(data);
        } else {
          setMenus([]);
        }
      } catch (error) {
        console.error('Error fetching menus:', error);
        setMenus([]);
        triggerNotification('Fout bij het ophalen van menu\'s.', 'error');
      }
    };
    fetchMenus();
  }, [api, triggerNotification]);

  // Handler to refresh menus
  const refreshMenus = async () => {
    try {
      const data = await api.get(window.baseDomain + 'api/menu', { noCache: true });
      if (Array.isArray(data)) {
        setMenus(data);
      } else {
        setMenus([]);
      }
    } catch (error) {
      console.error('Error fetching menus:', error);
      setMenus([]);
      triggerNotification('Fout bij het ophalen van menu\'s.', 'error');
    }
  };

  return (
    <div className="menu-component">
      <NotificationComponent />
      <div className="menu-component__container">
        <MenuForm
          api={api}
          triggerNotification={triggerNotification}
          refreshMenus={refreshMenus}
        />
        <MenuList
          menus={menus}
          api={api}
          triggerNotification={triggerNotification}
          refreshMenus={refreshMenus}
        />
      </div>
    </div>
  );
};

export default withHeader(Menu);



Directory Structure for "/Users/thibaultvandesompele/Desktop/Mateza 4.0/Client/Dashboard/dashboard-general/src/Pages/Menu":

├── EditMenuModal.js
├── MenuForm.js
├── MenuItem.js
├── MenuList.js
├── css
│   └── menu.css
└── index.js


List of Files:
EditMenuModal.js
MenuForm.js
MenuItem.js
MenuList.js
index.js

**Instruction:**
1. Please encapsulate the main component in index.js inside the `.component-name-component` class.
2. Prefix all CSS classes with the `.component-name-component` class. Sometimes the encapsulation is already done, and we don't need to do it twice. Don't write any comments. Delete all comments and don't write any extra comments. Only print the code with changes. Print the codes in full. Don't skip anything print them full. Mark all changed files with CHANGED before printing the file else mark them with --unchanged and don't print them. Only print every file once.

**Note:** CSS files have been excluded from this prompt.