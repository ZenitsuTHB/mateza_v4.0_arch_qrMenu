**Overview of the Task**

You aim to integrate the `ReservationStepOne` component into the `EditDate`, `EditTime`, and `EditGuests` components within your application. Each of these components should feature the full `ReservationStepOne` functionality but with certain fields pre-selected based on the context:

- **EditDate**: The number of guests is already selected. Users can change the date.
- **EditTime**: The number of guests and date are already selected. Users can change the time.
- **EditGuests**: Users can change the number of guests.

The algorithms in `generateDates.js`, `exceptions.js`, `generateTimes.js`, `blockDates.js`, and `schemeDates.js` should be implemented and used as they are, without modifications.

**Architectural Implementation**

To accomplish this task, follow these steps:

1. **Data Preparation**: Ensure you have the necessary data available in each component:
   - **Timeblocks**: Fetch timeblocks data from the unauthenticated endpoint:  
     ```javascript
     const endpoint = `${window.baseDomain}api/restaurant/${window.restaurantId}`;
     ```
   - **Reservations/Slots**: Fetch reservations data from the unauthenticated endpoint:
     ```javascript
     const endpoint = `${window.baseDomain}api/slots/${restaurantId}/${beginDate}/${endDate}`;
     ```
   - **General Settings**: Store general settings like `dagenInToekomst`, `intervalReservatie`, `duurReservatie`, and `zitplaatsen` in `window.generalSettings`.

2. **Implement ReservationStepOne in Components**:
   - **EditDate**:
     - Use `ReservationStepOne` but pre-fill the `guests` field with the existing reservation data.
     - Hide or disable the guests selector since guests are already selected.
   - **EditTime**:
     - Pre-fill both `guests` and `date` fields with existing data.
     - Hide or disable the guests and date selectors.
   - **EditGuests**:
     - Allow users to change the number of guests.
     - Upon changing guests, reset the date and time fields to ensure availability is recalculated.

3. **Use Existing Algorithms**:
   - Integrate the existing algorithms in your components without modifications.
   - Ensure that `generateAvailableDates` and `generateAvailableTimesForDate` receive the correct parameters.

4. **Handle API Calls**:
   - Replace authenticated API calls with unauthenticated ones as specified.
   - Use `useApi` hook or a similar mechanism to fetch data without authentication.

**Code Structure and Files**

Below is a summary of the files and the adjustments needed:

- **EditDate.js**:
  - Import `ReservationStepOne`.
  - Pre-fill `guests` data.
  - Allow changing the date.

- **EditTime.js**:
  - Import `ReservationStepOne`.
  - Pre-fill `guests` and `date` data.
  - Allow changing the time.

- **EditGuests.js**:
  - Import `ReservationStepOne`.
  - Allow changing the number of guests.
  - Reset date and time upon guest number change.

**Relevant Code Snippets and Suggestions**

Here's how you might adjust each component:

**EditDate.js**
```javascript
import React from 'react';
import ReservationStepOne from './ReservationStepOne';

const EditDate = ({ reservationData, onUpdate }) => {
  const [formData, setFormData] = useState({
    guests: reservationData.guests,
    date: '',
    time: '',
  });

  // Handle changes and updates...

  return (
    <ReservationStepOne
      formData={formData}
      setFormData={setFormData}
      // Pass other necessary props
    />
  );
};

export default EditDate;
```

**EditTime.js**
```javascript
import React from 'react';
import ReservationStepOne from './ReservationStepOne';

const EditTime = ({ reservationData, onUpdate }) => {
  const [formData, setFormData] = useState({
    guests: reservationData.guests,
    date: reservationData.date,
    time: '',
  });

  // Handle changes and updates...

  return (
    <ReservationStepOne
      formData={formData}
      setFormData={setFormData}
      // Pass other necessary props
    />
  );
};

export default EditTime;
```

**EditGuests.js**
```javascript
import React from 'react';
import ReservationStepOne from './ReservationStepOne';

const EditGuests = ({ reservationData, onUpdate }) => {
  const [formData, setFormData] = useState({
    guests: reservationData.guests,
    date: '',
    time: '',
  });

  // Reset date and time when guests change
  const handleGuestsChange = (newGuests) => {
    setFormData({ guests: newGuests, date: '', time: '' });
  };

  return (
    <ReservationStepOne
      formData={formData}
      setFormData={setFormData}
      // Pass other necessary props
    />
  );
};

export default EditGuests;
```

**Tips for Implementation**

- **Data Flow**: Ensure that `formData` is correctly managed within each component, and updates are handled appropriately.

- **API Hooks**: Modify the `useApi` hook to accommodate unauthenticated requests if necessary.

- **UI Adjustments**: Hide or disable UI elements that should not be changed in a particular context (e.g., guests selector in `EditTime`).

- **State Management**: Use `useEffect` to reset dependent fields (e.g., reset `date` and `time` when `guests` change).

- **Error Handling**: Ensure that errors from the API or validation are handled gracefully in the UI.

**Files to Create or Modify**

- `EditDate.js`
- `EditTime.js`
- `EditGuests.js`
- `ReservationStepOne.jsx` (if adjustments are needed to accommodate pre-filled data)
- Ensure that supporting files like `generateDates.js`, `generateTimes.js`, and related utilities are properly imported and used.

**Conclusion**

By integrating `ReservationStepOne` into your editing components and pre-filling or locking certain fields, you can provide a seamless experience for users to update their reservations. Remember to handle data fetching carefully and maintain the integrity of the existing algorithms.

If you need further assistance with specific parts of the code or encounter issues during implementation, feel free to ask!


*



*Relevant Code Files**

To integrate `ReservationStepOne` into the `EditDate`, `EditTime`, and `EditGuests` components, the following files are relevant:

1. **`src/Components/EditDate.js`**
2. **`src/Components/EditTime.js`**
3. **`src/Components/EditGuests/index.js`**
4. **`src/Hooks/useHandleEditClick.js`**
5. **`src/Pages/NewReservation/ReservationStepOne.jsx`**
6. **`src/Pages/NewReservation/DateSelector.jsx`**
7. **`src/Pages/NewReservation/TimeSelector.jsx`**
8. **`src/Pages/NewReservation/Calendar.jsx`**
9. **`src/Pages/NewReservation/ValueSelector.jsx`**
10. **`src/Pages/NewReservation/Utils/`** (All utility files)
11. **`src/App.js`**
12. **`src/Components/ReservationDetails.js`**

These files are crucial for implementing `ReservationStepOne` within the editing components and ensuring that the necessary data is fetched and utilized by the existing algorithms.

Below are the contents of the relevant files:

---

### **`src/Components/EditDate.js`**

```javascript
import React from 'react';

const EditDate = ({ reservationData }) => {
  return (
    <div>
      <p>Hier kunt u de datum van uw reservering wijzigen.</p>
      {/* Add date picker to change the date */}
    </div>
  );
};

export default EditDate;
```

---

### **`src/Components/EditTime.js`**

```javascript
import React from 'react';

const EditTime = ({ reservationData }) => {
  return (
    <div>
      <p>Hier kunt u de tijd van uw reservering wijzigen.</p>
      {/* Add time picker to change the time */}
    </div>
  );
};

export default EditTime;
```

---

### **`src/Components/EditGuests/index.js`**

```javascript
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import './css/editGuests.css'; // Ensure this path is correct

const EditGuests = ({ reservationData, onUpdate }) => {
  return <div></div>;
};

export default EditGuests;
```

---

### **`src/Hooks/useHandleEditClick.js`**

```javascript
import React from 'react';
import EditInfo from '../Components/EditInfo';
import EditGuests from '../Components/EditGuests/index.js';
import EditDate from '../Components/EditDate';
import EditTime from '../Components/EditTime';

const useHandleEditClick = ({
  setModalTitle,
  setModalContent,
  openModal,
  reservationData,
  fetchReservationData,
  isMobile,
  initializeDesktopContent,
  closeModal,
}) => {
  const handleEditClick = (title) => {
    setModalTitle(title);
    let content;

    switch (title) {
      case 'Info Wijzigen':
        content = (
          <EditInfo
            reservationData={reservationData}
            onUpdate={() => {
              fetchReservationData();
              if (!isMobile) {
                initializeDesktopContent();
              }
              closeModal();
            }}
          />
        );
        break;
      case 'Aantal Gasten Wijzigen':
        content = (
          <EditGuests
            reservationData={reservationData}
            onUpdate={() => {
              fetchReservationData();
              if (!isMobile) {
                initializeDesktopContent();
              }
              closeModal();
            }}
          />
        );
        break;
      case 'Datum Wijzigen':
        content = (
          <EditDate
            reservationData={reservationData}
            onUpdate={() => {
              fetchReservationData();
              if (!isMobile) {
                initializeDesktopContent();
              }
              closeModal();
            }}
          />
        );
        break;
      case 'Tijd Wijzigen':
        content = (
          <EditTime
            reservationData={reservationData}
            onUpdate={() => {
              fetchReservationData();
              if (!isMobile) {
                initializeDesktopContent();
              }
              closeModal();
            }}
          />
        );
        break;
      default:
        content = (
          <div>
            <p>You clicked on "{title}".</p>
          </div>
        );
        break;
    }

    setModalContent(content);
    openModal();
  };

  return handleEditClick;
};

export default useHandleEditClick;
```

---

### **`src/Pages/NewReservation/ReservationStepOne.jsx`**

```javascript
import React, { useState, useEffect } from 'react';
import ValueSelectorGuests from './ValueSelector';
import DateSelector from './DateSelector';
import TimeSelector from './TimeSelector';

const ReservationStepOne = ({
  formData,
  errors,
  handleChange,
  handleStepOneSubmit,
  setFormData,
  timeblocks,
  loadingTimeblocks,
  timeblocksError,
}) => {
  const [guests, setGuests] = useState(1);

  const resetFormDataFields = (fieldsToReset) => {
    setFormData((prevFormData) => {
      const newFormData = { ...prevFormData };
      fieldsToReset.forEach((field) => {
        newFormData[field] = '';
      });
      return newFormData;
    });
  };

  useEffect(() => {
    resetFormDataFields(['date', 'time']);
  }, [guests]);

  if (timeblocksError) {
    return (
      <div>
        <a
          href="https://dashboard.reservaties.net/#/scheme"
          target="_blank"
          rel="noopener noreferrer"
          style={{ color: 'var(--color-blue)', textDecoration: 'underline' }}
        >
          Klik hier
        </a>{' '}
        om uw openingsuren in te stellen.
      </div>
    );
  }

  return (
    <form className="account-manage-form" onSubmit={handleStepOneSubmit} noValidate>
      <ValueSelectorGuests
        setGuests={setGuests}
        value={formData.guests}
        onChange={handleChange}
        error={errors.guests}
      />

      {formData.guests && (
        <DateSelector
          guests={formData.guests}
          formData={formData}
          handleChange={handleChange}
          resetFormDataFields={resetFormDataFields}
          timeblocks={timeblocks}
        />
      )}

      {formData.date && (
        <TimeSelector
          guests={formData.guests}
          formData={formData}
          handleChange={handleChange}
          field={{ id: 'time', label: 'Tijd' }}
          selectedDate={formData.date}
        />
      )}
    </form>
  );
};

export default ReservationStepOne;
```

---

### **`src/Pages/NewReservation/DateSelector.jsx`**

```javascript
import React, { useEffect, useState, useCallback } from 'react';
import Calendar from './Calendar';
import { generateAvailableDates } from './Utils/generateDates';
import moment from 'moment';

const DateSelector = ({
  guests,
  formData,
  handleChange,
  resetFormDataFields,
  timeblocks,
}) => {
  const [availableDates, setAvailableDates] = useState([]);
  const [reservations, setReservations] = useState([]); // New state for reservations

  useEffect(() => {
    if (Array.isArray(timeblocks)) {
      const dates = generateAvailableDates(guests, timeblocks, reservations);
      setAvailableDates(dates);
    } else {
      console.error('timeblocks is undefined or not an array:', timeblocks);
      setAvailableDates([]);
    }
  }, [formData.guests, timeblocks, reservations]);

  const handleDateSelect = (date) => {
    const formattedDate = moment(date).format('YYYY-MM-DD');
    console.log('Selected date:', formattedDate);
    handleChange({
      target: { name: 'date', value: formattedDate },
    });
    resetFormDataFields(['time']);
  };

  // Memoize the callback to prevent unnecessary re-renders
  const handleReservationsFetched = useCallback((data) => {
    setReservations(data); // Update the reservations state
  }, []);

  return (
    <div className="form-group date-selector-container">
      <Calendar
        availableDates={availableDates}
        selectedDate={formData.date || null}
        onSelectDate={handleDateSelect}
        autoExpand={false}
        onReservationsFetched={handleReservationsFetched} // Pass the handler as prop
      />
    </div>
  );
};

export default DateSelector;
```

---

### **`src/Pages/NewReservation/TimeSelector.jsx`**

```javascript
import React, { useState, useEffect, useRef } from 'react';
import { generateAvailableTimesForDate } from './Utils/generateTimes';
import './css/timeSelector.css';

const TimeSelector = ({
  guests,
  formData,
  handleChange,
  field,
  selectedDate,
  expanded,
  setCurrentExpandedField,
}) => {
  const [isExpanded, setIsExpanded] = useState(expanded || false);
  const [availableTimes, setAvailableTimes] = useState([]);
  const timeSelectorRef = useRef(null);

  useEffect(() => {
    if (selectedDate) {
      const times = generateAvailableTimesForDate(guests, new Date(selectedDate));
      setAvailableTimes(times);
    } else {
      setAvailableTimes([]);
    }
  }, [selectedDate]);

  const handleTimeSelect = (timeValue) => {
    handleChange({
      target: { name: field.id, value: timeValue },
    });
    setIsExpanded(false);
    if (setCurrentExpandedField) {
      setCurrentExpandedField(null);
    }
  };

  const formatDisplayTime = () => {
    if (formData[field.id]) {
      const selected = availableTimes.find((time) => time.value === formData[field.id]);
      return selected ? selected.label : 'Selecteer een tijd';
    }
    return 'Selecteer een tijd';
  };

  if (!field) {
    return null;
  }

  return (
    <div className="form-group time-selector-container" ref={timeSelectorRef}>
      {!selectedDate ? (
        <p className="info-text">Selecteer eerst een datum.</p>
      ) : (
        <>
          <div
            className="time-display"
            onClick={() => {
              setIsExpanded(!isExpanded);
              if (!isExpanded && setCurrentExpandedField) {
                setCurrentExpandedField('time');
              }
            }}
          >
            <span>{formatDisplayTime()}</span>
            <span className="arrow">
              <svg
                width="12"
                height="12"
                viewBox="0 0 24 24"
                style={{
                  transform: isExpanded ? 'rotate(180deg)' : 'rotate(0deg)',
                  transition: 'transform 0.2s',
                }}
              >
                <path
                  d="M7 10l5 5 5-5"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                />
              </svg>
            </span>
          </div>
          {isExpanded && (
            <div className="time-selector">
              {availableTimes.length === 0 ? (
                <div className="no-times">Geen beschikbare tijden.</div>
              ) : (
                <div className="time-options">
                  {availableTimes.map((time) => (
                    <div
                      key={time.value}
                      className={`time-option ${
                        formData[field.id] === time.value ? 'selected' : ''
                      }`}
                      onClick={() => handleTimeSelect(time.value)}
                    >
                      {time.label}
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default TimeSelector;
```

---

### **`src/Pages/NewReservation/Calendar.jsx`**

```javascript
import React, { useState, useEffect, useRef } from 'react';
import moment from 'moment-timezone';
import 'moment/locale/nl';
import { isWeekInPast, isSameDay } from './Utils/dateUtils';
import './css/calendar.css';
import useApi from '../../../Hooks/useApi';

moment.locale('nl'); // Set moment to Dutch locale

const Calendar = ({
  availableDates,
  selectedDate,
  onSelectDate,
  autoExpand,
  onReservationsFetched, // New prop for callback
}) => {
  const [isExpanded, setIsExpanded] = useState(autoExpand || false);
  const [startDate, setStartDate] = useState(null);
  const [reservations, setReservations] = useState(null); // Local state for reservations
  const calendarRef = useRef(null);
  const api = useApi(); // Initialize useApi hook

  const maxDate = moment().tz('Europe/Amsterdam').add(1, 'year').endOf('day');

  useEffect(() => {
    if (autoExpand) {
      setIsExpanded(true);
    }
  }, [autoExpand]);

  useEffect(() => {
    const today = moment().tz('Europe/Amsterdam').startOf('day');
    let firstWeekStart = today.clone().startOf('isoWeek');
    while (isWeekInPast(firstWeekStart)) {
      firstWeekStart.add(1, 'week');
    }
    setStartDate(firstWeekStart);
  }, []);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (calendarRef.current && !calendarRef.current.contains(event.target)) {
        setIsExpanded(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  useEffect(() => {
    const fetchAndHandleReservations = async () => {
      if (startDate) {
        const beginDate = startDate.format('YYYY-MM-DD');
        const endDate = startDate.clone().add(13, 'days').format('YYYY-MM-DD');
        const restaurantId = localStorage.getItem('username');
        const endpoint = `${window.baseDomain}api/slots/${restaurantId}/${beginDate}/${endDate}`;

        try {
          console.log('Calendar Slots GET');
          const data = await api.get(endpoint, { noCache: true });
          setReservations(data); // Update local state with fetched reservations
          console.log('Fetched reservations:', data);

          if (onReservationsFetched && typeof onReservationsFetched === 'function') {
            onReservationsFetched(data); // Invoke callback with fetched data
          }
        } catch (error) {
          console.error('Error fetching reservations:', error);
        }
      }
    };

    fetchAndHandleReservations();
  }, [startDate, api, onReservationsFetched]);

  const generateCalendarDays = (startDate) => {
    const days = [];
    const today = moment().tz('Europe/Amsterdam').startOf('day');
    const twoWeeksFromStart = startDate.clone().add(13, 'days');

    let date = startDate.clone();
    while (date.isSameOrBefore(twoWeeksFromStart, 'day')) {
      const formattedDate = date.format('YYYY-MM-DD');
      const isAvailable = availableDates.includes(formattedDate);

      days.push({
        date: date.clone(),
        isPast: date.isBefore(today, 'day'),
        isFuture: date.isAfter(maxDate, 'day'),
        isAvailable: isAvailable,
      });

      date.add(1, 'day');
    }

    return days;
  };

  const handleDateClick = (day) => {
    if (day.isAvailable && !day.isPast && !day.isFuture) {
      const formattedDate = day.date.format('YYYY-MM-DD');
      onSelectDate(formattedDate); // Notify parent
      setIsExpanded(false);
    } else {
      console.log('Date is not available for selection.');
    }
  };

  const handlePrevWeek = () => {
    const newStartDate = startDate.clone().subtract(1, 'week');
    if (isWeekInPast(newStartDate)) {
      console.log('Cannot go to previous week. It is in the past.');
      return;
    }
    setStartDate(newStartDate);
  };

  const handleNextWeek = () => {
    const newStartDate = startDate.clone().add(1, 'week');
    setStartDate(newStartDate);
  };

  const formatDisplayDate = () => {
    if (!selectedDate) {
      return 'Selecteer een datum'; // "Select a date" in Dutch
    }

    const selectedMoment = moment(selectedDate, 'YYYY-MM-DD')
      .tz('Europe/Amsterdam')
      .startOf('day');
    const today = moment().tz('Europe/Amsterdam').startOf('day');
    const tomorrow = moment().tz('Europe/Amsterdam').add(1, 'day').startOf('day');

    if (selectedMoment.isSame(today, 'day')) {
      return 'Vandaag'; // "Today" in Dutch
    } else if (selectedMoment.isSame(tomorrow, 'day')) {
      return 'Morgen'; // "Tomorrow" in Dutch
    } else {
      // Format: e.g., "Maandag 1 Januari 2023"
      return selectedMoment.format('dddd D MMMM YYYY');
    }
  };

  const days = startDate ? generateCalendarDays(startDate) : [];

  return (
    <div className="calendar-container" ref={calendarRef}>
      <div
        className="calendar-display"
        onClick={() => {
          setIsExpanded(!isExpanded);
        }}
      >
        <span>{formatDisplayDate()}</span>
        <span className="arrow">
          <svg
            width="12"
            height="12"
            viewBox="0 0 24 24"
            style={{
              transform: isExpanded ? 'rotate(180deg)' : 'rotate(0deg)',
              transition: 'transform 0.2s',
            }}
          >
            <path
              d="M7 10l5 5 5-5"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
            />
          </svg>
        </span>
      </div>
      {isExpanded && startDate && (
        <div className="calendar">
          <div className="calendar-header">
            <button type="button" onClick={handlePrevWeek}>
              &lt;
            </button>
            <span>
              {startDate.format('DD MMM')} -{' '}
              {startDate.clone().add(13, 'days').format('DD MMM YYYY')}
            </span>
            <button type="button" onClick={handleNextWeek}>
              &gt;
            </button>
          </div>
          <div className="calendar-weeks-wrapper">
            <table className="calendar-table">
              <thead>
                <tr>
                  {['Ma', 'Di', 'Wo', 'Do', 'Vr', 'Za', 'Zo'].map((day) => (
                    <th key={day}>{day}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {Array.from({ length: 2 }).map((_, weekIndex) => (
                  <tr key={weekIndex}>
                    {days
                      .slice(weekIndex * 7, weekIndex * 7 + 7)
                      .map((dayObj, index) => {
                        const isSelected =
                          selectedDate &&
                          isSameDay(
                            dayObj.date,
                            moment(selectedDate, 'YYYY-MM-DD').tz('Europe/Amsterdam')
                          );
                        const classNames = [];
                        if (dayObj.isPast) {
                          classNames.push('gray-out');
                        } else if (dayObj.isAvailable) {
                          classNames.push('available');
                        } else {
                          classNames.push('unavailable');
                        }
                        if (isSelected) {
                          classNames.push('selected');
                        }

                        return (
                          <td
                            key={index}
                            className={classNames.join(' ')}
                            onClick={() => handleDateClick(dayObj)}
                            style={{
                              '--animation-order': index + weekIndex * 7,
                            }}
                          >
                            <div className="day-square">
                              {dayObj.date.date()}
                            </div>
                          </td>
                        );
                      })}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  );
};

export default Calendar;
```

---

### **`src/Pages/NewReservation/ValueSelector.jsx`**

```javascript
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import './css/valueSelector.css';

const ValueSelectorGuests = ({ setGuests, value, onChange }) => {
  const predefinedValues = [1, 2, 3, '4+'];
  const [selectedValue, setSelectedValue] = useState(value || '');
  const [showSlider, setShowSlider] = useState(false);

  const handlePredefinedValueClick = (val) => {
    if (val === '4+') {
      setShowSlider(true);
      setSelectedValue(4);
      setGuests(4);
      onChange({ target: { name: 'guests', value: 4 } });
    } else {
      setShowSlider(false);
      setSelectedValue(val);
      setGuests(val);
      onChange({ target: { name: 'guests', value: val } });
    }
  };

  const handleSliderChange = (e) => {
    const val = e.target.value;
    setSelectedValue(val);
    setGuests(val);
    onChange({ target: { name: 'guests', value: val } });
  };

  const handleInputChange = (e) => {
    const val = e.target.value;
    setSelectedValue(val);
    setGuests(val);
    onChange({ target: { name: 'guests', value: val } });
  };

  return (
    <div className="value-selector">
      <div className="predefined-values">
        {predefinedValues.map((val) => (
          <button
            key={val}
            type="button"
            className={`predefined-value-button ${
              selectedValue == val || (val === '4+' && showSlider) ? 'active' : ''
            }`}
            onClick={() => handlePredefinedValueClick(val)}
          >
            {val === '4+' ? '4+' : `${val} ${val === 1 ? 'p' : 'p'}`}
          </button>
        ))}
      </div>
      <AnimatePresence>
        {showSlider && (
          <motion.div
            className="slider-container"
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
          >
            <input
              type="range"
              min="4"
              max="15"
              step="1"
              value={selectedValue}
              onChange={handleSliderChange}
              className="slider"
            />
            <input
              type="number"
              name="guests"
              value={selectedValue}
              onChange={handleInputChange}
              className="value-input"
              min="4"
              max="100"
              step="1"
            />
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default ValueSelectorGuests;
```

---

### **`src/Pages/NewReservation/Utils/`**

Include all utility files in the `Utils` directory, such as:

- `dateUtils.js`
- `exceptions.js`
- `generateDates.js`
- `generateTimes.js`
- `dates/blockDates.js`
- `dates/schemeDates.js`

These files contain the algorithms needed for generating available dates and times.

---

### **`src/App.js`**

```javascript
import React, { useEffect, useState } from 'react';
import './App.css';
import './mobile.css';
import Modal from './Components/Modal';
import LeftSide from './Components/LeftSide';
import RightSide from './Components/RightSide';
import useReservationData from './Hooks/useReservationData';
import useModalManagement from './Hooks/useModalManagement';
import useIsMobile from './Hooks/useIsMobile';
import useHandleEditClick from './Hooks/useHandleEditClick';
import useHandleButtonClick from './Hooks/useHandleButtonClick.js';
import InitPage from './Loading/InitPage.js';

window.baseDomain = "http://localhost:5000/";
window.baseDomain = "https://squid-app-aychi.ondigitalocean.app/";

function App() {
  const [showInitPage, setShowInitPage] = useState(true); // State to control InitPage visibility
  const { reservationData, fetchReservationData, fetchError } = useReservationData();
  const {
    isModalOpen,
    modalContent,
    modalTitle,
    openModal,
    closeModal,
    setModalContent,
    setModalTitle,
  } = useModalManagement();

  const {
    isMobile,
    isEditing,
    selectedContent,
    setIsEditing,
    handleGoBack,
    initializeDesktopContent,
  } = useIsMobile(reservationData, closeModal);

  const handleEditClick = useHandleEditClick({
    setModalTitle,
    setModalContent,
    openModal,
    reservationData,
    fetchReservationData,
    isMobile,               // Added isMobile
    initializeDesktopContent, // Added initializeDesktopContent
    closeModal,
  });

  const handleButtonClick = useHandleButtonClick({
    setModalTitle,
    setModalContent,
    openModal,
    closeModal,
    reservationData,
    fetchReservationData,
    isMobile,
    initializeDesktopContent,
    isEditing,
    setIsEditing,
    handleEditClick,
  });

  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const admin = params.get('admin');
    if (admin === 'true') {
      setIsEditing(true);
    }
  }, [setIsEditing]);

  // If InitPage is visible, render it and do not render the rest of the app
  if (showInitPage) {
    return <InitPage onInitComplete={() => setShowInitPage(false)} />;
  }

  // After InitPage is hidden, render the main application
  if (fetchError) {
    return (
      <div className="error-container">
        <h1>Deze Reservatie Bestaat Niet Meer</h1>
      </div>
    );
  }

  return (
    <div className="app-container dark-mode">
      <div className="split-container">
        <LeftSide
          reservationData={reservationData}
          selectedContent={selectedContent}
          isMobile={isMobile}
          handleEditClick={handleEditClick} // Passed handleEditClick
        />
        <RightSide
          handleButtonClick={handleButtonClick}
          isEditing={isEditing}
          isMobile={isMobile}
          handleGoBack={handleGoBack}
        />
      </div>
      {isModalOpen && (
        <Modal
          title={modalTitle}
          content={modalContent}
          onClose={closeModal}
          darkMode={true}
        />
      )}
    </div>
  );
}

export default App;
```

---

### **`src/Components/ReservationDetails.js`**

```javascript
import React from 'react';
import ReservationField from './ReservationField';

const ReservationDetails = ({ reservationData, onEditClick }) => {
  return (
    <div>
      <h3>Reservatie Informatie</h3>
      <ReservationField
        label="Naam"
        value={`${reservationData.firstName} ${reservationData.lastName}`}
        onEdit={() => onEditClick('Info Wijzigen')}
      />
      <ReservationField
        label="Email"
        value={reservationData.email}
        onEdit={() => onEditClick('Info Wijzigen')}
      />
      <ReservationField
        label="Telefoon"
        value={reservationData.phone}
        onEdit={() => onEditClick('Info Wijzigen')}
      />
      <ReservationField
        label="Extra Info"
        value={reservationData.extraInfo}
        onEdit={() => onEditClick('Info Wijzigen')}
      />
      <ReservationField
        label="Datum"
        value={reservationData.date}
        onEdit={() => onEditClick('Datum Wijzigen')}
      />
      <ReservationField
        label="Tijd"
        value={reservationData.time}
        onEdit={() => onEditClick('Tijd Wijzigen')}
      />
      <ReservationField
        label="Aantal Gasten"
        value={reservationData.guests}
        onEdit={() => onEditClick('Aantal Gasten Wijzigen')}
      />
    </div>
  );
};

export default ReservationDetails;
```

---

**Summary of the Structure**

- **`EditDate`, `EditTime`, `EditGuests` Components**: These components should import and utilize `ReservationStepOne` with pre-filled data based on the reservation. For example, in `EditTime`, the guests and date are pre-selected, and the user can change the time.

- **Data Integration**: Use the existing `reservationData` to pre-fill fields in `ReservationStepOne`. Pass necessary props to control which fields are editable.

- **API Requests**: Ensure that the necessary unauthenticated API requests are made to fetch timeblocks and slots. Use the provided endpoints:
  - Timeblocks: `const endpoint = `${window.baseDomain}api/restaurant/${window.restaurantId}`;`
  - Reservations/Slots: `const endpoint = `${window.baseDomain}api/slots/${restaurantId}/${beginDate}/${endDate}`;`

- **Algorithms**: The algorithms in the `Utils` directory (`generateDates.js`, `generateTimes.js`, etc.) are utilized within the `DateSelector` and `TimeSelector` components to generate available dates and times.

- **Modal Integration**: In the `App.js` file, when an edit action is initiated, the corresponding `EditDate`, `EditTime`, or `EditGuests` component is rendered within a modal, utilizing `ReservationStepOne` to provide the user interface.

- **No Changes to Layout**: The layout of the calendar, time selector, and guest selector remains unchanged. These components are reused within the editing components to maintain consistency.

---

By integrating these files as shown, you can implement `ReservationStepOne` within the `EditDate`, `EditTime`, and `EditGuests` components, ensuring that users can modify their reservations seamlessly using the existing algorithms and UI components.

Accomplish the task. Print the new code files in full.