File Contents:

--- Exceptions/ExceptionItems.js ---
// src/components/Modal/ExceptionItem.jsx

import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';

const formatDateDutch = (date) => {
  if (!date) return '';

  const months = [
    'januari',
    'februari',
    'maart',
    'april',
    'mei',
    'juni',
    'juli',
    'augustus',
    'september',
    'oktober',
    'november',
    'december',
  ];

  const dayNumber = date.getDate();
  const monthName = months[date.getMonth()];
  const year = date.getFullYear();

  return `${dayNumber} ${monthName} ${year}`;
};

const ExceptionItems = ({
  type,
  item,
  index,
  handleToggle,
  handleInputChange,
}) => {

  // Determine the label based on the type and selected dates
  let label = '';
  if (type === 'sluitingsperiode') {
    if (item.startDate && item.endDate) {
      label = `${formatDateDutch(new Date(item.startDate))} - ${formatDateDutch(
        new Date(item.endDate)
      )}`;
    } else {
      label = `Periode ${index + 1}`;
    }
  } else if (type === 'uitzonderlijkeOpeningsuren') {
    if (item.date && item.startTime && item.endTime) {
      label = `${formatDateDutch(new Date(item.date))} - (${item.startTime} - ${item.endTime})`;
    } else {
      label = `Uur ${index + 1}`;
    }
  } else if (type === 'uitzonderlijkeCapaciteit') {
    if (item.date && item.capacity) {
      label = `${formatDateDutch(new Date(item.date))} - Max. Zitplaatsen: ${item.capacity}`;
    } else {
      label = `Zitplaatsen ${index + 1}`;
    }
  }

  return (
    <div className="exceptional-day-item">
      <div className="day-header">
        <span className={`day-label ${!item.enabled ? 'disabled' : ''}`}>
          {label}
        </span>
        <label className="switch">
          <input
            type="checkbox"
            checked={item.enabled}
            onChange={() => handleToggle(type, index)}
          />
          <span className="slider round"></span>
        </label>
      </div>
      <AnimatePresence>
        {item.enabled && (
          <motion.div
            className="inputs-container"
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
            layout
          >
            {type === 'sluitingsperiode' && (
              <>
                <label className="modal-label date-input">
                  Start datum:
                  <input
                    type="date"
                    value={item.startDate}
                    onChange={(e) =>
                      handleInputChange(
                        type,
                        index,
                        'startDate',
                        e.target.value
                      )
                    }
                    required
                  />
                </label>
                <label className="modal-label date-input">
                  Eind datum:
                  <input
                    type="date"
                    value={item.endDate}
                    onChange={(e) =>
                      handleInputChange(
                        type,
                        index,
                        'endDate',
                        e.target.value
                      )
                    }
                    required
                  />
                </label>
              </>
            )}
            {type === 'uitzonderlijkeOpeningsuren' && (
              <>
                <label className="modal-label date-input">
                  Datum:
                  <input
                    type="date"
                    value={item.date}
                    onChange={(e) =>
                      handleInputChange(type, index, 'date', e.target.value)
                    }
                    required
                  />
                </label>
                <label className="modal-label time-input">
                  Start tijd:
                  <input
                    type="time"
                    value={item.startTime}
                    onChange={(e) =>
                      handleInputChange(
                        type,
                        index,
                        'startTime',
                        e.target.value
                      )
                    }
                    required
                  />
                </label>
                <label className="modal-label time-input">
                  Eindtijd:
                  <input
                    type="time"
                    value={item.endTime}
                    onChange={(e) =>
                      handleInputChange(
                        type,
                        index,
                        'endTime',
                        e.target.value
                      )
                    }
                    required
                  />
                </label>
              </>
            )}
            {type === 'uitzonderlijkeCapaciteit' && (
              <>
                <label className="modal-label date-input">
                  Datum:
                  <input
                    type="date"
                    value={item.date}
                    onChange={(e) =>
                      handleInputChange(type, index, 'date', e.target.value)
                    }
                    required
                  />
                </label>
                <label className="modal-label capacity-input">
                  Zitplaatsen:
                  <input
                    type="number"
                    min="1"
                    value={item.capacity}
                    onChange={(e) =>
                      handleInputChange(
                        type,
                        index,
                        'capacity',
                        e.target.value
                      )
                    }
                    required
                  />
                </label>
              </>
            )}
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default ExceptionItems;


--- Exceptions/index.js ---
// src/components/Modal/ExceptionalDays.jsx

import React from 'react';
import ExceptionItems from './ExceptionItems'; // Correct import path
import './css/exceptionalDays.css';

const ExceptionalDays = ({
  exceptionalDays,
  setExceptionalDays,
  onSaveExceptionalDays,
}) => {
  const handleToggle = (type, index) => {
    setExceptionalDays((prev) => {
      const updatedList = prev[type].map((item, i) =>
        i === index ? { ...item, enabled: !item.enabled } : item
      );
      return { ...prev, [type]: updatedList };
    });
  };

  const handleInputChange = (type, index, field, value) => {
    setExceptionalDays((prev) => {
      const updatedList = prev[type].map((item, i) =>
        i === index ? { ...item, [field]: value } : item
      );
      return { ...prev, [type]: updatedList };
    });
  };

  const addNewException = (type) => {
    setExceptionalDays((prev) => {
      const newException = { enabled: false };
      if (type === 'sluitingsperiode') {
        newException.startDate = '';
        newException.endDate = '';
      } else if (type === 'uitzonderlijkeOpeningsuren') {
        newException.date = '';
        newException.startTime = '';
        newException.endTime = '';
      } else if (type === 'uitzonderlijkeCapaciteit') {
        newException.date = '';
        newException.capacity = '';
      }
      return {
        ...prev,
        [type]: [...prev[type], newException],
      };
    });
  };

  return (
    <div className="exceptional-days">
      <h2 className="secondary-title">Uitzonderingen</h2>

      {/* Sluitingsperiode Section */}
      <div className="exception-type-section">
        <h3>Sluitingsperiode</h3>
        {exceptionalDays.sluitingsperiode.map((item, index) => (
          <ExceptionItems
            key={index}
            type="sluitingsperiode"
            item={item}
            index={index}
            handleToggle={handleToggle}
            handleInputChange={handleInputChange}
          />
        ))}
        <button
          type="button"
          className="add-exception-button"
          onClick={() => addNewException('sluitingsperiode')}
        >
          + Voeg Sluitingsperiode Toe
        </button>
      </div>

      {/* Sluitingsdag Section */}

      {/* Uitzonderlijke Openingsuren Section */}
      <div className="exception-type-section">
        <h3>Uitzonderlijke Openingsuren</h3>
        {exceptionalDays.uitzonderlijkeOpeningsuren.map((item, index) => (
          <ExceptionItems
            key={index}
            type="uitzonderlijkeOpeningsuren"
            item={item}
            index={index}
            handleToggle={handleToggle}
            handleInputChange={handleInputChange}
          />
        ))}
        <button
          type="button"
          className="add-exception-button"
          onClick={() => addNewException('uitzonderlijkeOpeningsuren')}
        >
          + Voeg Uitzonderlijke Openingsuren Toe
        </button>
      </div>

      {/* Uitzonderlijke Capaciteit Section */}
      <div className="exception-type-section">
        <h3>Zitplaatsen Limiteren</h3>
        {exceptionalDays.uitzonderlijkeCapaciteit.map((item, index) => (
          <ExceptionItems
            key={index}
            type="uitzonderlijkeCapaciteit"
            item={item}
            index={index}
            handleToggle={handleToggle}
            handleInputChange={handleInputChange}
          />
        ))}
        <button
          type="button"
          className="add-exception-button"
          onClick={() => addNewException('uitzonderlijkeCapaciteit')}
        >
          + Voeg Uitzonderlijke Capaciteit Toe
        </button>
      </div>

      <div className="modal-buttons">
        <button
          type="button"
          className="standard-button blue"
          onClick={onSaveExceptionalDays}
        >
          Opslaan
        </button>
      </div>
    </div>
  );
};

export default ExceptionalDays;


--- Hooks/useSchemeValidation.js ---
import { useState } from 'react';

const useSchemeValidation = (items, schemeSettings) => {
  const [errors, setErrors] = useState({});

  const validate = () => {
    // Initialize an empty errors object
    const newErrors = {};

    items.forEach((item) => {
      const settings = schemeSettings[item.id];
      if (settings?.enabled) {
        const itemErrors = [];

        if (item.type === 'day') {
          const { startTime, endTime, shiftsEnabled, shifts = [] } = settings;

          // Validate startTime and endTime
          if (!startTime || !endTime) {
            itemErrors.push('Start tijd en eindtijd moeten ingevuld zijn.');
          } else if (startTime >= endTime) {
            itemErrors.push('Start tijd moet voor eindtijd zijn.');
          }

          // Validate that shifts are provided if shiftsEnabled is true
          if (shiftsEnabled) {
            if (!shifts || shifts.length === 0) {
              itemErrors.push('Er moeten minimaal één shift worden gedefinieerd wanneer shifts zijn ingeschakeld.');
            } else {
              shifts.forEach((shift, index) => {
                const shiftErrors = [];

                // Validate shift name
                if (!shift.name) {
                  shiftErrors.push('Shift naam moet ingevuld zijn.');
                }

                // Validate shift startTime
                if (!shift.startTime) {
                  shiftErrors.push('Shift start tijd moet ingevuld zijn.');
                }

                // Validate shift startTime within day's startTime and endTime
                if (shift.startTime && startTime && endTime) {
                  if (shift.startTime < startTime || shift.startTime > endTime) {
                    shiftErrors.push('Shift start tijd moet binnen de openingsuren vallen.');
                  }
                }

                // If there are errors for this shift, add them to newErrors
                if (shiftErrors.length > 0) {
                  newErrors[`${item.id}.shifts.${index}`] = shiftErrors;
                }
              });
            }
          }
        } else if (item.type === 'duration') {
          const { startDate, endDate } = settings;

          // Validate startDate and endDate
          if (!startDate || !endDate) {
            itemErrors.push('Start datum en einddatum moeten ingevuld zijn.');
          } else if (new Date(startDate) > new Date(endDate)) {
            itemErrors.push('Start datum moet voor einddatum zijn.');
          }
        }

        // If there are errors for this item, add them to newErrors
        if (itemErrors.length > 0) {
          newErrors[item.id] = itemErrors;
        }
      }
    });

    // Update the errors state with new errors
    setErrors(newErrors);

    // Return true if there are no errors
    return Object.keys(newErrors).length === 0;
  };

  return { errors, validate };
};

export default useSchemeValidation;


--- ModalContent.js ---
// src/components/Modal/ModalContent.jsx

import React, { useState, useEffect } from 'react';
import './css/modalContent.css';
import { FaCalendarWeek } from 'react-icons/fa';

const ModalContent = ({
  formData,
  setFormData,
  onSave,
  onDelete,
  existingBlock,
  selectedDate,
}) => {
  const [showMessage, setShowMessage] = useState(true);

  useEffect(() => {
    const isMessageHidden = localStorage.getItem('hideWeeklyScheduleMessage');
    if (isMessageHidden === 'true') {
      setShowMessage(false);
    }
  }, []);

  const formatDateDutch = (date) => {
    const months = [
      'januari', 'februari', 'maart', 'april', 'mei', 'juni',
      'juli', 'augustus', 'september', 'oktober', 'november', 'december'
    ];
    const day = date.getDate();
    const month = months[date.getMonth()];
    return `${day} ${month}`;
  };

  const handleSubmit = (e, continueToSettings = false) => {
    e.preventDefault();
    onSave(continueToSettings);
  };

  const handleDelete = () => {
    onDelete();
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    const newValue = name === 'zitplaatsen' ? Number(value) : value;
    setFormData((prev) => ({
      ...prev,
      [name]: newValue,
    }));
  };

  const handleCloseMessage = () => {
    setShowMessage(false);
  };

  const handlePermanentCloseMessage = () => {
    setShowMessage(false);
    localStorage.setItem('hideWeeklyScheduleMessage', 'true');
  };

  return (
    <>
      <h2 className="secondary-title">
        {existingBlock ? 'Tijdsblok Bewerken' : 'Tijdsblok Toevoegen'}
      </h2>

      <form onSubmit={(e) => handleSubmit(e, false)}>
        <label className="modal-label">
          Titel:
          <input
            type="text"
            name="title"
            value={formData.title}
            onChange={handleChange}
            required
          />
        </label>
        <div className="time-inputs-container">
          <label className="modal-label time-input">
            Start:
            <input
              type="time"
              name="startTime"
              value={formData.startTime}
              onChange={handleChange}
              required
            />
          </label>
          <label className="modal-label time-input">
            Einde:
            <input
              type="time"
              name="endTime"
              value={formData.endTime}
              onChange={handleChange}
              required
            />
          </label>
        </div>
        {/*
        <label className="modal-label">
          Max Capaciteit Gasten:
          <input
            type="number"
            name="zitplaatsen"
            value={formData.zitplaatsen}
            onChange={handleChange}
            min="1"
            required
          />
        </label>
        <label className="modal-label">
          Kleur:
          <input
            type="color"
            name="kleurInstelling"
            value={formData.kleurInstelling}
            onChange={handleChange}
            required
          />
        </label>*/}
        
        {showMessage && (
          <div className="weekly-schedule-container">
            <FaCalendarWeek className="weekly-schedule-icon" />
            <div className="weekly-schedule-message">
              <span>
                <strong>Bovenstaande instellingen betreffen het huidige tijdsblok.</strong> U kunt een tijdsblok herhalen en openingsuren instellen in Schema.
              </span>
              <span className="close-message" onClick={handleCloseMessage}>
                Verbergen
              </span>
              <span className="close-message left-margin" onClick={handlePermanentCloseMessage}>
                Sluiten
              </span>
            </div>
          </div>
        )}

        <div className="modal-buttons">
          {existingBlock && (
            <button
              type="button"
              className="standard-button red spaced"
              onClick={handleDelete}
            >
              Verwijderen
            </button>
          )}
          <button
            type="button"
            className="standard-button blue spaced"
            onClick={(e) => handleSubmit(e, true)}
          >
            Opslaan
          </button>
        </div>
      </form>
    </>
  );
};

export default ModalContent;


--- Scheme/SchemeItem.js ---
// SchemeItem.jsx

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FaChevronDown } from 'react-icons/fa';
import Shifts from './Shifts';
import ToggleSwitch from './ToggleSwitch';

const SchemeItem = ({
  item,
  schemeSettings,
  handleToggle,
  handleInputChange,
  errors,
  isSaveAttempted,
  handleShiftsToggle,
  handleShiftInputChange,
  addShift,
  removeShift,
}) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const enabled = schemeSettings[item.id]?.enabled || false;

  // Expand when enabled is set to true
  useEffect(() => {
    if (enabled) {
      setIsExpanded(true);
    } else {
      setIsExpanded(false);
    }
  }, [enabled]);

  return (
    <div
      key={item.id}
      className={`scheme-item ${item.type !== 'day' ? 'scheme-item-special' : ''}`}
    >
      {/* Make the whole header clickable */}
      <div
        className={`item-header ${isExpanded ? 'expanded' : ''}`}
        onClick={enabled ? () => setIsExpanded(!isExpanded) : null}
      >
        <div className={`item-label ${!enabled ? 'disabled' : ''}`}>
          {/* Conditionally render the chevron icon when enabled */}
          {enabled && (
            <FaChevronDown className={`arrow-icon ${isExpanded ? 'expanded' : ''}`} />
          )}
          {item.label}
        </div>
        {/* ToggleSwitch remains on the right and stops event propagation */}
        <div className="toggle-middle" onClick={(e) => e.stopPropagation()}>
          <ToggleSwitch checked={enabled} onChange={() => handleToggle(item.id)} />
        </div>
      </div>

      <AnimatePresence>
        {isExpanded && enabled && (
          <motion.div
            className="item-content"
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
            layout
          >
            {item.type === 'day' ? (
              <>
                <label className="modal-label time-input">
                  Start tijd:
                  <input
                    type="time"
                    name={`startTime-${item.id}`}
                    value={schemeSettings[item.id]?.startTime || ''}
                    onChange={(e) =>
                      handleInputChange(item.id, 'startTime', e.target.value)
                    }
                    required
                  />
                </label>
                <label className="modal-label time-input">
                  Eindtijd:
                  <input
                    type="time"
                    name={`endTime-${item.id}`}
                    value={schemeSettings[item.id]?.endTime || ''}
                    onChange={(e) =>
                      handleInputChange(item.id, 'endTime', e.target.value)
                    }
                    required
                  />
                </label>
                {isSaveAttempted &&
                  errors[item.id] &&
                  Object.values(errors[item.id])
                    .filter((error) => typeof error === 'string')
                    .map((errorMsg, index) => (
                      <span key={index} className="error-shifts">
                        {errorMsg}
                      </span>
                    ))}
              </>
            ) : (
              <>
                <label className="modal-label date-input">
                  Start datum:
                  <input
                    type="date"
                    name={`startDate-${item.id}`}
                    value={schemeSettings[item.id]?.startDate || ''}
                    onChange={(e) =>
                      handleInputChange(item.id, 'startDate', e.target.value)
                    }
                    required
                  />
                </label>
                <label className="modal-label date-input">
                  Eind datum:
                  <input
                    type="date"
                    name={`endDate-${item.id}`}
                    value={schemeSettings[item.id]?.endDate || ''}
                    onChange={(e) =>
                      handleInputChange(item.id, 'endDate', e.target.value)
                    }
                    required
                  />
                </label>
                {isSaveAttempted &&
                  errors[item.id] &&
                  Object.values(errors[item.id]).map((errorMsg, index) => (
                    <span key={index} className="error-shifts">
                      {errorMsg}
                    </span>
                  ))}
              </>
            )}

            {/* Render Shifts component if enabled and item type is 'day' */}
            {item.type === 'day' && (
              <Shifts
                itemId={item.id}
                schemeSettings={schemeSettings}
                handleShiftsToggle={handleShiftsToggle}
                handleShiftInputChange={handleShiftInputChange}
                addShift={addShift}
                removeShift={removeShift}
                errors={errors[item.id]?.shifts}
                isSaveAttempted={isSaveAttempted}
              />
            )}
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default SchemeItem;


--- Scheme/ShiftItem.js ---
import React from 'react';
import { FaTrash } from 'react-icons/fa'; // Import the FaTrash icon

const ShiftItem = ({
  shift,
  shiftIndex,
  itemId,
  handleShiftInputChange,
  removeShift,
  errors,
  isSaveAttempted,
}) => (
  <div className="shift-item shift-item-box">
    {/* Shift Inputs Grid */}
    <div className="shift-inputs-grid">
      {/* Start Time Input */}
      <label className="modal-label shift-input">
        Start tijd:
        <input
          type="time"
          name={`shiftStartTime-${itemId}-${shiftIndex}`}
          value={shift.startTime}
          onChange={(e) =>
            handleShiftInputChange(itemId, shiftIndex, 'startTime', e.target.value)
          }
          required
        />
        {isSaveAttempted && errors?.startTime && (
          <span className="error-shifts">{errors.startTime}</span>
        )}
        {isSaveAttempted && errors?.startTimeRange && (
          <span className="error-shifts">{errors.startTimeRange}</span>
        )}
      </label>

      {/* Shift Name Input */}
      <label className="modal-label shift-input">
        Shift naam:
        <input
          type="text"
          name={`shiftName-${itemId}-${shiftIndex}`}
          value={shift.name}
          onChange={(e) =>
            handleShiftInputChange(itemId, shiftIndex, 'name', e.target.value)
          }
          required
        />
        {isSaveAttempted && errors?.name && (
          <span className="error-shifts">{errors.name}</span>
        )}
      </label>

      {/* Remove Shift Button with FaTrash Icon */}
      <button
        type="button"
        className="remove-shift-button"
        onClick={() => removeShift(itemId, shiftIndex)}
        aria-label="Verwijder Shift" // Accessibility label
      >
        <FaTrash />
      </button>
    </div>
  </div>
);

export default ShiftItem;


--- Scheme/Shifts.js ---
import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import ShiftItem from './ShiftItem';
import ToggleSwitch from './ToggleSwitch';

const Shifts = ({
  itemId,
  schemeSettings,
  handleShiftsToggle,
  handleShiftInputChange,
  addShift,
  removeShift,
  errors,
  isSaveAttempted,
}) => {
  const shiftsEnabled = schemeSettings[itemId]?.shiftsEnabled || false;
  const shifts = schemeSettings[itemId]?.shifts || [];

  return (
    <>
      <ToggleSwitch
        checked={shiftsEnabled}
        onChange={() => handleShiftsToggle(itemId)}
        label="Shifts aanzetten"
        className="shifts-header"
      />

      <AnimatePresence>
        {shiftsEnabled && (
          <motion.div
            className="shifts-container"
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
            layout
          >
            {shifts.map((shift, shiftIndex) => (
              <ShiftItem
                key={shiftIndex}
                shift={shift}
                shiftIndex={shiftIndex}
                itemId={itemId}
                handleShiftInputChange={handleShiftInputChange}
                removeShift={removeShift}
                errors={errors ? errors[shiftIndex] : {}}
                isSaveAttempted={isSaveAttempted}
              />
            ))}

            {/* Add Shift Button */}
            <button
              type="button"
              className="add-shift-button"
              onClick={() => addShift(itemId)}
            >
              + Voeg Shift Toe
            </button>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default Shifts;


--- Scheme/ToggleSwitch.js ---
// ToggleSwitch.jsx

import React from 'react';
import PropTypes from 'prop-types';

const ToggleSwitch = ({ checked, onChange, label, className }) => (
  <div className={`day-header ${className || ''}`}>
    <span className="day-label">{label}</span>
    <label className="switch" aria-label={label}>
      <input
        type="checkbox"
        checked={checked}
        onChange={onChange}
        aria-checked={checked}
        aria-labelledby={`${label}-toggle`}
      />
      <span className="slider round"></span>
    </label>
  </div>
);

ToggleSwitch.propTypes = {
  checked: PropTypes.bool.isRequired,
  onChange: PropTypes.func.isRequired,
  label: PropTypes.string.isRequired,
  className: PropTypes.string,
};

ToggleSwitch.defaultProps = {
  className: '',
};

export default ToggleSwitch;


--- Scheme/index.js ---
// Scheme.jsx

import React, { useState } from 'react';
import './css/scheme.css';
import useSchemeValidation from '../Hooks/useSchemeValidation'; // Import the custom hook
import SchemeItem from './SchemeItem';

const Scheme = ({
  schemeSettings,
  setschemeSettings,
  onSaveScheme,
  onDeleteScheme,
  defaultStartTime,
  defaultEndTime,
  triggerNotification,
}) => {
  const items = [
    { id: 'Monday', label: 'Maandag', type: 'day' },
    { id: 'Tuesday', label: 'Dinsdag', type: 'day' },
    { id: 'Wednesday', label: 'Woensdag', type: 'day' },
    { id: 'Thursday', label: 'Donderdag', type: 'day' },
    { id: 'Friday', label: 'Vrijdag', type: 'day' },
    { id: 'Saturday', label: 'Zaterdag', type: 'day' },
    { id: 'Sunday', label: 'Zondag', type: 'day' },
    { id: 'period', label: 'Herhalen voor Beperkte Periode', type: 'duration' },
  ];

  const [isSaveAttempted, setIsSaveAttempted] = useState(false);
  const { errors, validate } = useSchemeValidation(items, schemeSettings);

  const handleToggle = (itemId) => {
    setschemeSettings((prev) => {
      const isEnabled = prev[itemId]?.enabled;
      if (!isEnabled) {
        return {
          ...prev,
          [itemId]: {
            enabled: true,
            startTime:
              prev[itemId]?.startTime ||
              (items.find((item) => item.id === itemId).type === 'day'
                ? defaultStartTime
                : ''),
            endTime:
              prev[itemId]?.endTime ||
              (items.find((item) => item.id === itemId).type === 'day'
                ? defaultEndTime
                : ''),
            startDate: prev[itemId]?.startDate || '',
            endDate: prev[itemId]?.endDate || '',
            shiftsEnabled: false,
            shifts: [],
          },
        };
      } else {
        const { [itemId]: removed, ...rest } = prev;
        return rest;
      }
    });
  };

  const handleShiftsToggle = (itemId) => {
    setschemeSettings((prev) => ({
      ...prev,
      [itemId]: {
        ...prev[itemId],
        shiftsEnabled: !prev[itemId]?.shiftsEnabled,
        shifts: !prev[itemId]?.shiftsEnabled ? [] : prev[itemId].shifts,
      },
    }));
  };

  const handleInputChange = (itemId, field, value) => {
    setschemeSettings((prev) => ({
      ...prev,
      [itemId]: {
        ...prev[itemId],
        [field]: value,
      },
    }));
  };

  const handleShiftInputChange = (itemId, shiftIndex, field, value) => {
    setschemeSettings((prev) => {
      const shifts = [...(prev[itemId]?.shifts || [])];
      shifts[shiftIndex] = {
        ...shifts[shiftIndex],
        [field]: value,
      };
      return {
        ...prev,
        [itemId]: {
          ...prev[itemId],
          shifts,
        },
      };
    });
  };

  const addShift = (itemId) => {
    setschemeSettings((prev) => {
      const shifts = [...(prev[itemId]?.shifts || [])];
      shifts.push({
        name: '',
        startTime: '',
      });
      return {
        ...prev,
        [itemId]: {
          ...prev[itemId],
          shifts,
        },
      };
    });
  };

  const removeShift = (itemId, shiftIndex) => {
    setschemeSettings((prev) => {
      const shifts = [...(prev[itemId]?.shifts || [])];
      shifts.splice(shiftIndex, 1);
      return {
        ...prev,
        [itemId]: {
          ...prev[itemId],
          shifts,
        },
      };
    });
  };

  const handleSaveScheme = () => {
    setIsSaveAttempted(true);
    if (validate()) {
      onSaveScheme();
    } else {
      triggerNotification('Controleer de invulvelden', 'warning');
    }
  };

  return (
    <div>
      <h2 className="secondary-title">Openingsuren</h2>
      <div className="scheme-list">
        {items.map((item) => (
          <SchemeItem
            key={item.id}
            item={item}
            schemeSettings={schemeSettings}
            handleToggle={handleToggle}
            handleInputChange={handleInputChange}
            errors={errors}
            isSaveAttempted={isSaveAttempted}
            handleShiftsToggle={handleShiftsToggle}
            handleShiftInputChange={handleShiftInputChange}
            addShift={addShift}
            removeShift={removeShift}
          />
        ))}
      </div>
      <div className="modal-buttons">
        <button
          type="button"
          className="standard-button blue"
          onClick={handleSaveScheme}
        >
          Opslaan
        </button>
      </div>
    </div>
  );
};

export default Scheme;


--- index.js ---
// src/components/Modal/index.js

import React, { useState, useEffect } from 'react';
import ModalWithTabs from '../../../Components/Structural/Modal/WithTabs';
import ModalContent from './ModalContent';
import Scheme from './Scheme';
import ExceptionalDays from './Exceptions'; // Updated import path
import { formatDateKey } from '../Utils/dateFormat';

const Modal = ({ onClose, onSave, onDelete, existingBlock, selectedDate, triggerNotification }) => {
  const [schemeSettings, setschemeSettings] = useState(
    existingBlock?.schemeSettings || {}
  );

  const [exceptionalDays, setExceptionalDays] = useState(() => {
    const defaultExceptionalDays = {
      sluitingsperiode: [],
      uitzonderlijkeOpeningsuren: [],
      uitzonderlijkeCapaciteit: [],
    };
    return existingBlock?.exceptionalDays
      ? { ...defaultExceptionalDays, ...existingBlock.exceptionalDays }
      : defaultExceptionalDays;
  });

  const formatDateDutch = (date) => {
    const months = [
      'januari',
      'februari',
      'maart',
      'april',
      'mei',
      'juni',
      'juli',
      'augustus',
      'september',
      'oktober',
      'november',
      'december',
    ];
    const day = date.getDate();
    const month = months[date.getMonth()];
    return `${day} ${month}`;
  };

  const [formData, setFormData] = useState({
    title: existingBlock
      ? existingBlock.title
      : `Tijdsblok (${formatDateDutch(selectedDate)})`,
    startTime: existingBlock ? existingBlock.startTime : '17:00',
    endTime: existingBlock ? existingBlock.endTime : '23:00',
    kleurInstelling: existingBlock ? existingBlock.kleurInstelling : '#2c909b',
    zitplaatsen: existingBlock ? existingBlock.zitplaatsen : 1,
  });

  useEffect(() => {
    document.body.style.overflow = 'hidden';
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, []);

  const handleSave = (continueToSettings = false) => {
    if (formData.zitplaatsen < 1) {
      alert('Zitplaatsen moet een positief getal zijn.');
      return;
    }

    const newBlock = {
      id: existingBlock ? existingBlock._id : undefined,
      _id: existingBlock ? existingBlock._id : undefined,
      date: formatDateKey(selectedDate),
      ...formData,
      schemeSettings,
      exceptionalDays,
    };
    onSave(newBlock, continueToSettings);
  };

  const handleDelete = () => {
    onDelete(existingBlock);
  };

  const handleSaveSchema = () => {
    handleSave();
  };

  const handleSaveExceptionalDays = () => {
    handleSave();
  };

  const tabs = [
    {
      id: 'algemeen',
      label: 'Tijdsblok',
      content: (
        <ModalContent
          formData={formData}
          setFormData={setFormData}
          onSave={handleSave}
          onDelete={handleDelete}
          existingBlock={existingBlock}
          selectedDate={selectedDate}
        />
      ),
    },
    {
      id: 'schema',
      label: 'Schema',
      content: (
        <Scheme
          schemeSettings={schemeSettings}
          setschemeSettings={setschemeSettings}
          onSaveScheme={handleSaveSchema}
          triggerNotification={triggerNotification}
        />
      ),
    },
    {
      id: 'uitzonderingen',
      label: 'Uitzonderingen',
      content: (
        <ExceptionalDays
          exceptionalDays={exceptionalDays}
          setExceptionalDays={setExceptionalDays}
          onSaveExceptionalDays={handleSaveExceptionalDays}
        />
      ),
    },
  ];

  return <ModalWithTabs tabs={tabs} onClose={onClose} />;
};

export default Modal;



Directory Structure for "/Users/thibaultvandesompele/Desktop/Mateza 4.0/Client/Dashboard/dashboard-general/src/Pages/DayCalendar/Modal":

├── Exceptions
│   ├── ExceptionItems.js
│   ├── css
│   │   └── exceptionalDays.css
│   └── index.js
├── Hooks
│   └── useSchemeValidation.js
├── ModalContent.js
├── Scheme
│   ├── SchemeItem.js
│   ├── ShiftItem.js
│   ├── Shifts.js
│   ├── ToggleSwitch.js
│   ├── css
│   │   └── scheme.css
│   └── index.js
├── css
│   ├── mobile.css
│   └── modalContent.css
└── index.js


List of Files:
Exceptions/ExceptionItems.js
Exceptions/index.js
Hooks/useSchemeValidation.js
ModalContent.js
Scheme/SchemeItem.js
Scheme/ShiftItem.js
Scheme/Shifts.js
Scheme/ToggleSwitch.js
Scheme/index.js
index.js

**Instruction:**
1. Please encapsulate the main component in index.js inside the `.component-name-component` class.
2. Prefix all CSS classes with the `.component-name-component` class. Sometimes the encapsulation is already done, and we don't need to do it twice. Don't write any comments. Delete all comments and don't write any extra comments. Only print the code with changes. Print the codes in full. Don't skip anything print them full. Mark all changed files with CHANGED before printing the file else mark them with --unchanged and don't print them. Only print every file once.

**Note:** CSS files have been excluded from this prompt.