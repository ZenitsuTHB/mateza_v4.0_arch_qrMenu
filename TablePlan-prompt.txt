File Contents:

--- FloorPlan.js ---
// src/components/FloorPlan.jsx

import React, { useState, useCallback } from 'react';
import { useDrop } from 'react-dnd';
import './css/floorPlan.css';
import { ResizableBox } from 'react-resizable';
import 'react-resizable/css/styles.css';

const FloorPlan = () => {
  const [elements, setElements] = useState([]);

  // Handler to add new elements to the floor plan
  const addElement = (element) => {
    setElements((prevElements) => [...prevElements, element]);
  };

  // Handler to update an existing element's position or properties
  const updateElement = useCallback((id, x, y, updatedProps = {}) => {
    setElements((prevElements) =>
      prevElements.map((el) =>
        el.id === id
          ? {
              ...el,
              x: x !== undefined ? x : el.x,
              y: y !== undefined ? y : el.y,
              ...updatedProps,
            }
          : el
      )
    );
  }, []);

  // Handler to remove an element from the floor plan
  const removeElement = useCallback((id) => {
    setElements((prevElements) => prevElements.filter((el) => el.id !== id));
  }, []);

  // Function to snap positions to grid
  const snapToGrid = (x, y, gridSize = 50) => {
    const snappedX = Math.round(x / gridSize) * gridSize;
    const snappedY = Math.round(y / gridSize) * gridSize;
    return [snappedX, snappedY];
  };

  // Define the drop target using react-dnd
  const [, drop] = useDrop({
    accept: ['TABLE', 'DECORATION', 'TABLE_ON_FLOOR', 'DECORATION_ON_FLOOR'],
    drop: (item, monitor) => {
      const offset = monitor.getClientOffset();
      const floorPlanRect = document
        .getElementById('floor-plan-container')
        .getBoundingClientRect();

      let x = offset.x - floorPlanRect.left - item.width / 2;
      let y = offset.y - floorPlanRect.top - item.height / 2;

      // Snap to grid
      const [snappedX, snappedY] = snapToGrid(x, y);
      x = Math.max(0, Math.min(snappedX, floorPlanRect.width - item.width));
      y = Math.max(0, Math.min(snappedY, floorPlanRect.height - item.height));

      if (item.type === 'TABLE' || item.type === 'DECORATION') {
        // Assign a unique ID to each new element
        const id = Date.now();

        addElement({
          id,
          type: item.elementType, // 'table' or 'decoration'
          subtype: item.subtype, // 'round', 'square', 'wall', etc.
          x,
          y,
          width: item.width,
          height: item.height,
          capacity: item.capacity, // only for tables
          name:
            item.type === 'TABLE'
              ? `${item.subtype.charAt(0).toUpperCase() + item.subtype.slice(1)} Table ${id}`
              : `${item.subtype.charAt(0).toUpperCase() + item.subtype.slice(1)} Decoration ${id}`,
          minCapacity: item.minCapacity || 1, // only for tables
          maxCapacity: item.maxCapacity || 10, // only for tables
          priority: 'Medium', // default priority for tables
        });
      } else if (item.type === 'TABLE_ON_FLOOR' || item.type === 'DECORATION_ON_FLOOR') {
        // Moving an existing element
        updateElement(item.id, x, y);
      }
    },
  });

  return (
    <ResizableBox
      width={800}
      height={600}
      minConstraints={[400, 300]}
      maxConstraints={[1600, 1200]}
      className="resizable-floor-plan"
    >
      <div id="floor-plan-container" className="floor-plan" ref={drop}>
        {/* Render all elements */}
       
      </div>
    </ResizableBox>
  );
};

export default FloorPlan;


--- Sidebar.js ---
// src/components/Sidebar.js

import React, { useState, useRef } from 'react';
import { motion } from 'framer-motion';
import Table from './Table.js';
import Walls from './Walls.js';
import './css/sidebar.css';

const Sidebar = ({ tables, walls }) => {
  const [activeTab, setActiveTab] = useState('tables');
  const [searchTerm, setSearchTerm] = useState('');
  const [pendingTab, setPendingTab] = useState(null);
  const [showUnsavedChangesModal, setShowUnsavedChangesModal] = useState(false);

  const tablesRef = useRef();
  const wallsRef = useRef();

  const isIframe = typeof window !== 'undefined' && window.isIframe;

  const tabs = [
    { id: 'tables', label: 'Tables', title: "Manage Tables" },
    { id: 'walls', label: 'Walls', title: "Manage Walls" },
  ];

  // Filter tables and walls based on search term
  const filteredTables = tables.filter(
    (table) =>
      table.id.toString().includes(searchTerm) ||
      table.numberOfGuests.toString().includes(searchTerm)
  );

  const filteredWalls = walls.filter(
    (wall) =>
      wall.id.toString().includes(searchTerm) ||
      wall.length.toString().includes(searchTerm)
  );

  const handleTabClick = async (tabId, tabTitle) => {
    let currentRef;
    if (activeTab === 'tables') {
      currentRef = tablesRef;
    } else if (activeTab === 'walls') {
      currentRef = wallsRef;
    }

    if (currentRef && currentRef.current && currentRef.current.isDirty) {
      if (isIframe) {
        try {
          await currentRef.current.handleSave();
          setActiveTab(tabId);
        } catch (error) {
          console.error('Error saving before tab switch:', error);
        }
      } else {
        setPendingTab({ id: tabId, title: tabTitle });
        setShowUnsavedChangesModal(true);
      }
    } else {
      setActiveTab(tabId);
    }
  };

  const handleDiscardChanges = () => {
    setShowUnsavedChangesModal(false);
    if (pendingTab) {
      setActiveTab(pendingTab.id);
      setPendingTab(null);
    }
  };

  const handleCancelTabChange = () => {
    setShowUnsavedChangesModal(false);
    setPendingTab(null);
  };

  return (
    <div className="sidebar">
      {/* Tabs */}
      <div className="tabs">
        <div className="buttons-container">
          {tabs.map((tab) => (
            <motion.button
              key={tab.id}
              type="button"
              className={`tab-button ${activeTab === tab.id ? 'active' : ''}`}
              onClick={() => handleTabClick(tab.id, tab.title)}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <span className="tab-label">{tab.label}</span>
              {activeTab === tab.id && (
                <motion.div
                  layoutId="underline-sidebar-tabs"
                  className="tab-underline"
                  initial={false}
                  animate={{ opacity: 1 }}
                  transition={{ duration: 0.3 }}
                />
              )}
            </motion.button>
          ))}
        </div>
      </div>

      {/* Search Bar */}
      <div className="search-bar">
        <input
          type="text"
          placeholder={`Search ${activeTab}...`}
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          aria-label={`Search ${activeTab}`}
        />
      </div>

      {/* Items List */}
      <div className="items-list">
        {activeTab === 'tables' && filteredTables.length > 0 ? (
          <div className="grid-container">
            {filteredTables.map((table) => (
              <div key={table.id} className="item">
                <Table numberOfGuests={table.numberOfGuests} ref={tablesRef} />
                <div className="item-info">
                  <p>Table {table.id}</p>
                  <p>Guests: {table.numberOfGuests}</p>
                </div>
              </div>
            ))}
          </div>
        ) : activeTab === 'walls' && filteredWalls.length > 0 ? (
          <div className="grid-container">
            {filteredWalls.map((wall) => (
              <div key={wall.id} className="item">
                <Walls length={wall.length} ref={wallsRef} />
                <div className="item-info">
                  <p>Wall {wall.id}</p>
                  <p>Length: {wall.length} units</p>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p className="no-results">No {activeTab} found.</p>
        )}
      </div>
    </div>
  );
};

export default Sidebar;


--- Table.js ---
// src/components/Table.jsx

import React from 'react';
import './css/table.css';

const Table = ({ numberOfGuests }) => {
  // Determine if the table is square
  const isSquare = numberOfGuests === 4;

  // Calculate table dimensions
  const tableWidth = isSquare ? 70 : 70 + (numberOfGuests - 4) * 15; // Adjust width for more guests
  const tableHeight = 70;

  // Calculate number of chairs per side
  const chairsPerSide = Math.ceil(numberOfGuests / 2);

  // Generate arrays for top and bottom chairs
  const topChairs = [];
  const bottomChairs = [];

  for (let i = 0; i < chairsPerSide; i++) {
    topChairs.push(i);
    bottomChairs.push(i);
  }

  return (
    <div
      className="table-container"
      style={{ width: `${tableWidth}px`, height: `${tableHeight + 80}px` }} // Increased height to accommodate chairs
    >
      {/* Chairs - Top */}
      <div
        className="chairs top-chairs"
        style={{
          width: `${tableWidth}px`,
        }}
      >
        {topChairs.slice(0, Math.floor(numberOfGuests / 2)).map((chair, index) => (
          <div key={`top-${index}`} className="chair"></div>
        ))}
      </div>

      {/* Table */}
      <div
        className="table"
        style={{
          width: `${tableWidth}px`,
          height: `${tableHeight}px`,
        }}
      ></div>

      {/* Chairs - Bottom */}
      <div
        className="chairs bottom-chairs"
        style={{
          width: `${tableWidth}px`,
        }}
      >
        {bottomChairs.slice(0, Math.ceil(numberOfGuests / 2)).map((chair, index) => (
          <div key={`bottom-${index}`} className="chair"></div>
        ))}
      </div>
    </div>
  );
};

export default Table;


--- Walls.js ---
// src/components/Walls.jsx

import React from 'react';
import './css/walls.css';

const Walls = ({ length }) => {
  // Define wall dimensions based on length
  const wallWidth = 100 + (length - 1) * 50; // Example: base width 100px, +50px per additional unit
  const wallHeight = 20; // Fixed height

  return (
    <div
      className="walls-container"
      style={{ width: `${wallWidth}px`, height: `${wallHeight}px` }}
    >
      {/* Wall representation */}
      <div className="wall"></div>
    </div>
  );
};

export default Walls;


--- css/app.css ---
/* src/components/css/app.css */

/* Layout Container */
.table-plan-page .app-container {
	display: flex;
	flex-direction: row;
	height: 100vh; /* Full viewport height */
	width: 100vw;  /* Full viewport width */
	box-sizing: border-box;
	padding: 20px;
	background-color: #f0f2f5; /* Light background color */
  }
  
  /* FloorPlan Styling */
  .table-plan-page .floor-plan {
	flex: 3; /* Takes up 75% of the width */
	margin-right: 20px; /* Space between FloorPlan and Sidebar */
	background-color: #ffffff;
	border-radius: 8px;
	overflow: hidden;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  /* Sidebar Styling is already defined in sidebar.css */
  

--- css/floorPlan.css ---
/* src/css/floorPlan.css */

/* Floor Plan Container */
.table-plan-page .floor-plan {
	position: relative;
	width: 100%; /* Fill the Flexbox allocated width */
	height: 100%; /* Fill the Flexbox allocated height */
	background-color: #ffffff;
	border: 2px solid #ccc;
	box-sizing: border-box;
	overflow: hidden;
	background-image:
	  linear-gradient(to right, #ddd 1px, transparent 1px),
	  linear-gradient(to bottom, #ddd 1px, transparent 1px);
	background-size: 50px 50px; /* Grid size */
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
	border-radius: 8px;
	transition: width 0.2s, height 0.2s;
  }
  
  .table-plan-page .resizable-floor-plan {
	position: relative;
	width: 100%;
	height: 100%;
  }
  

--- css/sidebar.css ---
/* src/components/css/sidebar.css */

/* Sidebar Container */
.table-plan-page .sidebar {
	/* Remove fixed positioning */
	/* position: fixed; */
	/* top: 60px; */
	width: 350px; /* Adjust as needed */
	height: auto; /* Let height be determined by content */
	background-color: #ffffff;
	box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
	padding: 20px;
	overflow-y: auto; /* Enable scrolling if content exceeds height */
	z-index: 1000; /* Ensure the sidebar is on top */
	border-radius: 8px; /* Optional: Add some rounding */
  }
  
  /* Adjust other styles as necessary */
  
  /* Tabs */
  .table-plan-page .tabs {
	width: 100%;
	align-items: center;
	justify-content: center;
	display: flex;
	margin-bottom: 20px;
	max-width: 800px;
	margin: 0 auto;
  }
  
  .table-plan-page .tabs .tab-menu {
	display: flex;
	justify-content: center;
	margin-bottom: 20px;
  }
  
  .table-plan-page .tabs .buttons-container {
	display: flex;
  }
  
  .table-plan-page .tabs .tab-button {
	position: relative;
	padding: 10px 20px;
	background: none;
	border: none;
	outline: none;
	cursor: pointer;
	font-size: 16px;
	color: #333;
	transition: color 0.3s;
  }
  
  .table-plan-page .tabs .tab-button.active {
	color: var(--color-blue, #007bff);
  }
  
  .table-plan-page .tabs .tab-button:hover {
	color: #555;
  }
  
  .table-plan-page .tabs .tab-underline {
	position: absolute;
	bottom: -2px;
	left: 0;
	right: 0;
	height: 2px;
	background-color: var(--color-blue, #007bff);
	border-radius: 5px;
  }
  
  /* Search Bar */
  .table-plan-page .search-bar {
	margin-bottom: 20px;
  }
  
  .table-plan-page .search-bar input {
	width: 100%;
	padding: 8px 12px;
	border: 1px solid #cccccc;
	border-radius: 4px;
	font-size: 14px;
  }
  
  /* Items List */
  .table-plan-page .items-list {
	display: flex;
	flex-direction: column;
	gap: 20px;
  }
  
  /* Grid Container for Two Items Per Row */
  .table-plan-page .grid-container {
	display: grid;
	grid-template-columns: repeat(2, 1fr);
	gap: 20px;
  }
  
  /* Individual Item */
  .table-plan-page .item {
	display: flex;
	flex-direction: column;
	align-items: center;
	border: 1px solid #e0e0e0;
	padding: 10px;
	border-radius: 8px;
	background-color: #fafafa;
	transition: box-shadow 0.2s, transform 0.2s;
  }
  
  .table-plan-page .item:hover {
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
	transform: translateY(-2px);
  }
  
  /* Item Information */
  .table-plan-page .item-info {
	margin-top: 10px;
	text-align: center;
  }
  
  .table-plan-page .item-info p {
	margin: 2px 0;
	font-size: 14px;
	color: #555555;
  }
  
  /* No Results Message */
  .table-plan-page .no-results {
	text-align: center;
	color: #888888;
  }
  
  /* Unsaved Changes Modal */
  .table-plan-page .unsaved-changes-modal {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background-color: rgba(0, 0, 0, 0.5);
	display: flex;
	justify-content: center;
	align-items: center;
  }
  
  .table-plan-page .unsaved-changes-modal .modal-content {
	background-color: #fff;
	padding: 30px 20px;
	border-radius: 5px;
	width: 90%;
  }
  
  .table-plan-page .unsaved-changes-modal .modal-content p {
	font-size: 16px;
	margin-bottom: 30px;
	text-align: center;
  }
  
  .table-plan-page .unsaved-changes-modal .modal-buttons {
	display: flex;
	justify-content: center;
  }
  
  .table-plan-page .unsaved-changes-modal .modal-buttons .cancel-button,
  .table-plan-page .unsaved-changes-modal .modal-buttons .discard-button {
	padding: 10px 20px;
	font-size: 16px;
	cursor: pointer;
	border: none;
	position: relative;
	border-radius: 5px;
  }
  
  .table-plan-page .unsaved-changes-modal .modal-buttons .cancel-button {
	margin-right: 10px;
	background-color: #f0f0f0;
	color: #333333;
  }
  
  .table-plan-page .unsaved-changes-modal .modal-buttons .discard-button {
	margin-left: 20px;
	background-color: #e0e0e0;
	color: #333333;
  }
  
  .table-plan-page .unsaved-changes-modal .modal-buttons .discard-button::after {
	content: '';
	position: absolute;
	top: -4px;
	left: -4px;
	bottom: -4px;
	right: -4px;
	border: 2px solid var(--color-red, #b71c1c);
	pointer-events: none;
	border-radius: 10px;
  }
  
  .table-plan-page .unsaved-changes-modal .modal-buttons .discard-button:hover {
	background-color: #b71c1c;
	color: #ffffff;
  }
  
  /* Responsive Adjustments */
  @media (max-width: 768px) {
	.table-plan-page .grid-container {
	  grid-template-columns: 1fr; /* Single column on small screens */
	}
  }
  

--- css/table.css ---
/* src/components/css/table.css */

.table-plan-page .table-container {
	position: relative;
	display: flex;
	align-items: center;
	justify-content: center;
	height: 80px; /* 70px table height + 80px for chairs */
  }
  
  .table-plan-page .table {
	background-color: #f5f5dc; /* Light Beige */
	border: 2px solid #d2b48c; /* Beige Border */
	border-radius: 8px;
	position: absolute;
	top: 50%; /* Center the table vertically */
	left: 50%;
	transform: translate(-50%, -50%); /* Center the table both horizontally and vertically */
	z-index: 2; /* Higher z-index to appear above chairs */
  }
  
  .table-plan-page .chairs {
	display: flex;
	justify-content: center;
	gap: 10px; /* Spacing between chairs */
	position: absolute;
	left: 50%;
	transform: translateX(-50%);
	z-index: 1; /* Lower z-index to appear below table */
  }
  
  .table-plan-page .top-chairs {
	top: 0;
	transform: translate(-50%, 150%); /* Center horizontally and shift upwards */
  }
  
  .table-plan-page .bottom-chairs {
	bottom: 0;
	transform: translate(-50%, -150%); /* Center horizontally and shift downwards */
  }
  
  .table-plan-page .chair {
	width: 20px;
	height: 20px;
	background-color: #f5f5dc; /* Light Beige */
	border: 2px solid #d2b48c; /* Beige Border */
	border-radius: 50%;
  }
  

--- css/walls.css ---
/* src/components/css/walls.css */

.table-plan-page .walls-container {
	display: flex;
	align-items: center;
	justify-content: center;
	margin: 10px;
  }
  
  .table-plan-page .wall {
	width: 100%;
	height: 100%;
	background-color: #8b4513; /* SaddleBrown color for walls */
	border: 2px solid #654321; /* Darker border */
	border-radius: 4px;
  }
  

--- index.js ---
// src/components/index.js

import React from 'react';
import FloorPlan from './FloorPlan.js';
import Sidebar from './Sidebar.js';
import { withHeader } from '../../Components/Structural/Header/index.js';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import './css/app.css'; // Import the new CSS for layout

const TablePlan = () => {
  // Sample data for tables
  const tables = [
    { id: 1, numberOfGuests: 4 },
    { id: 2, numberOfGuests: 6 },
    { id: 3, numberOfGuests: 2 },
    { id: 4, numberOfGuests: 8 },
    { id: 5, numberOfGuests: 4 },
    { id: 6, numberOfGuests: 5 },
    // Add more tables as needed
  ];

  // Sample data for walls
  const walls = [
    { id: 1, length: 3 },
    { id: 2, length: 5 },
    { id: 3, length: 2 },
    { id: 4, length: 4 },
    { id: 5, length: 6 },
    // Add more walls as needed
  ];

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="table-plan-page">
        <div className="app-container">
          {/* FloorPlan on the left */}
          <FloorPlan />

          {/* Sidebar on the right */}
          <Sidebar tables={tables} walls={walls} />
        </div>
      </div>
    </DndProvider>
  );
};

export default withHeader(TablePlan);



Directory Structure for "/Users/thibaultvandesompele/Desktop/Mateza 4.0/Client/Dashboard/dashboard-general/src/Pages/TablePlan":

├── FloorPlan.js
├── Sidebar.js
├── Table.js
├── Walls.js
├── css
│   ├── app.css
│   ├── floorPlan.css
│   ├── sidebar.css
│   ├── table.css
│   └── walls.css
└── index.js


List of Files:
FloorPlan.js
Sidebar.js
Table.js
Walls.js
css/app.css
css/floorPlan.css
css/sidebar.css
css/table.css
css/walls.css
index.js

**Instruction:**
1. Please encapsulate the main component in index.js inside the `.component-name-page` class.
2. Prefix all CSS classes with the `.component-name-page` class.

**Examples:**

*Encapsulation in index.js:*
```jsx
<div className="profile-page">
    <h2 className="account-manage-title">Admin Reservaties</h2>
    <div className="account-manage-container">
        {/* ... */}
        onClose={() => setIsModalOpen(false)}
    </div>
</div>
```

*Prefixed CSS Classes:*
```css
.profile-page .account-manage-container {
    justify-content: center;
    align-items: center;
    flex-direction: column;
    position: relative;
    width: 100%;
    max-width: 600px;
    text-align: center;
    background-color: white;
}

.profile-page .modal-title {
    text-align: center;
    width: 100%;
    margin-top: 20px;
    margin-bottom: 40px;
}
```Sometimes the encapsulation is already done, and we don't need to do it twice. Don't write any comments. Delete all commments and don't write any extra comments.